
complete.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d58  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08005ee8  08005ee8  00006ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fd8  08005fd8  0000705c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005fd8  08005fd8  00006fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005fe0  08005fe0  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fe0  08005fe0  00006fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005fe4  08005fe4  00006fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005fe8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000705c  2**0
                  CONTENTS
 10 .bss          000002b4  2000005c  2000005c  0000705c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000310  20000310  0000705c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e035  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021ee  00000000  00000000  000150c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e30  00000000  00000000  000172b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b0b  00000000  00000000  000180e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000216e5  00000000  00000000  00018beb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000105ba  00000000  00000000  0003a2d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb9a6  00000000  00000000  0004a88a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00116230  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000408c  00000000  00000000  00116274  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  0011a300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005ed0 	.word	0x08005ed0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08005ed0 	.word	0x08005ed0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <lcd_send_cmd>:

#define LCD_BACKLIGHT 0x08
#define ENABLE 0x04

void lcd_send_cmd(char cmd)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b086      	sub	sp, #24
 80005a0:	af02      	add	r7, sp, #8
 80005a2:	4603      	mov	r3, r0
 80005a4:	71fb      	strb	r3, [r7, #7]
    char data_u = cmd & 0xF0;
 80005a6:	79fb      	ldrb	r3, [r7, #7]
 80005a8:	f023 030f 	bic.w	r3, r3, #15
 80005ac:	73fb      	strb	r3, [r7, #15]
    char data_l = (cmd << 4) & 0xF0;
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	011b      	lsls	r3, r3, #4
 80005b2:	73bb      	strb	r3, [r7, #14]
    uint8_t data_t[4];
    data_t[0] = data_u | LCD_BACKLIGHT | ENABLE;
 80005b4:	7bfb      	ldrb	r3, [r7, #15]
 80005b6:	f043 030c 	orr.w	r3, r3, #12
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | LCD_BACKLIGHT;
 80005be:	7bfb      	ldrb	r3, [r7, #15]
 80005c0:	f043 0308 	orr.w	r3, r3, #8
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | LCD_BACKLIGHT | ENABLE;
 80005c8:	7bbb      	ldrb	r3, [r7, #14]
 80005ca:	f043 030c 	orr.w	r3, r3, #12
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | LCD_BACKLIGHT;
 80005d2:	7bbb      	ldrb	r3, [r7, #14]
 80005d4:	f043 0308 	orr.w	r3, r3, #8
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDR, data_t, 4, 100);
 80005dc:	f107 0208 	add.w	r2, r7, #8
 80005e0:	2364      	movs	r3, #100	@ 0x64
 80005e2:	9300      	str	r3, [sp, #0]
 80005e4:	2304      	movs	r3, #4
 80005e6:	214e      	movs	r1, #78	@ 0x4e
 80005e8:	4804      	ldr	r0, [pc, #16]	@ (80005fc <lcd_send_cmd+0x60>)
 80005ea:	f001 fb47 	bl	8001c7c <HAL_I2C_Master_Transmit>
    HAL_Delay(5);
 80005ee:	2005      	movs	r0, #5
 80005f0:	f000 fecc 	bl	800138c <HAL_Delay>
}
 80005f4:	bf00      	nop
 80005f6:	3710      	adds	r7, #16
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20000078 	.word	0x20000078

08000600 <lcd_send_data>:

void lcd_send_data(char data)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b086      	sub	sp, #24
 8000604:	af02      	add	r7, sp, #8
 8000606:	4603      	mov	r3, r0
 8000608:	71fb      	strb	r3, [r7, #7]
    char data_u = data & 0xF0;
 800060a:	79fb      	ldrb	r3, [r7, #7]
 800060c:	f023 030f 	bic.w	r3, r3, #15
 8000610:	73fb      	strb	r3, [r7, #15]
    char data_l = (data << 4) & 0xF0;
 8000612:	79fb      	ldrb	r3, [r7, #7]
 8000614:	011b      	lsls	r3, r3, #4
 8000616:	73bb      	strb	r3, [r7, #14]
    uint8_t data_t[4];
    data_t[0] = data_u | LCD_BACKLIGHT | ENABLE | 0x01;
 8000618:	7bfb      	ldrb	r3, [r7, #15]
 800061a:	f043 030d 	orr.w	r3, r3, #13
 800061e:	b2db      	uxtb	r3, r3
 8000620:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | LCD_BACKLIGHT | 0x01;
 8000622:	7bfb      	ldrb	r3, [r7, #15]
 8000624:	f043 0309 	orr.w	r3, r3, #9
 8000628:	b2db      	uxtb	r3, r3
 800062a:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | LCD_BACKLIGHT | ENABLE | 0x01;
 800062c:	7bbb      	ldrb	r3, [r7, #14]
 800062e:	f043 030d 	orr.w	r3, r3, #13
 8000632:	b2db      	uxtb	r3, r3
 8000634:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | LCD_BACKLIGHT | 0x01;
 8000636:	7bbb      	ldrb	r3, [r7, #14]
 8000638:	f043 0309 	orr.w	r3, r3, #9
 800063c:	b2db      	uxtb	r3, r3
 800063e:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDR, data_t, 4, 100);
 8000640:	f107 0208 	add.w	r2, r7, #8
 8000644:	2364      	movs	r3, #100	@ 0x64
 8000646:	9300      	str	r3, [sp, #0]
 8000648:	2304      	movs	r3, #4
 800064a:	214e      	movs	r1, #78	@ 0x4e
 800064c:	4804      	ldr	r0, [pc, #16]	@ (8000660 <lcd_send_data+0x60>)
 800064e:	f001 fb15 	bl	8001c7c <HAL_I2C_Master_Transmit>
    HAL_Delay(5);
 8000652:	2005      	movs	r0, #5
 8000654:	f000 fe9a 	bl	800138c <HAL_Delay>
}
 8000658:	bf00      	nop
 800065a:	3710      	adds	r7, #16
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	20000078 	.word	0x20000078

08000664 <lcd_clear>:

void lcd_clear(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
    lcd_send_cmd(0x01);
 8000668:	2001      	movs	r0, #1
 800066a:	f7ff ff97 	bl	800059c <lcd_send_cmd>
    HAL_Delay(2);
 800066e:	2002      	movs	r0, #2
 8000670:	f000 fe8c 	bl	800138c <HAL_Delay>
}
 8000674:	bf00      	nop
 8000676:	bd80      	pop	{r7, pc}

08000678 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	6039      	str	r1, [r7, #0]
    uint8_t pos[] = {0x80, 0xC0, 0x94, 0xD4};
 8000682:	4b09      	ldr	r3, [pc, #36]	@ (80006a8 <lcd_put_cur+0x30>)
 8000684:	60fb      	str	r3, [r7, #12]
    lcd_send_cmd(pos[row] + col);
 8000686:	f107 020c 	add.w	r2, r7, #12
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	4413      	add	r3, r2
 800068e:	781a      	ldrb	r2, [r3, #0]
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	b2db      	uxtb	r3, r3
 8000694:	4413      	add	r3, r2
 8000696:	b2db      	uxtb	r3, r3
 8000698:	4618      	mov	r0, r3
 800069a:	f7ff ff7f 	bl	800059c <lcd_send_cmd>
}
 800069e:	bf00      	nop
 80006a0:	3710      	adds	r7, #16
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	d494c080 	.word	0xd494c080

080006ac <lcd_send_string>:

void lcd_send_string(char *str)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
    while (*str) lcd_send_data(*str++);
 80006b4:	e006      	b.n	80006c4 <lcd_send_string+0x18>
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	1c5a      	adds	r2, r3, #1
 80006ba:	607a      	str	r2, [r7, #4]
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	4618      	mov	r0, r3
 80006c0:	f7ff ff9e 	bl	8000600 <lcd_send_data>
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d1f4      	bne.n	80006b6 <lcd_send_string+0xa>
}
 80006cc:	bf00      	nop
 80006ce:	bf00      	nop
 80006d0:	3708      	adds	r7, #8
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}

080006d6 <lcd_init>:

void lcd_init(void)
{
 80006d6:	b580      	push	{r7, lr}
 80006d8:	af00      	add	r7, sp, #0
    HAL_Delay(50);
 80006da:	2032      	movs	r0, #50	@ 0x32
 80006dc:	f000 fe56 	bl	800138c <HAL_Delay>
    lcd_send_cmd(0x30);
 80006e0:	2030      	movs	r0, #48	@ 0x30
 80006e2:	f7ff ff5b 	bl	800059c <lcd_send_cmd>
    HAL_Delay(5);
 80006e6:	2005      	movs	r0, #5
 80006e8:	f000 fe50 	bl	800138c <HAL_Delay>
    lcd_send_cmd(0x30);
 80006ec:	2030      	movs	r0, #48	@ 0x30
 80006ee:	f7ff ff55 	bl	800059c <lcd_send_cmd>
    HAL_Delay(1);
 80006f2:	2001      	movs	r0, #1
 80006f4:	f000 fe4a 	bl	800138c <HAL_Delay>
    lcd_send_cmd(0x30);
 80006f8:	2030      	movs	r0, #48	@ 0x30
 80006fa:	f7ff ff4f 	bl	800059c <lcd_send_cmd>
    lcd_send_cmd(0x20); // 4-bit mode
 80006fe:	2020      	movs	r0, #32
 8000700:	f7ff ff4c 	bl	800059c <lcd_send_cmd>
    HAL_Delay(1);
 8000704:	2001      	movs	r0, #1
 8000706:	f000 fe41 	bl	800138c <HAL_Delay>
    lcd_send_cmd(0x28); // 2 lines, 5x7 matrix
 800070a:	2028      	movs	r0, #40	@ 0x28
 800070c:	f7ff ff46 	bl	800059c <lcd_send_cmd>
    HAL_Delay(1);
 8000710:	2001      	movs	r0, #1
 8000712:	f000 fe3b 	bl	800138c <HAL_Delay>
    lcd_send_cmd(0x08); // Display off
 8000716:	2008      	movs	r0, #8
 8000718:	f7ff ff40 	bl	800059c <lcd_send_cmd>
    lcd_send_cmd(0x01); // Clear display
 800071c:	2001      	movs	r0, #1
 800071e:	f7ff ff3d 	bl	800059c <lcd_send_cmd>
    HAL_Delay(2);
 8000722:	2002      	movs	r0, #2
 8000724:	f000 fe32 	bl	800138c <HAL_Delay>
    lcd_send_cmd(0x06); // Entry mode
 8000728:	2006      	movs	r0, #6
 800072a:	f7ff ff37 	bl	800059c <lcd_send_cmd>
    lcd_send_cmd(0x0C); // Display on, cursor off
 800072e:	200c      	movs	r0, #12
 8000730:	f7ff ff34 	bl	800059c <lcd_send_cmd>
}
 8000734:	bf00      	nop
 8000736:	bd80      	pop	{r7, pc}

08000738 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b086      	sub	sp, #24
 800073c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800073e:	f000 fde3 	bl	8001308 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000742:	f000 f9f1 	bl	8000b28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000746:	f000 fb21 	bl	8000d8c <MX_GPIO_Init>
  MX_I2C1_Init();
 800074a:	f000 fa4b 	bl	8000be4 <MX_I2C1_Init>
  MX_TIM2_Init();
 800074e:	f000 fa77 	bl	8000c40 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000752:	f000 facd 	bl	8000cf0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);             // kick off your servo PWM
 8000756:	2100      	movs	r1, #0
 8000758:	48bd      	ldr	r0, [pc, #756]	@ (8000a50 <main+0x318>)
 800075a:	f004 f809 	bl	8004770 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, SERVO_MIN_PULSE);  // sit at 0° initially
 800075e:	4bbc      	ldr	r3, [pc, #752]	@ (8000a50 <main+0x318>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	2264      	movs	r2, #100	@ 0x64
 8000764:	635a      	str	r2, [r3, #52]	@ 0x34
  lcd_init();                    // bring up the display
 8000766:	f7ff ffb6 	bl	80006d6 <lcd_init>

SETUP:
  lcd_put_cur(0, 0);             // first row, first column
 800076a:	2100      	movs	r1, #0
 800076c:	2000      	movs	r0, #0
 800076e:	f7ff ff83 	bl	8000678 <lcd_put_cur>
  lcd_send_string("Hey rudra, study!");
 8000772:	48b8      	ldr	r0, [pc, #736]	@ (8000a54 <main+0x31c>)
 8000774:	f7ff ff9a 	bl	80006ac <lcd_send_string>
  lcd_put_cur(1, 0);             // second row
 8000778:	2100      	movs	r1, #0
 800077a:	2001      	movs	r0, #1
 800077c:	f7ff ff7c 	bl	8000678 <lcd_put_cur>
  lcd_send_string("Let's set timer now,ok? ");
 8000780:	48b5      	ldr	r0, [pc, #724]	@ (8000a58 <main+0x320>)
 8000782:	f7ff ff93 	bl	80006ac <lcd_send_string>
   // wait until OK button (PA5) is pressed
    while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) != GPIO_PIN_RESET) { }
 8000786:	bf00      	nop
 8000788:	2120      	movs	r1, #32
 800078a:	48b4      	ldr	r0, [pc, #720]	@ (8000a5c <main+0x324>)
 800078c:	f001 f8d0 	bl	8001930 <HAL_GPIO_ReadPin>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d1f8      	bne.n	8000788 <main+0x50>
   HAL_Delay(50);   // debounce
 8000796:	2032      	movs	r0, #50	@ 0x32
 8000798:	f000 fdf8 	bl	800138c <HAL_Delay>
   // wait until OK is released
   while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) != GPIO_PIN_SET) { }
 800079c:	bf00      	nop
 800079e:	2120      	movs	r1, #32
 80007a0:	48ae      	ldr	r0, [pc, #696]	@ (8000a5c <main+0x324>)
 80007a2:	f001 f8c5 	bl	8001930 <HAL_GPIO_ReadPin>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b01      	cmp	r3, #1
 80007aa:	d1f8      	bne.n	800079e <main+0x66>
    HAL_Delay(50);   // debounce
 80007ac:	2032      	movs	r0, #50	@ 0x32
 80007ae:	f000 fded 	bl	800138c <HAL_Delay>
  lcd_clear();
 80007b2:	f7ff ff57 	bl	8000664 <lcd_clear>
  lcd_put_cur(0, 0);
 80007b6:	2100      	movs	r1, #0
 80007b8:	2000      	movs	r0, #0
 80007ba:	f7ff ff5d 	bl	8000678 <lcd_put_cur>
  lcd_send_string("minutes");      // labels for each column
 80007be:	48a8      	ldr	r0, [pc, #672]	@ (8000a60 <main+0x328>)
 80007c0:	f7ff ff74 	bl	80006ac <lcd_send_string>
  sprintf(buf, "%6u ",count);
 80007c4:	4ba7      	ldr	r3, [pc, #668]	@ (8000a64 <main+0x32c>)
 80007c6:	881b      	ldrh	r3, [r3, #0]
 80007c8:	461a      	mov	r2, r3
 80007ca:	49a7      	ldr	r1, [pc, #668]	@ (8000a68 <main+0x330>)
 80007cc:	48a7      	ldr	r0, [pc, #668]	@ (8000a6c <main+0x334>)
 80007ce:	f004 fedf 	bl	8005590 <siprintf>
  lcd_put_cur(1, 0);
 80007d2:	2100      	movs	r1, #0
 80007d4:	2001      	movs	r0, #1
 80007d6:	f7ff ff4f 	bl	8000678 <lcd_put_cur>
  lcd_send_string(buf);
 80007da:	48a4      	ldr	r0, [pc, #656]	@ (8000a6c <main+0x334>)
 80007dc:	f7ff ff66 	bl	80006ac <lcd_send_string>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == GPIO_PIN_SET)
 80007e0:	2110      	movs	r1, #16
 80007e2:	489e      	ldr	r0, [pc, #632]	@ (8000a5c <main+0x324>)
 80007e4:	f001 f8a4 	bl	8001930 <HAL_GPIO_ReadPin>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b01      	cmp	r3, #1
 80007ec:	d135      	bne.n	800085a <main+0x122>
	    {
	        HAL_Delay(50);  // crude debounce
 80007ee:	2032      	movs	r0, #50	@ 0x32
 80007f0:	f000 fdcc 	bl	800138c <HAL_Delay>
	        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == GPIO_PIN_SET)
 80007f4:	2110      	movs	r1, #16
 80007f6:	4899      	ldr	r0, [pc, #612]	@ (8000a5c <main+0x324>)
 80007f8:	f001 f89a 	bl	8001930 <HAL_GPIO_ReadPin>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b01      	cmp	r3, #1
 8000800:	d12b      	bne.n	800085a <main+0x122>
	        {
	            // 1) blink the LED on PD14
	            HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000802:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000806:	489a      	ldr	r0, [pc, #616]	@ (8000a70 <main+0x338>)
 8000808:	f001 f8c3 	bl	8001992 <HAL_GPIO_TogglePin>
	            HAL_Delay(200);
 800080c:	20c8      	movs	r0, #200	@ 0xc8
 800080e:	f000 fdbd 	bl	800138c <HAL_Delay>
	            HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000812:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000816:	4896      	ldr	r0, [pc, #600]	@ (8000a70 <main+0x338>)
 8000818:	f001 f8bb 	bl	8001992 <HAL_GPIO_TogglePin>

	            // 2) bump the counter & redraw
	            count++;
 800081c:	4b91      	ldr	r3, [pc, #580]	@ (8000a64 <main+0x32c>)
 800081e:	881b      	ldrh	r3, [r3, #0]
 8000820:	3301      	adds	r3, #1
 8000822:	b29a      	uxth	r2, r3
 8000824:	4b8f      	ldr	r3, [pc, #572]	@ (8000a64 <main+0x32c>)
 8000826:	801a      	strh	r2, [r3, #0]
	            sprintf(buf, "%6u", count);
 8000828:	4b8e      	ldr	r3, [pc, #568]	@ (8000a64 <main+0x32c>)
 800082a:	881b      	ldrh	r3, [r3, #0]
 800082c:	461a      	mov	r2, r3
 800082e:	4991      	ldr	r1, [pc, #580]	@ (8000a74 <main+0x33c>)
 8000830:	488e      	ldr	r0, [pc, #568]	@ (8000a6c <main+0x334>)
 8000832:	f004 fead 	bl	8005590 <siprintf>
	            lcd_put_cur(1, 0);        // second row, column 0
 8000836:	2100      	movs	r1, #0
 8000838:	2001      	movs	r0, #1
 800083a:	f7ff ff1d 	bl	8000678 <lcd_put_cur>
	            lcd_send_string(buf);
 800083e:	488b      	ldr	r0, [pc, #556]	@ (8000a6c <main+0x334>)
 8000840:	f7ff ff34 	bl	80006ac <lcd_send_string>

	            // 3) wait until you let go
	            while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == GPIO_PIN_SET) { }
 8000844:	bf00      	nop
 8000846:	2110      	movs	r1, #16
 8000848:	4884      	ldr	r0, [pc, #528]	@ (8000a5c <main+0x324>)
 800084a:	f001 f871 	bl	8001930 <HAL_GPIO_ReadPin>
 800084e:	4603      	mov	r3, r0
 8000850:	2b01      	cmp	r3, #1
 8000852:	d0f8      	beq.n	8000846 <main+0x10e>
	            HAL_Delay(50);  // extra release debounce
 8000854:	2032      	movs	r0, #50	@ 0x32
 8000856:	f000 fd99 	bl	800138c <HAL_Delay>
	        }
	    }

	    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_RESET)  // <-- SET, not RESET
 800085a:	2140      	movs	r1, #64	@ 0x40
 800085c:	487f      	ldr	r0, [pc, #508]	@ (8000a5c <main+0x324>)
 800085e:	f001 f867 	bl	8001930 <HAL_GPIO_ReadPin>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d139      	bne.n	80008dc <main+0x1a4>
	    {
	        HAL_Delay(50);
 8000868:	2032      	movs	r0, #50	@ 0x32
 800086a:	f000 fd8f 	bl	800138c <HAL_Delay>
	        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_RESET)
 800086e:	2140      	movs	r1, #64	@ 0x40
 8000870:	487a      	ldr	r0, [pc, #488]	@ (8000a5c <main+0x324>)
 8000872:	f001 f85d 	bl	8001930 <HAL_GPIO_ReadPin>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d12f      	bne.n	80008dc <main+0x1a4>
	        {
	            // blink LED on PD13
	            HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 800087c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000880:	487b      	ldr	r0, [pc, #492]	@ (8000a70 <main+0x338>)
 8000882:	f001 f886 	bl	8001992 <HAL_GPIO_TogglePin>
	            HAL_Delay(200);
 8000886:	20c8      	movs	r0, #200	@ 0xc8
 8000888:	f000 fd80 	bl	800138c <HAL_Delay>
	            HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 800088c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000890:	4877      	ldr	r0, [pc, #476]	@ (8000a70 <main+0x338>)
 8000892:	f001 f87e 	bl	8001992 <HAL_GPIO_TogglePin>

	            // decrement & redraw
	            if (count > 0) count--;
 8000896:	4b73      	ldr	r3, [pc, #460]	@ (8000a64 <main+0x32c>)
 8000898:	881b      	ldrh	r3, [r3, #0]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d005      	beq.n	80008aa <main+0x172>
 800089e:	4b71      	ldr	r3, [pc, #452]	@ (8000a64 <main+0x32c>)
 80008a0:	881b      	ldrh	r3, [r3, #0]
 80008a2:	3b01      	subs	r3, #1
 80008a4:	b29a      	uxth	r2, r3
 80008a6:	4b6f      	ldr	r3, [pc, #444]	@ (8000a64 <main+0x32c>)
 80008a8:	801a      	strh	r2, [r3, #0]
	            sprintf(buf, "%6u", count);
 80008aa:	4b6e      	ldr	r3, [pc, #440]	@ (8000a64 <main+0x32c>)
 80008ac:	881b      	ldrh	r3, [r3, #0]
 80008ae:	461a      	mov	r2, r3
 80008b0:	4970      	ldr	r1, [pc, #448]	@ (8000a74 <main+0x33c>)
 80008b2:	486e      	ldr	r0, [pc, #440]	@ (8000a6c <main+0x334>)
 80008b4:	f004 fe6c 	bl	8005590 <siprintf>
	            lcd_put_cur(1, 0);
 80008b8:	2100      	movs	r1, #0
 80008ba:	2001      	movs	r0, #1
 80008bc:	f7ff fedc 	bl	8000678 <lcd_put_cur>
	            lcd_send_string(buf);
 80008c0:	486a      	ldr	r0, [pc, #424]	@ (8000a6c <main+0x334>)
 80008c2:	f7ff fef3 	bl	80006ac <lcd_send_string>

	            // wait for button release
	            while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_RESET) { }
 80008c6:	bf00      	nop
 80008c8:	2140      	movs	r1, #64	@ 0x40
 80008ca:	4864      	ldr	r0, [pc, #400]	@ (8000a5c <main+0x324>)
 80008cc:	f001 f830 	bl	8001930 <HAL_GPIO_ReadPin>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d0f8      	beq.n	80008c8 <main+0x190>
	            HAL_Delay(50);
 80008d6:	2032      	movs	r0, #50	@ 0x32
 80008d8:	f000 fd58 	bl	800138c <HAL_Delay>
	        }
	    }


	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == GPIO_PIN_SET)
 80008dc:	2120      	movs	r1, #32
 80008de:	485f      	ldr	r0, [pc, #380]	@ (8000a5c <main+0x324>)
 80008e0:	f001 f826 	bl	8001930 <HAL_GPIO_ReadPin>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b01      	cmp	r3, #1
 80008e8:	d177      	bne.n	80009da <main+0x2a2>
	  {
	      // 1) simple debounce
	      HAL_Delay(50);
 80008ea:	2032      	movs	r0, #50	@ 0x32
 80008ec:	f000 fd4e 	bl	800138c <HAL_Delay>
	      if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == GPIO_PIN_SET)
 80008f0:	2120      	movs	r1, #32
 80008f2:	485a      	ldr	r0, [pc, #360]	@ (8000a5c <main+0x324>)
 80008f4:	f001 f81c 	bl	8001930 <HAL_GPIO_ReadPin>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	d16d      	bne.n	80009da <main+0x2a2>
	      {
	          // 2) blink two LEDs on PD13/14
	          HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 80008fe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000902:	485b      	ldr	r0, [pc, #364]	@ (8000a70 <main+0x338>)
 8000904:	f001 f845 	bl	8001992 <HAL_GPIO_TogglePin>
	          HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000908:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800090c:	4858      	ldr	r0, [pc, #352]	@ (8000a70 <main+0x338>)
 800090e:	f001 f840 	bl	8001992 <HAL_GPIO_TogglePin>
	          HAL_Delay(200);
 8000912:	20c8      	movs	r0, #200	@ 0xc8
 8000914:	f000 fd3a 	bl	800138c <HAL_Delay>
	          HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000918:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800091c:	4854      	ldr	r0, [pc, #336]	@ (8000a70 <main+0x338>)
 800091e:	f001 f838 	bl	8001992 <HAL_GPIO_TogglePin>
	          HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000922:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000926:	4852      	ldr	r0, [pc, #328]	@ (8000a70 <main+0x338>)
 8000928:	f001 f833 	bl	8001992 <HAL_GPIO_TogglePin>

	          // 3) write your message (or count) to the LCD
	          lcd_put_cur(0, 0);              // second row, first column
 800092c:	2100      	movs	r1, #0
 800092e:	2000      	movs	r0, #0
 8000930:	f7ff fea2 	bl	8000678 <lcd_put_cur>
	          lcd_send_string("okay great !"); // pad or clear up to end-of-line if needed
 8000934:	4850      	ldr	r0, [pc, #320]	@ (8000a78 <main+0x340>)
 8000936:	f7ff feb9 	bl	80006ac <lcd_send_string>
	          lcd_put_cur(1, 0);              // second row, first column
 800093a:	2100      	movs	r1, #0
 800093c:	2001      	movs	r0, #1
 800093e:	f7ff fe9b 	bl	8000678 <lcd_put_cur>
	          lcd_send_string("starting timer"); // pad or clear up to end-of-line if needed
 8000942:	484e      	ldr	r0, [pc, #312]	@ (8000a7c <main+0x344>)
 8000944:	f7ff feb2 	bl	80006ac <lcd_send_string>


	          // 4) wait for release
	          while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == GPIO_PIN_SET) { }
 8000948:	bf00      	nop
 800094a:	2120      	movs	r1, #32
 800094c:	4843      	ldr	r0, [pc, #268]	@ (8000a5c <main+0x324>)
 800094e:	f000 ffef 	bl	8001930 <HAL_GPIO_ReadPin>
 8000952:	4603      	mov	r3, r0
 8000954:	2b01      	cmp	r3, #1
 8000956:	d0f8      	beq.n	800094a <main+0x212>
	          HAL_Delay(50);  // extra debounce on release
 8000958:	2032      	movs	r0, #50	@ 0x32
 800095a:	f000 fd17 	bl	800138c <HAL_Delay>


	          	lcd_clear();
 800095e:	f7ff fe81 	bl	8000664 <lcd_clear>
	            lcd_put_cur(0,0);
 8000962:	2100      	movs	r1, #0
 8000964:	2000      	movs	r0, #0
 8000966:	f7ff fe87 	bl	8000678 <lcd_put_cur>
	            lcd_send_string(" Time left:   ");   // row 0
 800096a:	4845      	ldr	r0, [pc, #276]	@ (8000a80 <main+0x348>)
 800096c:	f7ff fe9e 	bl	80006ac <lcd_send_string>

	            // print the initial MM:SS (all your minutes, zero seconds)
	            uint8_t m0 = count;
 8000970:	4b3c      	ldr	r3, [pc, #240]	@ (8000a64 <main+0x32c>)
 8000972:	881b      	ldrh	r3, [r3, #0]
 8000974:	75fb      	strb	r3, [r7, #23]
	            uint8_t s0 = 0;
 8000976:	2300      	movs	r3, #0
 8000978:	75bb      	strb	r3, [r7, #22]
	            char t0[8];
	            sprintf(t0, "%02u:%02u", m0, s0);
 800097a:	7dfa      	ldrb	r2, [r7, #23]
 800097c:	7dbb      	ldrb	r3, [r7, #22]
 800097e:	f107 000c 	add.w	r0, r7, #12
 8000982:	4940      	ldr	r1, [pc, #256]	@ (8000a84 <main+0x34c>)
 8000984:	f004 fe04 	bl	8005590 <siprintf>
	            lcd_put_cur(1,0);
 8000988:	2100      	movs	r1, #0
 800098a:	2001      	movs	r0, #1
 800098c:	f7ff fe74 	bl	8000678 <lcd_put_cur>
	            lcd_send_string(t0);                  // row 1
 8000990:	f107 030c 	add.w	r3, r7, #12
 8000994:	4618      	mov	r0, r3
 8000996:	f7ff fe89 	bl	80006ac <lcd_send_string>

	          remaining_secs = count * 60;
 800099a:	4b32      	ldr	r3, [pc, #200]	@ (8000a64 <main+0x32c>)
 800099c:	881b      	ldrh	r3, [r3, #0]
 800099e:	461a      	mov	r2, r3
 80009a0:	4613      	mov	r3, r2
 80009a2:	011b      	lsls	r3, r3, #4
 80009a4:	1a9b      	subs	r3, r3, r2
 80009a6:	009b      	lsls	r3, r3, #2
 80009a8:	461a      	mov	r2, r3
 80009aa:	4b37      	ldr	r3, [pc, #220]	@ (8000a88 <main+0x350>)
 80009ac:	601a      	str	r2, [r3, #0]
	          timer_running  = true;
 80009ae:	4b37      	ldr	r3, [pc, #220]	@ (8000a8c <main+0x354>)
 80009b0:	2201      	movs	r2, #1
 80009b2:	701a      	strb	r2, [r3, #0]

	          __HAL_TIM_CLEAR_FLAG(&htim3, TIM_FLAG_UPDATE);
 80009b4:	4b36      	ldr	r3, [pc, #216]	@ (8000a90 <main+0x358>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f06f 0201 	mvn.w	r2, #1
 80009bc:	611a      	str	r2, [r3, #16]
	          // make sure we start counting from zero
	          __HAL_TIM_SET_COUNTER(&htim3, 0);
 80009be:	4b34      	ldr	r3, [pc, #208]	@ (8000a90 <main+0x358>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	2200      	movs	r2, #0
 80009c4:	625a      	str	r2, [r3, #36]	@ 0x24

	          // now start in polling mode
	          HAL_TIM_Base_Start(&htim3);
 80009c6:	4832      	ldr	r0, [pc, #200]	@ (8000a90 <main+0x358>)
 80009c8:	f003 fd82 	bl	80044d0 <HAL_TIM_Base_Start>
	          timer_running = true;
 80009cc:	4b2f      	ldr	r3, [pc, #188]	@ (8000a8c <main+0x354>)
 80009ce:	2201      	movs	r2, #1
 80009d0:	701a      	strb	r2, [r3, #0]
	         __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, SERVO_RIGHT_PULSE);
 80009d2:	4b1f      	ldr	r3, [pc, #124]	@ (8000a50 <main+0x318>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	22c8      	movs	r2, #200	@ 0xc8
 80009d8:	635a      	str	r2, [r3, #52]	@ 0x34

	      }
	  }

	    if (timer_running) {
 80009da:	4b2c      	ldr	r3, [pc, #176]	@ (8000a8c <main+0x354>)
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	f43f aefe 	beq.w	80007e0 <main+0xa8>
	        if (remaining_secs > 0) {
 80009e4:	4b28      	ldr	r3, [pc, #160]	@ (8000a88 <main+0x350>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d05e      	beq.n	8000aaa <main+0x372>
	            // did TIM3 roll over?
	            if (__HAL_TIM_GET_FLAG(&htim3, TIM_FLAG_UPDATE)) {
 80009ec:	4b28      	ldr	r3, [pc, #160]	@ (8000a90 <main+0x358>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	691b      	ldr	r3, [r3, #16]
 80009f2:	f003 0301 	and.w	r3, r3, #1
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	f47f aef2 	bne.w	80007e0 <main+0xa8>
	                __HAL_TIM_CLEAR_FLAG(&htim3, TIM_FLAG_UPDATE);
 80009fc:	4b24      	ldr	r3, [pc, #144]	@ (8000a90 <main+0x358>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f06f 0201 	mvn.w	r2, #1
 8000a04:	611a      	str	r2, [r3, #16]

	                remaining_secs--;
 8000a06:	4b20      	ldr	r3, [pc, #128]	@ (8000a88 <main+0x350>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	3b01      	subs	r3, #1
 8000a0c:	4a1e      	ldr	r2, [pc, #120]	@ (8000a88 <main+0x350>)
 8000a0e:	6013      	str	r3, [r2, #0]
	                HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000a10:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a14:	4816      	ldr	r0, [pc, #88]	@ (8000a70 <main+0x338>)
 8000a16:	f000 ffbc 	bl	8001992 <HAL_GPIO_TogglePin>

	                uint8_t m = remaining_secs / 60;
 8000a1a:	4b1b      	ldr	r3, [pc, #108]	@ (8000a88 <main+0x350>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4a1d      	ldr	r2, [pc, #116]	@ (8000a94 <main+0x35c>)
 8000a20:	fba2 2303 	umull	r2, r3, r2, r3
 8000a24:	095b      	lsrs	r3, r3, #5
 8000a26:	757b      	strb	r3, [r7, #21]
	                uint8_t s = remaining_secs % 60;
 8000a28:	4b17      	ldr	r3, [pc, #92]	@ (8000a88 <main+0x350>)
 8000a2a:	6819      	ldr	r1, [r3, #0]
 8000a2c:	4b19      	ldr	r3, [pc, #100]	@ (8000a94 <main+0x35c>)
 8000a2e:	fba3 2301 	umull	r2, r3, r3, r1
 8000a32:	095a      	lsrs	r2, r3, #5
 8000a34:	4613      	mov	r3, r2
 8000a36:	011b      	lsls	r3, r3, #4
 8000a38:	1a9b      	subs	r3, r3, r2
 8000a3a:	009b      	lsls	r3, r3, #2
 8000a3c:	1aca      	subs	r2, r1, r3
 8000a3e:	4613      	mov	r3, r2
 8000a40:	753b      	strb	r3, [r7, #20]
	                char tbuf[8];
	                sprintf(tbuf, "%02u:%02u", m, s);
 8000a42:	7d7a      	ldrb	r2, [r7, #21]
 8000a44:	7d3b      	ldrb	r3, [r7, #20]
 8000a46:	1d38      	adds	r0, r7, #4
 8000a48:	490e      	ldr	r1, [pc, #56]	@ (8000a84 <main+0x34c>)
 8000a4a:	f004 fda1 	bl	8005590 <siprintf>
 8000a4e:	e023      	b.n	8000a98 <main+0x360>
 8000a50:	200000cc 	.word	0x200000cc
 8000a54:	08005ee8 	.word	0x08005ee8
 8000a58:	08005efc 	.word	0x08005efc
 8000a5c:	40020000 	.word	0x40020000
 8000a60:	08005f18 	.word	0x08005f18
 8000a64:	20000162 	.word	0x20000162
 8000a68:	08005f20 	.word	0x08005f20
 8000a6c:	20000164 	.word	0x20000164
 8000a70:	40020c00 	.word	0x40020c00
 8000a74:	08005f28 	.word	0x08005f28
 8000a78:	08005f2c 	.word	0x08005f2c
 8000a7c:	08005f3c 	.word	0x08005f3c
 8000a80:	08005f4c 	.word	0x08005f4c
 8000a84:	08005f5c 	.word	0x08005f5c
 8000a88:	2000015c 	.word	0x2000015c
 8000a8c:	20000160 	.word	0x20000160
 8000a90:	20000114 	.word	0x20000114
 8000a94:	88888889 	.word	0x88888889
	                lcd_put_cur(1,0);
 8000a98:	2100      	movs	r1, #0
 8000a9a:	2001      	movs	r0, #1
 8000a9c:	f7ff fdec 	bl	8000678 <lcd_put_cur>
	                lcd_send_string(tbuf);
 8000aa0:	1d3b      	adds	r3, r7, #4
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f7ff fe02 	bl	80006ac <lcd_send_string>
 8000aa8:	e69a      	b.n	80007e0 <main+0xa8>
	            }
	        }
	        else {
	            // countdown finished
	            timer_running = false;
 8000aaa:	4b19      	ldr	r3, [pc, #100]	@ (8000b10 <main+0x3d8>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	701a      	strb	r2, [r3, #0]
	            HAL_TIM_Base_Stop(&htim3);
 8000ab0:	4818      	ldr	r0, [pc, #96]	@ (8000b14 <main+0x3dc>)
 8000ab2:	f003 fd75 	bl	80045a0 <HAL_TIM_Base_Stop>

	            lcd_clear();
 8000ab6:	f7ff fdd5 	bl	8000664 <lcd_clear>
	            lcd_put_cur(0,0);
 8000aba:	2100      	movs	r1, #0
 8000abc:	2000      	movs	r0, #0
 8000abe:	f7ff fddb 	bl	8000678 <lcd_put_cur>
	            lcd_send_string("  Time's Up!   ");
 8000ac2:	4815      	ldr	r0, [pc, #84]	@ (8000b18 <main+0x3e0>)
 8000ac4:	f7ff fdf2 	bl	80006ac <lcd_send_string>
	            lcd_put_cur(1,0);
 8000ac8:	2100      	movs	r1, #0
 8000aca:	2001      	movs	r0, #1
 8000acc:	f7ff fdd4 	bl	8000678 <lcd_put_cur>
	            lcd_send_string(" Start again?   ");
 8000ad0:	4812      	ldr	r0, [pc, #72]	@ (8000b1c <main+0x3e4>)
 8000ad2:	f7ff fdeb 	bl	80006ac <lcd_send_string>


	            __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, SERVO_LEFT_PULSE);
 8000ad6:	4b12      	ldr	r3, [pc, #72]	@ (8000b20 <main+0x3e8>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	2264      	movs	r2, #100	@ 0x64
 8000adc:	635a      	str	r2, [r3, #52]	@ 0x34
	            while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) != GPIO_PIN_RESET) { }
 8000ade:	bf00      	nop
 8000ae0:	2120      	movs	r1, #32
 8000ae2:	4810      	ldr	r0, [pc, #64]	@ (8000b24 <main+0x3ec>)
 8000ae4:	f000 ff24 	bl	8001930 <HAL_GPIO_ReadPin>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d1f8      	bne.n	8000ae0 <main+0x3a8>
	           HAL_Delay(50);   // debounce
 8000aee:	2032      	movs	r0, #50	@ 0x32
 8000af0:	f000 fc4c 	bl	800138c <HAL_Delay>

	           while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) != GPIO_PIN_SET) { }
 8000af4:	bf00      	nop
 8000af6:	2120      	movs	r1, #32
 8000af8:	480a      	ldr	r0, [pc, #40]	@ (8000b24 <main+0x3ec>)
 8000afa:	f000 ff19 	bl	8001930 <HAL_GPIO_ReadPin>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	d1f8      	bne.n	8000af6 <main+0x3be>
	            HAL_Delay(50);
 8000b04:	2032      	movs	r0, #50	@ 0x32
 8000b06:	f000 fc41 	bl	800138c <HAL_Delay>
	            lcd_clear();
 8000b0a:	f7ff fdab 	bl	8000664 <lcd_clear>
	            goto SETUP;
 8000b0e:	e62c      	b.n	800076a <main+0x32>
 8000b10:	20000160 	.word	0x20000160
 8000b14:	20000114 	.word	0x20000114
 8000b18:	08005f68 	.word	0x08005f68
 8000b1c:	08005f78 	.word	0x08005f78
 8000b20:	200000cc 	.word	0x200000cc
 8000b24:	40020000 	.word	0x40020000

08000b28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b094      	sub	sp, #80	@ 0x50
 8000b2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b2e:	f107 0320 	add.w	r3, r7, #32
 8000b32:	2230      	movs	r2, #48	@ 0x30
 8000b34:	2100      	movs	r1, #0
 8000b36:	4618      	mov	r0, r3
 8000b38:	f004 fd4c 	bl	80055d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b3c:	f107 030c 	add.w	r3, r7, #12
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]
 8000b46:	609a      	str	r2, [r3, #8]
 8000b48:	60da      	str	r2, [r3, #12]
 8000b4a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	60bb      	str	r3, [r7, #8]
 8000b50:	4b22      	ldr	r3, [pc, #136]	@ (8000bdc <SystemClock_Config+0xb4>)
 8000b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b54:	4a21      	ldr	r2, [pc, #132]	@ (8000bdc <SystemClock_Config+0xb4>)
 8000b56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b5a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b5c:	4b1f      	ldr	r3, [pc, #124]	@ (8000bdc <SystemClock_Config+0xb4>)
 8000b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b64:	60bb      	str	r3, [r7, #8]
 8000b66:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b68:	2300      	movs	r3, #0
 8000b6a:	607b      	str	r3, [r7, #4]
 8000b6c:	4b1c      	ldr	r3, [pc, #112]	@ (8000be0 <SystemClock_Config+0xb8>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a1b      	ldr	r2, [pc, #108]	@ (8000be0 <SystemClock_Config+0xb8>)
 8000b72:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b76:	6013      	str	r3, [r2, #0]
 8000b78:	4b19      	ldr	r3, [pc, #100]	@ (8000be0 <SystemClock_Config+0xb8>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b80:	607b      	str	r3, [r7, #4]
 8000b82:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b84:	2302      	movs	r3, #2
 8000b86:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b8c:	2310      	movs	r3, #16
 8000b8e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b90:	2300      	movs	r3, #0
 8000b92:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b94:	f107 0320 	add.w	r3, r7, #32
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f002 ffbf 	bl	8003b1c <HAL_RCC_OscConfig>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000ba4:	f000 f964 	bl	8000e70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ba8:	230f      	movs	r3, #15
 8000baa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bac:	2300      	movs	r3, #0
 8000bae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bbc:	f107 030c 	add.w	r3, r7, #12
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f003 fa22 	bl	800400c <HAL_RCC_ClockConfig>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000bce:	f000 f94f 	bl	8000e70 <Error_Handler>
  }
}
 8000bd2:	bf00      	nop
 8000bd4:	3750      	adds	r7, #80	@ 0x50
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40023800 	.word	0x40023800
 8000be0:	40007000 	.word	0x40007000

08000be4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000be8:	4b12      	ldr	r3, [pc, #72]	@ (8000c34 <MX_I2C1_Init+0x50>)
 8000bea:	4a13      	ldr	r2, [pc, #76]	@ (8000c38 <MX_I2C1_Init+0x54>)
 8000bec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000bee:	4b11      	ldr	r3, [pc, #68]	@ (8000c34 <MX_I2C1_Init+0x50>)
 8000bf0:	4a12      	ldr	r2, [pc, #72]	@ (8000c3c <MX_I2C1_Init+0x58>)
 8000bf2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000bf4:	4b0f      	ldr	r3, [pc, #60]	@ (8000c34 <MX_I2C1_Init+0x50>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000bfa:	4b0e      	ldr	r3, [pc, #56]	@ (8000c34 <MX_I2C1_Init+0x50>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c00:	4b0c      	ldr	r3, [pc, #48]	@ (8000c34 <MX_I2C1_Init+0x50>)
 8000c02:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c06:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c08:	4b0a      	ldr	r3, [pc, #40]	@ (8000c34 <MX_I2C1_Init+0x50>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c0e:	4b09      	ldr	r3, [pc, #36]	@ (8000c34 <MX_I2C1_Init+0x50>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c14:	4b07      	ldr	r3, [pc, #28]	@ (8000c34 <MX_I2C1_Init+0x50>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c1a:	4b06      	ldr	r3, [pc, #24]	@ (8000c34 <MX_I2C1_Init+0x50>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c20:	4804      	ldr	r0, [pc, #16]	@ (8000c34 <MX_I2C1_Init+0x50>)
 8000c22:	f000 fed1 	bl	80019c8 <HAL_I2C_Init>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c2c:	f000 f920 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c30:	bf00      	nop
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	20000078 	.word	0x20000078
 8000c38:	40005400 	.word	0x40005400
 8000c3c:	000186a0 	.word	0x000186a0

08000c40 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08a      	sub	sp, #40	@ 0x28
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c46:	f107 0320 	add.w	r3, r7, #32
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c50:	1d3b      	adds	r3, r7, #4
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	605a      	str	r2, [r3, #4]
 8000c58:	609a      	str	r2, [r3, #8]
 8000c5a:	60da      	str	r2, [r3, #12]
 8000c5c:	611a      	str	r2, [r3, #16]
 8000c5e:	615a      	str	r2, [r3, #20]
 8000c60:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c62:	4b22      	ldr	r3, [pc, #136]	@ (8000cec <MX_TIM2_Init+0xac>)
 8000c64:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c68:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 159;
 8000c6a:	4b20      	ldr	r3, [pc, #128]	@ (8000cec <MX_TIM2_Init+0xac>)
 8000c6c:	229f      	movs	r2, #159	@ 0x9f
 8000c6e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c70:	4b1e      	ldr	r3, [pc, #120]	@ (8000cec <MX_TIM2_Init+0xac>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	609a      	str	r2, [r3, #8]
  htim2.Init.Period =1999;
 8000c76:	4b1d      	ldr	r3, [pc, #116]	@ (8000cec <MX_TIM2_Init+0xac>)
 8000c78:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8000c7c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c7e:	4b1b      	ldr	r3, [pc, #108]	@ (8000cec <MX_TIM2_Init+0xac>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c84:	4b19      	ldr	r3, [pc, #100]	@ (8000cec <MX_TIM2_Init+0xac>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c8a:	4818      	ldr	r0, [pc, #96]	@ (8000cec <MX_TIM2_Init+0xac>)
 8000c8c:	f003 fd20 	bl	80046d0 <HAL_TIM_PWM_Init>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000c96:	f000 f8eb 	bl	8000e70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ca2:	f107 0320 	add.w	r3, r7, #32
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4810      	ldr	r0, [pc, #64]	@ (8000cec <MX_TIM2_Init+0xac>)
 8000caa:	f004 fbe1 	bl	8005470 <HAL_TIMEx_MasterConfigSynchronization>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000cb4:	f000 f8dc 	bl	8000e70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cb8:	2360      	movs	r3, #96	@ 0x60
 8000cba:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 150;
 8000cbc:	2396      	movs	r3, #150	@ 0x96
 8000cbe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cc8:	1d3b      	adds	r3, r7, #4
 8000cca:	2200      	movs	r2, #0
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4807      	ldr	r0, [pc, #28]	@ (8000cec <MX_TIM2_Init+0xac>)
 8000cd0:	f003 ff06 	bl	8004ae0 <HAL_TIM_PWM_ConfigChannel>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000cda:	f000 f8c9 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000cde:	4803      	ldr	r0, [pc, #12]	@ (8000cec <MX_TIM2_Init+0xac>)
 8000ce0:	f000 f998 	bl	8001014 <HAL_TIM_MspPostInit>

}
 8000ce4:	bf00      	nop
 8000ce6:	3728      	adds	r7, #40	@ 0x28
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	200000cc 	.word	0x200000cc

08000cf0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b086      	sub	sp, #24
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cf6:	f107 0308 	add.w	r3, r7, #8
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	605a      	str	r2, [r3, #4]
 8000d00:	609a      	str	r2, [r3, #8]
 8000d02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d04:	463b      	mov	r3, r7
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d0c:	4b1d      	ldr	r3, [pc, #116]	@ (8000d84 <MX_TIM3_Init+0x94>)
 8000d0e:	4a1e      	ldr	r2, [pc, #120]	@ (8000d88 <MX_TIM3_Init+0x98>)
 8000d10:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler =16000-1 ;
 8000d12:	4b1c      	ldr	r3, [pc, #112]	@ (8000d84 <MX_TIM3_Init+0x94>)
 8000d14:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8000d18:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d1a:	4b1a      	ldr	r3, [pc, #104]	@ (8000d84 <MX_TIM3_Init+0x94>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000d20:	4b18      	ldr	r3, [pc, #96]	@ (8000d84 <MX_TIM3_Init+0x94>)
 8000d22:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d26:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d28:	4b16      	ldr	r3, [pc, #88]	@ (8000d84 <MX_TIM3_Init+0x94>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d2e:	4b15      	ldr	r3, [pc, #84]	@ (8000d84 <MX_TIM3_Init+0x94>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d34:	4813      	ldr	r0, [pc, #76]	@ (8000d84 <MX_TIM3_Init+0x94>)
 8000d36:	f003 fb7b 	bl	8004430 <HAL_TIM_Base_Init>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000d40:	f000 f896 	bl	8000e70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d48:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d4a:	f107 0308 	add.w	r3, r7, #8
 8000d4e:	4619      	mov	r1, r3
 8000d50:	480c      	ldr	r0, [pc, #48]	@ (8000d84 <MX_TIM3_Init+0x94>)
 8000d52:	f003 ff87 	bl	8004c64 <HAL_TIM_ConfigClockSource>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000d5c:	f000 f888 	bl	8000e70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d60:	2300      	movs	r3, #0
 8000d62:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d64:	2300      	movs	r3, #0
 8000d66:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d68:	463b      	mov	r3, r7
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4805      	ldr	r0, [pc, #20]	@ (8000d84 <MX_TIM3_Init+0x94>)
 8000d6e:	f004 fb7f 	bl	8005470 <HAL_TIMEx_MasterConfigSynchronization>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000d78:	f000 f87a 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d7c:	bf00      	nop
 8000d7e:	3718      	adds	r7, #24
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	20000114 	.word	0x20000114
 8000d88:	40000400 	.word	0x40000400

08000d8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b088      	sub	sp, #32
 8000d90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d92:	f107 030c 	add.w	r3, r7, #12
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	605a      	str	r2, [r3, #4]
 8000d9c:	609a      	str	r2, [r3, #8]
 8000d9e:	60da      	str	r2, [r3, #12]
 8000da0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	60bb      	str	r3, [r7, #8]
 8000da6:	4b26      	ldr	r3, [pc, #152]	@ (8000e40 <MX_GPIO_Init+0xb4>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000daa:	4a25      	ldr	r2, [pc, #148]	@ (8000e40 <MX_GPIO_Init+0xb4>)
 8000dac:	f043 0301 	orr.w	r3, r3, #1
 8000db0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000db2:	4b23      	ldr	r3, [pc, #140]	@ (8000e40 <MX_GPIO_Init+0xb4>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db6:	f003 0301 	and.w	r3, r3, #1
 8000dba:	60bb      	str	r3, [r7, #8]
 8000dbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	607b      	str	r3, [r7, #4]
 8000dc2:	4b1f      	ldr	r3, [pc, #124]	@ (8000e40 <MX_GPIO_Init+0xb4>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc6:	4a1e      	ldr	r2, [pc, #120]	@ (8000e40 <MX_GPIO_Init+0xb4>)
 8000dc8:	f043 0308 	orr.w	r3, r3, #8
 8000dcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dce:	4b1c      	ldr	r3, [pc, #112]	@ (8000e40 <MX_GPIO_Init+0xb4>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd2:	f003 0308 	and.w	r3, r3, #8
 8000dd6:	607b      	str	r3, [r7, #4]
 8000dd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	603b      	str	r3, [r7, #0]
 8000dde:	4b18      	ldr	r3, [pc, #96]	@ (8000e40 <MX_GPIO_Init+0xb4>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de2:	4a17      	ldr	r2, [pc, #92]	@ (8000e40 <MX_GPIO_Init+0xb4>)
 8000de4:	f043 0302 	orr.w	r3, r3, #2
 8000de8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dea:	4b15      	ldr	r3, [pc, #84]	@ (8000e40 <MX_GPIO_Init+0xb4>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dee:	f003 0302 	and.w	r3, r3, #2
 8000df2:	603b      	str	r3, [r7, #0]
 8000df4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000df6:	2200      	movs	r2, #0
 8000df8:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8000dfc:	4811      	ldr	r0, [pc, #68]	@ (8000e44 <MX_GPIO_Init+0xb8>)
 8000dfe:	f000 fdaf 	bl	8001960 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000e02:	2370      	movs	r3, #112	@ 0x70
 8000e04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e06:	2300      	movs	r3, #0
 8000e08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0e:	f107 030c 	add.w	r3, r7, #12
 8000e12:	4619      	mov	r1, r3
 8000e14:	480c      	ldr	r0, [pc, #48]	@ (8000e48 <MX_GPIO_Init+0xbc>)
 8000e16:	f000 fbef 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000e1a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000e1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e20:	2301      	movs	r3, #1
 8000e22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e2c:	f107 030c 	add.w	r3, r7, #12
 8000e30:	4619      	mov	r1, r3
 8000e32:	4804      	ldr	r0, [pc, #16]	@ (8000e44 <MX_GPIO_Init+0xb8>)
 8000e34:	f000 fbe0 	bl	80015f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000e38:	bf00      	nop
 8000e3a:	3720      	adds	r7, #32
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	40023800 	.word	0x40023800
 8000e44:	40020c00 	.word	0x40020c00
 8000e48:	40020000 	.word	0x40020000

08000e4c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a04      	ldr	r2, [pc, #16]	@ (8000e6c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d101      	bne.n	8000e62 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000e5e:	f000 fa75 	bl	800134c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e62:	bf00      	nop
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	40010000 	.word	0x40010000

08000e70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e74:	b672      	cpsid	i
}
 8000e76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e78:	bf00      	nop
 8000e7a:	e7fd      	b.n	8000e78 <Error_Handler+0x8>

08000e7c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	607b      	str	r3, [r7, #4]
 8000e86:	4b13      	ldr	r3, [pc, #76]	@ (8000ed4 <HAL_MspInit+0x58>)
 8000e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e8a:	4a12      	ldr	r2, [pc, #72]	@ (8000ed4 <HAL_MspInit+0x58>)
 8000e8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e90:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e92:	4b10      	ldr	r3, [pc, #64]	@ (8000ed4 <HAL_MspInit+0x58>)
 8000e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e9a:	607b      	str	r3, [r7, #4]
 8000e9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	603b      	str	r3, [r7, #0]
 8000ea2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed4 <HAL_MspInit+0x58>)
 8000ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea6:	4a0b      	ldr	r2, [pc, #44]	@ (8000ed4 <HAL_MspInit+0x58>)
 8000ea8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000eac:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eae:	4b09      	ldr	r3, [pc, #36]	@ (8000ed4 <HAL_MspInit+0x58>)
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eb6:	603b      	str	r3, [r7, #0]
 8000eb8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	f000 fb40 	bl	8001544 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8000ec4:	2001      	movs	r0, #1
 8000ec6:	f000 fb59 	bl	800157c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40023800 	.word	0x40023800

08000ed8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08a      	sub	sp, #40	@ 0x28
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee0:	f107 0314 	add.w	r3, r7, #20
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a1d      	ldr	r2, [pc, #116]	@ (8000f6c <HAL_I2C_MspInit+0x94>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d133      	bne.n	8000f62 <HAL_I2C_MspInit+0x8a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	613b      	str	r3, [r7, #16]
 8000efe:	4b1c      	ldr	r3, [pc, #112]	@ (8000f70 <HAL_I2C_MspInit+0x98>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f02:	4a1b      	ldr	r2, [pc, #108]	@ (8000f70 <HAL_I2C_MspInit+0x98>)
 8000f04:	f043 0302 	orr.w	r3, r3, #2
 8000f08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f0a:	4b19      	ldr	r3, [pc, #100]	@ (8000f70 <HAL_I2C_MspInit+0x98>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0e:	f003 0302 	and.w	r3, r3, #2
 8000f12:	613b      	str	r3, [r7, #16]
 8000f14:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f16:	23c0      	movs	r3, #192	@ 0xc0
 8000f18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f1a:	2312      	movs	r3, #18
 8000f1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f22:	2303      	movs	r3, #3
 8000f24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f26:	2304      	movs	r3, #4
 8000f28:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f2a:	f107 0314 	add.w	r3, r7, #20
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4810      	ldr	r0, [pc, #64]	@ (8000f74 <HAL_I2C_MspInit+0x9c>)
 8000f32:	f000 fb61 	bl	80015f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8000f70 <HAL_I2C_MspInit+0x98>)
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f3e:	4a0c      	ldr	r2, [pc, #48]	@ (8000f70 <HAL_I2C_MspInit+0x98>)
 8000f40:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f44:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f46:	4b0a      	ldr	r3, [pc, #40]	@ (8000f70 <HAL_I2C_MspInit+0x98>)
 8000f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f4a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000f52:	2200      	movs	r2, #0
 8000f54:	2100      	movs	r1, #0
 8000f56:	201f      	movs	r0, #31
 8000f58:	f000 faf4 	bl	8001544 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000f5c:	201f      	movs	r0, #31
 8000f5e:	f000 fb0d 	bl	800157c <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000f62:	bf00      	nop
 8000f64:	3728      	adds	r7, #40	@ 0x28
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40005400 	.word	0x40005400
 8000f70:	40023800 	.word	0x40023800
 8000f74:	40020400 	.word	0x40020400

08000f78 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f88:	d115      	bne.n	8000fb6 <HAL_TIM_PWM_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60fb      	str	r3, [r7, #12]
 8000f8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc0 <HAL_TIM_PWM_MspInit+0x48>)
 8000f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f92:	4a0b      	ldr	r2, [pc, #44]	@ (8000fc0 <HAL_TIM_PWM_MspInit+0x48>)
 8000f94:	f043 0301 	orr.w	r3, r3, #1
 8000f98:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f9a:	4b09      	ldr	r3, [pc, #36]	@ (8000fc0 <HAL_TIM_PWM_MspInit+0x48>)
 8000f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2100      	movs	r1, #0
 8000faa:	201c      	movs	r0, #28
 8000fac:	f000 faca 	bl	8001544 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fb0:	201c      	movs	r0, #28
 8000fb2:	f000 fae3 	bl	800157c <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000fb6:	bf00      	nop
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40023800 	.word	0x40023800

08000fc4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a0e      	ldr	r2, [pc, #56]	@ (800100c <HAL_TIM_Base_MspInit+0x48>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d115      	bne.n	8001002 <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60fb      	str	r3, [r7, #12]
 8000fda:	4b0d      	ldr	r3, [pc, #52]	@ (8001010 <HAL_TIM_Base_MspInit+0x4c>)
 8000fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fde:	4a0c      	ldr	r2, [pc, #48]	@ (8001010 <HAL_TIM_Base_MspInit+0x4c>)
 8000fe0:	f043 0302 	orr.w	r3, r3, #2
 8000fe4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fe6:	4b0a      	ldr	r3, [pc, #40]	@ (8001010 <HAL_TIM_Base_MspInit+0x4c>)
 8000fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fea:	f003 0302 	and.w	r3, r3, #2
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	201d      	movs	r0, #29
 8000ff8:	f000 faa4 	bl	8001544 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000ffc:	201d      	movs	r0, #29
 8000ffe:	f000 fabd 	bl	800157c <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001002:	bf00      	nop
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40000400 	.word	0x40000400
 8001010:	40023800 	.word	0x40023800

08001014 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b088      	sub	sp, #32
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101c:	f107 030c 	add.w	r3, r7, #12
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]
 8001028:	60da      	str	r2, [r3, #12]
 800102a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001034:	d11d      	bne.n	8001072 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	60bb      	str	r3, [r7, #8]
 800103a:	4b10      	ldr	r3, [pc, #64]	@ (800107c <HAL_TIM_MspPostInit+0x68>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103e:	4a0f      	ldr	r2, [pc, #60]	@ (800107c <HAL_TIM_MspPostInit+0x68>)
 8001040:	f043 0301 	orr.w	r3, r3, #1
 8001044:	6313      	str	r3, [r2, #48]	@ 0x30
 8001046:	4b0d      	ldr	r3, [pc, #52]	@ (800107c <HAL_TIM_MspPostInit+0x68>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	60bb      	str	r3, [r7, #8]
 8001050:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001052:	2301      	movs	r3, #1
 8001054:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001056:	2302      	movs	r3, #2
 8001058:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105e:	2300      	movs	r3, #0
 8001060:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001062:	2301      	movs	r3, #1
 8001064:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001066:	f107 030c 	add.w	r3, r7, #12
 800106a:	4619      	mov	r1, r3
 800106c:	4804      	ldr	r0, [pc, #16]	@ (8001080 <HAL_TIM_MspPostInit+0x6c>)
 800106e:	f000 fac3 	bl	80015f8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001072:	bf00      	nop
 8001074:	3720      	adds	r7, #32
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40023800 	.word	0x40023800
 8001080:	40020000 	.word	0x40020000

08001084 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b08c      	sub	sp, #48	@ 0x30
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800108c:	2300      	movs	r3, #0
 800108e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001090:	2300      	movs	r3, #0
 8001092:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001094:	2300      	movs	r3, #0
 8001096:	60bb      	str	r3, [r7, #8]
 8001098:	4b2e      	ldr	r3, [pc, #184]	@ (8001154 <HAL_InitTick+0xd0>)
 800109a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800109c:	4a2d      	ldr	r2, [pc, #180]	@ (8001154 <HAL_InitTick+0xd0>)
 800109e:	f043 0301 	orr.w	r3, r3, #1
 80010a2:	6453      	str	r3, [r2, #68]	@ 0x44
 80010a4:	4b2b      	ldr	r3, [pc, #172]	@ (8001154 <HAL_InitTick+0xd0>)
 80010a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010a8:	f003 0301 	and.w	r3, r3, #1
 80010ac:	60bb      	str	r3, [r7, #8]
 80010ae:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80010b0:	f107 020c 	add.w	r2, r7, #12
 80010b4:	f107 0310 	add.w	r3, r7, #16
 80010b8:	4611      	mov	r1, r2
 80010ba:	4618      	mov	r0, r3
 80010bc:	f003 f986 	bl	80043cc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80010c0:	f003 f970 	bl	80043a4 <HAL_RCC_GetPCLK2Freq>
 80010c4:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80010c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010c8:	4a23      	ldr	r2, [pc, #140]	@ (8001158 <HAL_InitTick+0xd4>)
 80010ca:	fba2 2303 	umull	r2, r3, r2, r3
 80010ce:	0c9b      	lsrs	r3, r3, #18
 80010d0:	3b01      	subs	r3, #1
 80010d2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80010d4:	4b21      	ldr	r3, [pc, #132]	@ (800115c <HAL_InitTick+0xd8>)
 80010d6:	4a22      	ldr	r2, [pc, #136]	@ (8001160 <HAL_InitTick+0xdc>)
 80010d8:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80010da:	4b20      	ldr	r3, [pc, #128]	@ (800115c <HAL_InitTick+0xd8>)
 80010dc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80010e0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80010e2:	4a1e      	ldr	r2, [pc, #120]	@ (800115c <HAL_InitTick+0xd8>)
 80010e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010e6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80010e8:	4b1c      	ldr	r3, [pc, #112]	@ (800115c <HAL_InitTick+0xd8>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ee:	4b1b      	ldr	r3, [pc, #108]	@ (800115c <HAL_InitTick+0xd8>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010f4:	4b19      	ldr	r3, [pc, #100]	@ (800115c <HAL_InitTick+0xd8>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80010fa:	4818      	ldr	r0, [pc, #96]	@ (800115c <HAL_InitTick+0xd8>)
 80010fc:	f003 f998 	bl	8004430 <HAL_TIM_Base_Init>
 8001100:	4603      	mov	r3, r0
 8001102:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001106:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800110a:	2b00      	cmp	r3, #0
 800110c:	d11b      	bne.n	8001146 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800110e:	4813      	ldr	r0, [pc, #76]	@ (800115c <HAL_InitTick+0xd8>)
 8001110:	f003 fa6e 	bl	80045f0 <HAL_TIM_Base_Start_IT>
 8001114:	4603      	mov	r3, r0
 8001116:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800111a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800111e:	2b00      	cmp	r3, #0
 8001120:	d111      	bne.n	8001146 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001122:	2019      	movs	r0, #25
 8001124:	f000 fa2a 	bl	800157c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2b0f      	cmp	r3, #15
 800112c:	d808      	bhi.n	8001140 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800112e:	2200      	movs	r2, #0
 8001130:	6879      	ldr	r1, [r7, #4]
 8001132:	2019      	movs	r0, #25
 8001134:	f000 fa06 	bl	8001544 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001138:	4a0a      	ldr	r2, [pc, #40]	@ (8001164 <HAL_InitTick+0xe0>)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6013      	str	r3, [r2, #0]
 800113e:	e002      	b.n	8001146 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001140:	2301      	movs	r3, #1
 8001142:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001146:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800114a:	4618      	mov	r0, r3
 800114c:	3730      	adds	r7, #48	@ 0x30
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	40023800 	.word	0x40023800
 8001158:	431bde83 	.word	0x431bde83
 800115c:	20000178 	.word	0x20000178
 8001160:	40010000 	.word	0x40010000
 8001164:	20000004 	.word	0x20000004

08001168 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800116c:	bf00      	nop
 800116e:	e7fd      	b.n	800116c <NMI_Handler+0x4>

08001170 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001174:	bf00      	nop
 8001176:	e7fd      	b.n	8001174 <HardFault_Handler+0x4>

08001178 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800117c:	bf00      	nop
 800117e:	e7fd      	b.n	800117c <MemManage_Handler+0x4>

08001180 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001184:	bf00      	nop
 8001186:	e7fd      	b.n	8001184 <BusFault_Handler+0x4>

08001188 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800118c:	bf00      	nop
 800118e:	e7fd      	b.n	800118c <UsageFault_Handler+0x4>

08001190 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr

0800119e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800119e:	b480      	push	{r7}
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011a2:	bf00      	nop
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011b0:	bf00      	nop
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr

080011ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011ba:	b480      	push	{r7}
 80011bc:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 80011cc:	f002 fc8c 	bl	8003ae8 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 80011d0:	bf00      	nop
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80011d8:	4802      	ldr	r0, [pc, #8]	@ (80011e4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80011da:	f003 fb91 	bl	8004900 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20000178 	.word	0x20000178

080011e8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80011ec:	4802      	ldr	r0, [pc, #8]	@ (80011f8 <TIM2_IRQHandler+0x10>)
 80011ee:	f003 fb87 	bl	8004900 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	200000cc 	.word	0x200000cc

080011fc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001200:	4802      	ldr	r0, [pc, #8]	@ (800120c <TIM3_IRQHandler+0x10>)
 8001202:	f003 fb7d 	bl	8004900 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	20000114 	.word	0x20000114

08001210 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001214:	4802      	ldr	r0, [pc, #8]	@ (8001220 <I2C1_EV_IRQHandler+0x10>)
 8001216:	f000 fe2f 	bl	8001e78 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20000078 	.word	0x20000078

08001224 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800122c:	4a14      	ldr	r2, [pc, #80]	@ (8001280 <_sbrk+0x5c>)
 800122e:	4b15      	ldr	r3, [pc, #84]	@ (8001284 <_sbrk+0x60>)
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001238:	4b13      	ldr	r3, [pc, #76]	@ (8001288 <_sbrk+0x64>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d102      	bne.n	8001246 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001240:	4b11      	ldr	r3, [pc, #68]	@ (8001288 <_sbrk+0x64>)
 8001242:	4a12      	ldr	r2, [pc, #72]	@ (800128c <_sbrk+0x68>)
 8001244:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001246:	4b10      	ldr	r3, [pc, #64]	@ (8001288 <_sbrk+0x64>)
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4413      	add	r3, r2
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	429a      	cmp	r2, r3
 8001252:	d207      	bcs.n	8001264 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001254:	f004 f9c6 	bl	80055e4 <__errno>
 8001258:	4603      	mov	r3, r0
 800125a:	220c      	movs	r2, #12
 800125c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800125e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001262:	e009      	b.n	8001278 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001264:	4b08      	ldr	r3, [pc, #32]	@ (8001288 <_sbrk+0x64>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800126a:	4b07      	ldr	r3, [pc, #28]	@ (8001288 <_sbrk+0x64>)
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4413      	add	r3, r2
 8001272:	4a05      	ldr	r2, [pc, #20]	@ (8001288 <_sbrk+0x64>)
 8001274:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001276:	68fb      	ldr	r3, [r7, #12]
}
 8001278:	4618      	mov	r0, r3
 800127a:	3718      	adds	r7, #24
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20020000 	.word	0x20020000
 8001284:	00000400 	.word	0x00000400
 8001288:	200001c0 	.word	0x200001c0
 800128c:	20000310 	.word	0x20000310

08001290 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001294:	4b06      	ldr	r3, [pc, #24]	@ (80012b0 <SystemInit+0x20>)
 8001296:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800129a:	4a05      	ldr	r2, [pc, #20]	@ (80012b0 <SystemInit+0x20>)
 800129c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012a4:	bf00      	nop
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	e000ed00 	.word	0xe000ed00

080012b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80012b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012ec <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80012b8:	f7ff ffea 	bl	8001290 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012bc:	480c      	ldr	r0, [pc, #48]	@ (80012f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012be:	490d      	ldr	r1, [pc, #52]	@ (80012f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012c0:	4a0d      	ldr	r2, [pc, #52]	@ (80012f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012c4:	e002      	b.n	80012cc <LoopCopyDataInit>

080012c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ca:	3304      	adds	r3, #4

080012cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012d0:	d3f9      	bcc.n	80012c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012d2:	4a0a      	ldr	r2, [pc, #40]	@ (80012fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012d4:	4c0a      	ldr	r4, [pc, #40]	@ (8001300 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012d8:	e001      	b.n	80012de <LoopFillZerobss>

080012da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012dc:	3204      	adds	r2, #4

080012de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012e0:	d3fb      	bcc.n	80012da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012e2:	f004 f985 	bl	80055f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012e6:	f7ff fa27 	bl	8000738 <main>
  bx  lr    
 80012ea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80012ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012f4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80012f8:	08005fe8 	.word	0x08005fe8
  ldr r2, =_sbss
 80012fc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001300:	20000310 	.word	0x20000310

08001304 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001304:	e7fe      	b.n	8001304 <ADC_IRQHandler>
	...

08001308 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800130c:	4b0e      	ldr	r3, [pc, #56]	@ (8001348 <HAL_Init+0x40>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a0d      	ldr	r2, [pc, #52]	@ (8001348 <HAL_Init+0x40>)
 8001312:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001316:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001318:	4b0b      	ldr	r3, [pc, #44]	@ (8001348 <HAL_Init+0x40>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a0a      	ldr	r2, [pc, #40]	@ (8001348 <HAL_Init+0x40>)
 800131e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001322:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001324:	4b08      	ldr	r3, [pc, #32]	@ (8001348 <HAL_Init+0x40>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a07      	ldr	r2, [pc, #28]	@ (8001348 <HAL_Init+0x40>)
 800132a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800132e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001330:	2003      	movs	r0, #3
 8001332:	f000 f8fc 	bl	800152e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001336:	200f      	movs	r0, #15
 8001338:	f7ff fea4 	bl	8001084 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800133c:	f7ff fd9e 	bl	8000e7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001340:	2300      	movs	r3, #0
}
 8001342:	4618      	mov	r0, r3
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40023c00 	.word	0x40023c00

0800134c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001350:	4b06      	ldr	r3, [pc, #24]	@ (800136c <HAL_IncTick+0x20>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	461a      	mov	r2, r3
 8001356:	4b06      	ldr	r3, [pc, #24]	@ (8001370 <HAL_IncTick+0x24>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4413      	add	r3, r2
 800135c:	4a04      	ldr	r2, [pc, #16]	@ (8001370 <HAL_IncTick+0x24>)
 800135e:	6013      	str	r3, [r2, #0]
}
 8001360:	bf00      	nop
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	20000008 	.word	0x20000008
 8001370:	200001c4 	.word	0x200001c4

08001374 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  return uwTick;
 8001378:	4b03      	ldr	r3, [pc, #12]	@ (8001388 <HAL_GetTick+0x14>)
 800137a:	681b      	ldr	r3, [r3, #0]
}
 800137c:	4618      	mov	r0, r3
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	200001c4 	.word	0x200001c4

0800138c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001394:	f7ff ffee 	bl	8001374 <HAL_GetTick>
 8001398:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80013a4:	d005      	beq.n	80013b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013a6:	4b0a      	ldr	r3, [pc, #40]	@ (80013d0 <HAL_Delay+0x44>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	461a      	mov	r2, r3
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	4413      	add	r3, r2
 80013b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013b2:	bf00      	nop
 80013b4:	f7ff ffde 	bl	8001374 <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	68fa      	ldr	r2, [r7, #12]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d8f7      	bhi.n	80013b4 <HAL_Delay+0x28>
  {
  }
}
 80013c4:	bf00      	nop
 80013c6:	bf00      	nop
 80013c8:	3710      	adds	r7, #16
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20000008 	.word	0x20000008

080013d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f003 0307 	and.w	r3, r3, #7
 80013e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001418 <__NVIC_SetPriorityGrouping+0x44>)
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ea:	68ba      	ldr	r2, [r7, #8]
 80013ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013f0:	4013      	ands	r3, r2
 80013f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001400:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001404:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001406:	4a04      	ldr	r2, [pc, #16]	@ (8001418 <__NVIC_SetPriorityGrouping+0x44>)
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	60d3      	str	r3, [r2, #12]
}
 800140c:	bf00      	nop
 800140e:	3714      	adds	r7, #20
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr
 8001418:	e000ed00 	.word	0xe000ed00

0800141c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001420:	4b04      	ldr	r3, [pc, #16]	@ (8001434 <__NVIC_GetPriorityGrouping+0x18>)
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	0a1b      	lsrs	r3, r3, #8
 8001426:	f003 0307 	and.w	r3, r3, #7
}
 800142a:	4618      	mov	r0, r3
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr
 8001434:	e000ed00 	.word	0xe000ed00

08001438 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001446:	2b00      	cmp	r3, #0
 8001448:	db0b      	blt.n	8001462 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800144a:	79fb      	ldrb	r3, [r7, #7]
 800144c:	f003 021f 	and.w	r2, r3, #31
 8001450:	4907      	ldr	r1, [pc, #28]	@ (8001470 <__NVIC_EnableIRQ+0x38>)
 8001452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001456:	095b      	lsrs	r3, r3, #5
 8001458:	2001      	movs	r0, #1
 800145a:	fa00 f202 	lsl.w	r2, r0, r2
 800145e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001462:	bf00      	nop
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	e000e100 	.word	0xe000e100

08001474 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	6039      	str	r1, [r7, #0]
 800147e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001480:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001484:	2b00      	cmp	r3, #0
 8001486:	db0a      	blt.n	800149e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	b2da      	uxtb	r2, r3
 800148c:	490c      	ldr	r1, [pc, #48]	@ (80014c0 <__NVIC_SetPriority+0x4c>)
 800148e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001492:	0112      	lsls	r2, r2, #4
 8001494:	b2d2      	uxtb	r2, r2
 8001496:	440b      	add	r3, r1
 8001498:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800149c:	e00a      	b.n	80014b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	b2da      	uxtb	r2, r3
 80014a2:	4908      	ldr	r1, [pc, #32]	@ (80014c4 <__NVIC_SetPriority+0x50>)
 80014a4:	79fb      	ldrb	r3, [r7, #7]
 80014a6:	f003 030f 	and.w	r3, r3, #15
 80014aa:	3b04      	subs	r3, #4
 80014ac:	0112      	lsls	r2, r2, #4
 80014ae:	b2d2      	uxtb	r2, r2
 80014b0:	440b      	add	r3, r1
 80014b2:	761a      	strb	r2, [r3, #24]
}
 80014b4:	bf00      	nop
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	e000e100 	.word	0xe000e100
 80014c4:	e000ed00 	.word	0xe000ed00

080014c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b089      	sub	sp, #36	@ 0x24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	60f8      	str	r0, [r7, #12]
 80014d0:	60b9      	str	r1, [r7, #8]
 80014d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	f003 0307 	and.w	r3, r3, #7
 80014da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	f1c3 0307 	rsb	r3, r3, #7
 80014e2:	2b04      	cmp	r3, #4
 80014e4:	bf28      	it	cs
 80014e6:	2304      	movcs	r3, #4
 80014e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	3304      	adds	r3, #4
 80014ee:	2b06      	cmp	r3, #6
 80014f0:	d902      	bls.n	80014f8 <NVIC_EncodePriority+0x30>
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	3b03      	subs	r3, #3
 80014f6:	e000      	b.n	80014fa <NVIC_EncodePriority+0x32>
 80014f8:	2300      	movs	r3, #0
 80014fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	fa02 f303 	lsl.w	r3, r2, r3
 8001506:	43da      	mvns	r2, r3
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	401a      	ands	r2, r3
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001510:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	fa01 f303 	lsl.w	r3, r1, r3
 800151a:	43d9      	mvns	r1, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001520:	4313      	orrs	r3, r2
         );
}
 8001522:	4618      	mov	r0, r3
 8001524:	3724      	adds	r7, #36	@ 0x24
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr

0800152e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	b082      	sub	sp, #8
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f7ff ff4c 	bl	80013d4 <__NVIC_SetPriorityGrouping>
}
 800153c:	bf00      	nop
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001544:	b580      	push	{r7, lr}
 8001546:	b086      	sub	sp, #24
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	60b9      	str	r1, [r7, #8]
 800154e:	607a      	str	r2, [r7, #4]
 8001550:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001552:	2300      	movs	r3, #0
 8001554:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001556:	f7ff ff61 	bl	800141c <__NVIC_GetPriorityGrouping>
 800155a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800155c:	687a      	ldr	r2, [r7, #4]
 800155e:	68b9      	ldr	r1, [r7, #8]
 8001560:	6978      	ldr	r0, [r7, #20]
 8001562:	f7ff ffb1 	bl	80014c8 <NVIC_EncodePriority>
 8001566:	4602      	mov	r2, r0
 8001568:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800156c:	4611      	mov	r1, r2
 800156e:	4618      	mov	r0, r3
 8001570:	f7ff ff80 	bl	8001474 <__NVIC_SetPriority>
}
 8001574:	bf00      	nop
 8001576:	3718      	adds	r7, #24
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}

0800157c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff ff54 	bl	8001438 <__NVIC_EnableIRQ>
}
 8001590:	bf00      	nop
 8001592:	3708      	adds	r7, #8
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d004      	beq.n	80015b6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2280      	movs	r2, #128	@ 0x80
 80015b0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e00c      	b.n	80015d0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2205      	movs	r2, #5
 80015ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f022 0201 	bic.w	r2, r2, #1
 80015cc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80015ce:	2300      	movs	r3, #0
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80015ea:	b2db      	uxtb	r3, r3
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b089      	sub	sp, #36	@ 0x24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001602:	2300      	movs	r3, #0
 8001604:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001606:	2300      	movs	r3, #0
 8001608:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800160a:	2300      	movs	r3, #0
 800160c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800160e:	2300      	movs	r3, #0
 8001610:	61fb      	str	r3, [r7, #28]
 8001612:	e16b      	b.n	80018ec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001614:	2201      	movs	r2, #1
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	697a      	ldr	r2, [r7, #20]
 8001624:	4013      	ands	r3, r2
 8001626:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001628:	693a      	ldr	r2, [r7, #16]
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	429a      	cmp	r2, r3
 800162e:	f040 815a 	bne.w	80018e6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f003 0303 	and.w	r3, r3, #3
 800163a:	2b01      	cmp	r3, #1
 800163c:	d005      	beq.n	800164a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001646:	2b02      	cmp	r3, #2
 8001648:	d130      	bne.n	80016ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	2203      	movs	r2, #3
 8001656:	fa02 f303 	lsl.w	r3, r2, r3
 800165a:	43db      	mvns	r3, r3
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	4013      	ands	r3, r2
 8001660:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	68da      	ldr	r2, [r3, #12]
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	4313      	orrs	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001680:	2201      	movs	r2, #1
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	43db      	mvns	r3, r3
 800168a:	69ba      	ldr	r2, [r7, #24]
 800168c:	4013      	ands	r3, r2
 800168e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	091b      	lsrs	r3, r3, #4
 8001696:	f003 0201 	and.w	r2, r3, #1
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f003 0303 	and.w	r3, r3, #3
 80016b4:	2b03      	cmp	r3, #3
 80016b6:	d017      	beq.n	80016e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	2203      	movs	r2, #3
 80016c4:	fa02 f303 	lsl.w	r3, r2, r3
 80016c8:	43db      	mvns	r3, r3
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	4013      	ands	r3, r2
 80016ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	689a      	ldr	r2, [r3, #8]
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	fa02 f303 	lsl.w	r3, r2, r3
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	4313      	orrs	r3, r2
 80016e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f003 0303 	and.w	r3, r3, #3
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d123      	bne.n	800173c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	08da      	lsrs	r2, r3, #3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	3208      	adds	r2, #8
 80016fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001700:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	f003 0307 	and.w	r3, r3, #7
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	220f      	movs	r2, #15
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	43db      	mvns	r3, r3
 8001712:	69ba      	ldr	r2, [r7, #24]
 8001714:	4013      	ands	r3, r2
 8001716:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	691a      	ldr	r2, [r3, #16]
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	f003 0307 	and.w	r3, r3, #7
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	4313      	orrs	r3, r2
 800172c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	08da      	lsrs	r2, r3, #3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	3208      	adds	r2, #8
 8001736:	69b9      	ldr	r1, [r7, #24]
 8001738:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	2203      	movs	r2, #3
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	43db      	mvns	r3, r3
 800174e:	69ba      	ldr	r2, [r7, #24]
 8001750:	4013      	ands	r3, r2
 8001752:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f003 0203 	and.w	r2, r3, #3
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	4313      	orrs	r3, r2
 8001768:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001778:	2b00      	cmp	r3, #0
 800177a:	f000 80b4 	beq.w	80018e6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	60fb      	str	r3, [r7, #12]
 8001782:	4b60      	ldr	r3, [pc, #384]	@ (8001904 <HAL_GPIO_Init+0x30c>)
 8001784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001786:	4a5f      	ldr	r2, [pc, #380]	@ (8001904 <HAL_GPIO_Init+0x30c>)
 8001788:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800178c:	6453      	str	r3, [r2, #68]	@ 0x44
 800178e:	4b5d      	ldr	r3, [pc, #372]	@ (8001904 <HAL_GPIO_Init+0x30c>)
 8001790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001792:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800179a:	4a5b      	ldr	r2, [pc, #364]	@ (8001908 <HAL_GPIO_Init+0x310>)
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	089b      	lsrs	r3, r3, #2
 80017a0:	3302      	adds	r3, #2
 80017a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	f003 0303 	and.w	r3, r3, #3
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	220f      	movs	r2, #15
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	43db      	mvns	r3, r3
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	4013      	ands	r3, r2
 80017bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a52      	ldr	r2, [pc, #328]	@ (800190c <HAL_GPIO_Init+0x314>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d02b      	beq.n	800181e <HAL_GPIO_Init+0x226>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a51      	ldr	r2, [pc, #324]	@ (8001910 <HAL_GPIO_Init+0x318>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d025      	beq.n	800181a <HAL_GPIO_Init+0x222>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a50      	ldr	r2, [pc, #320]	@ (8001914 <HAL_GPIO_Init+0x31c>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d01f      	beq.n	8001816 <HAL_GPIO_Init+0x21e>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a4f      	ldr	r2, [pc, #316]	@ (8001918 <HAL_GPIO_Init+0x320>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d019      	beq.n	8001812 <HAL_GPIO_Init+0x21a>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a4e      	ldr	r2, [pc, #312]	@ (800191c <HAL_GPIO_Init+0x324>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d013      	beq.n	800180e <HAL_GPIO_Init+0x216>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a4d      	ldr	r2, [pc, #308]	@ (8001920 <HAL_GPIO_Init+0x328>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d00d      	beq.n	800180a <HAL_GPIO_Init+0x212>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4a4c      	ldr	r2, [pc, #304]	@ (8001924 <HAL_GPIO_Init+0x32c>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d007      	beq.n	8001806 <HAL_GPIO_Init+0x20e>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a4b      	ldr	r2, [pc, #300]	@ (8001928 <HAL_GPIO_Init+0x330>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d101      	bne.n	8001802 <HAL_GPIO_Init+0x20a>
 80017fe:	2307      	movs	r3, #7
 8001800:	e00e      	b.n	8001820 <HAL_GPIO_Init+0x228>
 8001802:	2308      	movs	r3, #8
 8001804:	e00c      	b.n	8001820 <HAL_GPIO_Init+0x228>
 8001806:	2306      	movs	r3, #6
 8001808:	e00a      	b.n	8001820 <HAL_GPIO_Init+0x228>
 800180a:	2305      	movs	r3, #5
 800180c:	e008      	b.n	8001820 <HAL_GPIO_Init+0x228>
 800180e:	2304      	movs	r3, #4
 8001810:	e006      	b.n	8001820 <HAL_GPIO_Init+0x228>
 8001812:	2303      	movs	r3, #3
 8001814:	e004      	b.n	8001820 <HAL_GPIO_Init+0x228>
 8001816:	2302      	movs	r3, #2
 8001818:	e002      	b.n	8001820 <HAL_GPIO_Init+0x228>
 800181a:	2301      	movs	r3, #1
 800181c:	e000      	b.n	8001820 <HAL_GPIO_Init+0x228>
 800181e:	2300      	movs	r3, #0
 8001820:	69fa      	ldr	r2, [r7, #28]
 8001822:	f002 0203 	and.w	r2, r2, #3
 8001826:	0092      	lsls	r2, r2, #2
 8001828:	4093      	lsls	r3, r2
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	4313      	orrs	r3, r2
 800182e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001830:	4935      	ldr	r1, [pc, #212]	@ (8001908 <HAL_GPIO_Init+0x310>)
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	089b      	lsrs	r3, r3, #2
 8001836:	3302      	adds	r3, #2
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800183e:	4b3b      	ldr	r3, [pc, #236]	@ (800192c <HAL_GPIO_Init+0x334>)
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	43db      	mvns	r3, r3
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	4013      	ands	r3, r2
 800184c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d003      	beq.n	8001862 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800185a:	69ba      	ldr	r2, [r7, #24]
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	4313      	orrs	r3, r2
 8001860:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001862:	4a32      	ldr	r2, [pc, #200]	@ (800192c <HAL_GPIO_Init+0x334>)
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001868:	4b30      	ldr	r3, [pc, #192]	@ (800192c <HAL_GPIO_Init+0x334>)
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	43db      	mvns	r3, r3
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	4013      	ands	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d003      	beq.n	800188c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	4313      	orrs	r3, r2
 800188a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800188c:	4a27      	ldr	r2, [pc, #156]	@ (800192c <HAL_GPIO_Init+0x334>)
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001892:	4b26      	ldr	r3, [pc, #152]	@ (800192c <HAL_GPIO_Init+0x334>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	43db      	mvns	r3, r3
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	4013      	ands	r3, r2
 80018a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d003      	beq.n	80018b6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80018ae:	69ba      	ldr	r2, [r7, #24]
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018b6:	4a1d      	ldr	r2, [pc, #116]	@ (800192c <HAL_GPIO_Init+0x334>)
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018bc:	4b1b      	ldr	r3, [pc, #108]	@ (800192c <HAL_GPIO_Init+0x334>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	43db      	mvns	r3, r3
 80018c6:	69ba      	ldr	r2, [r7, #24]
 80018c8:	4013      	ands	r3, r2
 80018ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d003      	beq.n	80018e0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	4313      	orrs	r3, r2
 80018de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018e0:	4a12      	ldr	r2, [pc, #72]	@ (800192c <HAL_GPIO_Init+0x334>)
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	3301      	adds	r3, #1
 80018ea:	61fb      	str	r3, [r7, #28]
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	2b0f      	cmp	r3, #15
 80018f0:	f67f ae90 	bls.w	8001614 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018f4:	bf00      	nop
 80018f6:	bf00      	nop
 80018f8:	3724      	adds	r7, #36	@ 0x24
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	40023800 	.word	0x40023800
 8001908:	40013800 	.word	0x40013800
 800190c:	40020000 	.word	0x40020000
 8001910:	40020400 	.word	0x40020400
 8001914:	40020800 	.word	0x40020800
 8001918:	40020c00 	.word	0x40020c00
 800191c:	40021000 	.word	0x40021000
 8001920:	40021400 	.word	0x40021400
 8001924:	40021800 	.word	0x40021800
 8001928:	40021c00 	.word	0x40021c00
 800192c:	40013c00 	.word	0x40013c00

08001930 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	460b      	mov	r3, r1
 800193a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	691a      	ldr	r2, [r3, #16]
 8001940:	887b      	ldrh	r3, [r7, #2]
 8001942:	4013      	ands	r3, r2
 8001944:	2b00      	cmp	r3, #0
 8001946:	d002      	beq.n	800194e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001948:	2301      	movs	r3, #1
 800194a:	73fb      	strb	r3, [r7, #15]
 800194c:	e001      	b.n	8001952 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800194e:	2300      	movs	r3, #0
 8001950:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001952:	7bfb      	ldrb	r3, [r7, #15]
}
 8001954:	4618      	mov	r0, r3
 8001956:	3714      	adds	r7, #20
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	460b      	mov	r3, r1
 800196a:	807b      	strh	r3, [r7, #2]
 800196c:	4613      	mov	r3, r2
 800196e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001970:	787b      	ldrb	r3, [r7, #1]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d003      	beq.n	800197e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001976:	887a      	ldrh	r2, [r7, #2]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800197c:	e003      	b.n	8001986 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800197e:	887b      	ldrh	r3, [r7, #2]
 8001980:	041a      	lsls	r2, r3, #16
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	619a      	str	r2, [r3, #24]
}
 8001986:	bf00      	nop
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr

08001992 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001992:	b480      	push	{r7}
 8001994:	b085      	sub	sp, #20
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
 800199a:	460b      	mov	r3, r1
 800199c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	695b      	ldr	r3, [r3, #20]
 80019a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019a4:	887a      	ldrh	r2, [r7, #2]
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	4013      	ands	r3, r2
 80019aa:	041a      	lsls	r2, r3, #16
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	43d9      	mvns	r1, r3
 80019b0:	887b      	ldrh	r3, [r7, #2]
 80019b2:	400b      	ands	r3, r1
 80019b4:	431a      	orrs	r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	619a      	str	r2, [r3, #24]
}
 80019ba:	bf00      	nop
 80019bc:	3714      	adds	r7, #20
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
	...

080019c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d101      	bne.n	80019da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e12b      	b.n	8001c32 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d106      	bne.n	80019f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f7ff fa72 	bl	8000ed8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2224      	movs	r2, #36	@ 0x24
 80019f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f022 0201 	bic.w	r2, r2, #1
 8001a0a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001a1a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001a2a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a2c:	f002 fca6 	bl	800437c <HAL_RCC_GetPCLK1Freq>
 8001a30:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	4a81      	ldr	r2, [pc, #516]	@ (8001c3c <HAL_I2C_Init+0x274>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d807      	bhi.n	8001a4c <HAL_I2C_Init+0x84>
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	4a80      	ldr	r2, [pc, #512]	@ (8001c40 <HAL_I2C_Init+0x278>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	bf94      	ite	ls
 8001a44:	2301      	movls	r3, #1
 8001a46:	2300      	movhi	r3, #0
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	e006      	b.n	8001a5a <HAL_I2C_Init+0x92>
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	4a7d      	ldr	r2, [pc, #500]	@ (8001c44 <HAL_I2C_Init+0x27c>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	bf94      	ite	ls
 8001a54:	2301      	movls	r3, #1
 8001a56:	2300      	movhi	r3, #0
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e0e7      	b.n	8001c32 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	4a78      	ldr	r2, [pc, #480]	@ (8001c48 <HAL_I2C_Init+0x280>)
 8001a66:	fba2 2303 	umull	r2, r3, r2, r3
 8001a6a:	0c9b      	lsrs	r3, r3, #18
 8001a6c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	68ba      	ldr	r2, [r7, #8]
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	6a1b      	ldr	r3, [r3, #32]
 8001a88:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	4a6a      	ldr	r2, [pc, #424]	@ (8001c3c <HAL_I2C_Init+0x274>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d802      	bhi.n	8001a9c <HAL_I2C_Init+0xd4>
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	e009      	b.n	8001ab0 <HAL_I2C_Init+0xe8>
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001aa2:	fb02 f303 	mul.w	r3, r2, r3
 8001aa6:	4a69      	ldr	r2, [pc, #420]	@ (8001c4c <HAL_I2C_Init+0x284>)
 8001aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8001aac:	099b      	lsrs	r3, r3, #6
 8001aae:	3301      	adds	r3, #1
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	6812      	ldr	r2, [r2, #0]
 8001ab4:	430b      	orrs	r3, r1
 8001ab6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	69db      	ldr	r3, [r3, #28]
 8001abe:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001ac2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	495c      	ldr	r1, [pc, #368]	@ (8001c3c <HAL_I2C_Init+0x274>)
 8001acc:	428b      	cmp	r3, r1
 8001ace:	d819      	bhi.n	8001b04 <HAL_I2C_Init+0x13c>
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	1e59      	subs	r1, r3, #1
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ade:	1c59      	adds	r1, r3, #1
 8001ae0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001ae4:	400b      	ands	r3, r1
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d00a      	beq.n	8001b00 <HAL_I2C_Init+0x138>
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	1e59      	subs	r1, r3, #1
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001af8:	3301      	adds	r3, #1
 8001afa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001afe:	e051      	b.n	8001ba4 <HAL_I2C_Init+0x1dc>
 8001b00:	2304      	movs	r3, #4
 8001b02:	e04f      	b.n	8001ba4 <HAL_I2C_Init+0x1dc>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d111      	bne.n	8001b30 <HAL_I2C_Init+0x168>
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	1e58      	subs	r0, r3, #1
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6859      	ldr	r1, [r3, #4]
 8001b14:	460b      	mov	r3, r1
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	440b      	add	r3, r1
 8001b1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b1e:	3301      	adds	r3, #1
 8001b20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	bf0c      	ite	eq
 8001b28:	2301      	moveq	r3, #1
 8001b2a:	2300      	movne	r3, #0
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	e012      	b.n	8001b56 <HAL_I2C_Init+0x18e>
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	1e58      	subs	r0, r3, #1
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6859      	ldr	r1, [r3, #4]
 8001b38:	460b      	mov	r3, r1
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	440b      	add	r3, r1
 8001b3e:	0099      	lsls	r1, r3, #2
 8001b40:	440b      	add	r3, r1
 8001b42:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b46:	3301      	adds	r3, #1
 8001b48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	bf0c      	ite	eq
 8001b50:	2301      	moveq	r3, #1
 8001b52:	2300      	movne	r3, #0
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <HAL_I2C_Init+0x196>
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e022      	b.n	8001ba4 <HAL_I2C_Init+0x1dc>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d10e      	bne.n	8001b84 <HAL_I2C_Init+0x1bc>
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	1e58      	subs	r0, r3, #1
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6859      	ldr	r1, [r3, #4]
 8001b6e:	460b      	mov	r3, r1
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	440b      	add	r3, r1
 8001b74:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b78:	3301      	adds	r3, #1
 8001b7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b82:	e00f      	b.n	8001ba4 <HAL_I2C_Init+0x1dc>
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	1e58      	subs	r0, r3, #1
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6859      	ldr	r1, [r3, #4]
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	440b      	add	r3, r1
 8001b92:	0099      	lsls	r1, r3, #2
 8001b94:	440b      	add	r3, r1
 8001b96:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ba0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001ba4:	6879      	ldr	r1, [r7, #4]
 8001ba6:	6809      	ldr	r1, [r1, #0]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	69da      	ldr	r2, [r3, #28]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a1b      	ldr	r3, [r3, #32]
 8001bbe:	431a      	orrs	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001bd2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	6911      	ldr	r1, [r2, #16]
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	68d2      	ldr	r2, [r2, #12]
 8001bde:	4311      	orrs	r1, r2
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	6812      	ldr	r2, [r2, #0]
 8001be4:	430b      	orrs	r3, r1
 8001be6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	695a      	ldr	r2, [r3, #20]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	699b      	ldr	r3, [r3, #24]
 8001bfa:	431a      	orrs	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	430a      	orrs	r2, r1
 8001c02:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f042 0201 	orr.w	r2, r2, #1
 8001c12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2200      	movs	r2, #0
 8001c18:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2220      	movs	r2, #32
 8001c1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2200      	movs	r2, #0
 8001c26:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3710      	adds	r7, #16
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	000186a0 	.word	0x000186a0
 8001c40:	001e847f 	.word	0x001e847f
 8001c44:	003d08ff 	.word	0x003d08ff
 8001c48:	431bde83 	.word	0x431bde83
 8001c4c:	10624dd3 	.word	0x10624dd3

08001c50 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	695b      	ldr	r3, [r3, #20]
 8001c5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c62:	2b80      	cmp	r3, #128	@ 0x80
 8001c64:	d103      	bne.n	8001c6e <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	611a      	str	r2, [r3, #16]
  }
}
 8001c6e:	bf00      	nop
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
	...

08001c7c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b088      	sub	sp, #32
 8001c80:	af02      	add	r7, sp, #8
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	607a      	str	r2, [r7, #4]
 8001c86:	461a      	mov	r2, r3
 8001c88:	460b      	mov	r3, r1
 8001c8a:	817b      	strh	r3, [r7, #10]
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c90:	f7ff fb70 	bl	8001374 <HAL_GetTick>
 8001c94:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b20      	cmp	r3, #32
 8001ca0:	f040 80e0 	bne.w	8001e64 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	9300      	str	r3, [sp, #0]
 8001ca8:	2319      	movs	r3, #25
 8001caa:	2201      	movs	r2, #1
 8001cac:	4970      	ldr	r1, [pc, #448]	@ (8001e70 <HAL_I2C_Master_Transmit+0x1f4>)
 8001cae:	68f8      	ldr	r0, [r7, #12]
 8001cb0:	f001 fcf4 	bl	800369c <I2C_WaitOnFlagUntilTimeout>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	e0d3      	b.n	8001e66 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d101      	bne.n	8001ccc <HAL_I2C_Master_Transmit+0x50>
 8001cc8:	2302      	movs	r3, #2
 8001cca:	e0cc      	b.n	8001e66 <HAL_I2C_Master_Transmit+0x1ea>
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d007      	beq.n	8001cf2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f042 0201 	orr.w	r2, r2, #1
 8001cf0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d00:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2221      	movs	r2, #33	@ 0x21
 8001d06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2210      	movs	r2, #16
 8001d0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2200      	movs	r2, #0
 8001d16:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	893a      	ldrh	r2, [r7, #8]
 8001d22:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d28:	b29a      	uxth	r2, r3
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	4a50      	ldr	r2, [pc, #320]	@ (8001e74 <HAL_I2C_Master_Transmit+0x1f8>)
 8001d32:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001d34:	8979      	ldrh	r1, [r7, #10]
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	6a3a      	ldr	r2, [r7, #32]
 8001d3a:	68f8      	ldr	r0, [r7, #12]
 8001d3c:	f001 fb84 	bl	8003448 <I2C_MasterRequestWrite>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e08d      	b.n	8001e66 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	613b      	str	r3, [r7, #16]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	695b      	ldr	r3, [r3, #20]
 8001d54:	613b      	str	r3, [r7, #16]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	699b      	ldr	r3, [r3, #24]
 8001d5c:	613b      	str	r3, [r7, #16]
 8001d5e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001d60:	e066      	b.n	8001e30 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d62:	697a      	ldr	r2, [r7, #20]
 8001d64:	6a39      	ldr	r1, [r7, #32]
 8001d66:	68f8      	ldr	r0, [r7, #12]
 8001d68:	f001 fdb2 	bl	80038d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d00d      	beq.n	8001d8e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d76:	2b04      	cmp	r3, #4
 8001d78:	d107      	bne.n	8001d8a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d88:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e06b      	b.n	8001e66 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d92:	781a      	ldrb	r2, [r3, #0]
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d9e:	1c5a      	adds	r2, r3, #1
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	3b01      	subs	r3, #1
 8001dac:	b29a      	uxth	r2, r3
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001db6:	3b01      	subs	r3, #1
 8001db8:	b29a      	uxth	r2, r3
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	695b      	ldr	r3, [r3, #20]
 8001dc4:	f003 0304 	and.w	r3, r3, #4
 8001dc8:	2b04      	cmp	r3, #4
 8001dca:	d11b      	bne.n	8001e04 <HAL_I2C_Master_Transmit+0x188>
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d017      	beq.n	8001e04 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dd8:	781a      	ldrb	r2, [r3, #0]
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001de4:	1c5a      	adds	r2, r3, #1
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	3b01      	subs	r3, #1
 8001df2:	b29a      	uxth	r2, r3
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dfc:	3b01      	subs	r3, #1
 8001dfe:	b29a      	uxth	r2, r3
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e04:	697a      	ldr	r2, [r7, #20]
 8001e06:	6a39      	ldr	r1, [r7, #32]
 8001e08:	68f8      	ldr	r0, [r7, #12]
 8001e0a:	f001 fda9 	bl	8003960 <I2C_WaitOnBTFFlagUntilTimeout>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d00d      	beq.n	8001e30 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e18:	2b04      	cmp	r3, #4
 8001e1a:	d107      	bne.n	8001e2c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e2a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e01a      	b.n	8001e66 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d194      	bne.n	8001d62 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2220      	movs	r2, #32
 8001e4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2200      	movs	r2, #0
 8001e54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001e60:	2300      	movs	r3, #0
 8001e62:	e000      	b.n	8001e66 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001e64:	2302      	movs	r3, #2
  }
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3718      	adds	r7, #24
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	00100002 	.word	0x00100002
 8001e74:	ffff0000 	.word	0xffff0000

08001e78 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b088      	sub	sp, #32
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001e80:	2300      	movs	r3, #0
 8001e82:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e90:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001e98:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ea0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001ea2:	7bfb      	ldrb	r3, [r7, #15]
 8001ea4:	2b10      	cmp	r3, #16
 8001ea6:	d003      	beq.n	8001eb0 <HAL_I2C_EV_IRQHandler+0x38>
 8001ea8:	7bfb      	ldrb	r3, [r7, #15]
 8001eaa:	2b40      	cmp	r3, #64	@ 0x40
 8001eac:	f040 80c1 	bne.w	8002032 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	699b      	ldr	r3, [r3, #24]
 8001eb6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	695b      	ldr	r3, [r3, #20]
 8001ebe:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d10d      	bne.n	8001ee6 <HAL_I2C_EV_IRQHandler+0x6e>
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8001ed0:	d003      	beq.n	8001eda <HAL_I2C_EV_IRQHandler+0x62>
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8001ed8:	d101      	bne.n	8001ede <HAL_I2C_EV_IRQHandler+0x66>
 8001eda:	2301      	movs	r3, #1
 8001edc:	e000      	b.n	8001ee0 <HAL_I2C_EV_IRQHandler+0x68>
 8001ede:	2300      	movs	r3, #0
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	f000 8132 	beq.w	800214a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	f003 0301 	and.w	r3, r3, #1
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d00c      	beq.n	8001f0a <HAL_I2C_EV_IRQHandler+0x92>
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	0a5b      	lsrs	r3, r3, #9
 8001ef4:	f003 0301 	and.w	r3, r3, #1
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d006      	beq.n	8001f0a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f001 fdd8 	bl	8003ab2 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f000 fcf4 	bl	80028f0 <I2C_Master_SB>
 8001f08:	e092      	b.n	8002030 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	08db      	lsrs	r3, r3, #3
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d009      	beq.n	8001f2a <HAL_I2C_EV_IRQHandler+0xb2>
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	0a5b      	lsrs	r3, r3, #9
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d003      	beq.n	8001f2a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 fd6a 	bl	80029fc <I2C_Master_ADD10>
 8001f28:	e082      	b.n	8002030 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	085b      	lsrs	r3, r3, #1
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d009      	beq.n	8001f4a <HAL_I2C_EV_IRQHandler+0xd2>
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	0a5b      	lsrs	r3, r3, #9
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d003      	beq.n	8001f4a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f000 fd84 	bl	8002a50 <I2C_Master_ADDR>
 8001f48:	e072      	b.n	8002030 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	089b      	lsrs	r3, r3, #2
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d03b      	beq.n	8001fce <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f60:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001f64:	f000 80f3 	beq.w	800214e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	09db      	lsrs	r3, r3, #7
 8001f6c:	f003 0301 	and.w	r3, r3, #1
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d00f      	beq.n	8001f94 <HAL_I2C_EV_IRQHandler+0x11c>
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	0a9b      	lsrs	r3, r3, #10
 8001f78:	f003 0301 	and.w	r3, r3, #1
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d009      	beq.n	8001f94 <HAL_I2C_EV_IRQHandler+0x11c>
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	089b      	lsrs	r3, r3, #2
 8001f84:	f003 0301 	and.w	r3, r3, #1
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d103      	bne.n	8001f94 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f000 f94c 	bl	800222a <I2C_MasterTransmit_TXE>
 8001f92:	e04d      	b.n	8002030 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	089b      	lsrs	r3, r3, #2
 8001f98:	f003 0301 	and.w	r3, r3, #1
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	f000 80d6 	beq.w	800214e <HAL_I2C_EV_IRQHandler+0x2d6>
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	0a5b      	lsrs	r3, r3, #9
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	f000 80cf 	beq.w	800214e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001fb0:	7bbb      	ldrb	r3, [r7, #14]
 8001fb2:	2b21      	cmp	r3, #33	@ 0x21
 8001fb4:	d103      	bne.n	8001fbe <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 f9d3 	bl	8002362 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001fbc:	e0c7      	b.n	800214e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001fbe:	7bfb      	ldrb	r3, [r7, #15]
 8001fc0:	2b40      	cmp	r3, #64	@ 0x40
 8001fc2:	f040 80c4 	bne.w	800214e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 fa41 	bl	800244e <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001fcc:	e0bf      	b.n	800214e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001fd8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001fdc:	f000 80b7 	beq.w	800214e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	099b      	lsrs	r3, r3, #6
 8001fe4:	f003 0301 	and.w	r3, r3, #1
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d00f      	beq.n	800200c <HAL_I2C_EV_IRQHandler+0x194>
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	0a9b      	lsrs	r3, r3, #10
 8001ff0:	f003 0301 	and.w	r3, r3, #1
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d009      	beq.n	800200c <HAL_I2C_EV_IRQHandler+0x194>
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	089b      	lsrs	r3, r3, #2
 8001ffc:	f003 0301 	and.w	r3, r3, #1
 8002000:	2b00      	cmp	r3, #0
 8002002:	d103      	bne.n	800200c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f000 faba 	bl	800257e <I2C_MasterReceive_RXNE>
 800200a:	e011      	b.n	8002030 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	089b      	lsrs	r3, r3, #2
 8002010:	f003 0301 	and.w	r3, r3, #1
 8002014:	2b00      	cmp	r3, #0
 8002016:	f000 809a 	beq.w	800214e <HAL_I2C_EV_IRQHandler+0x2d6>
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	0a5b      	lsrs	r3, r3, #9
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b00      	cmp	r3, #0
 8002024:	f000 8093 	beq.w	800214e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f000 fb70 	bl	800270e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800202e:	e08e      	b.n	800214e <HAL_I2C_EV_IRQHandler+0x2d6>
 8002030:	e08d      	b.n	800214e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002036:	2b00      	cmp	r3, #0
 8002038:	d004      	beq.n	8002044 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	695b      	ldr	r3, [r3, #20]
 8002040:	61fb      	str	r3, [r7, #28]
 8002042:	e007      	b.n	8002054 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	695b      	ldr	r3, [r3, #20]
 8002052:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	085b      	lsrs	r3, r3, #1
 8002058:	f003 0301 	and.w	r3, r3, #1
 800205c:	2b00      	cmp	r3, #0
 800205e:	d012      	beq.n	8002086 <HAL_I2C_EV_IRQHandler+0x20e>
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	0a5b      	lsrs	r3, r3, #9
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	2b00      	cmp	r3, #0
 800206a:	d00c      	beq.n	8002086 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002070:	2b00      	cmp	r3, #0
 8002072:	d003      	beq.n	800207c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800207c:	69b9      	ldr	r1, [r7, #24]
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 ff35 	bl	8002eee <I2C_Slave_ADDR>
 8002084:	e066      	b.n	8002154 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	091b      	lsrs	r3, r3, #4
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	2b00      	cmp	r3, #0
 8002090:	d009      	beq.n	80020a6 <HAL_I2C_EV_IRQHandler+0x22e>
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	0a5b      	lsrs	r3, r3, #9
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	2b00      	cmp	r3, #0
 800209c:	d003      	beq.n	80020a6 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 ff70 	bl	8002f84 <I2C_Slave_STOPF>
 80020a4:	e056      	b.n	8002154 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80020a6:	7bbb      	ldrb	r3, [r7, #14]
 80020a8:	2b21      	cmp	r3, #33	@ 0x21
 80020aa:	d002      	beq.n	80020b2 <HAL_I2C_EV_IRQHandler+0x23a>
 80020ac:	7bbb      	ldrb	r3, [r7, #14]
 80020ae:	2b29      	cmp	r3, #41	@ 0x29
 80020b0:	d125      	bne.n	80020fe <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	09db      	lsrs	r3, r3, #7
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d00f      	beq.n	80020de <HAL_I2C_EV_IRQHandler+0x266>
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	0a9b      	lsrs	r3, r3, #10
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d009      	beq.n	80020de <HAL_I2C_EV_IRQHandler+0x266>
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	089b      	lsrs	r3, r3, #2
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d103      	bne.n	80020de <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 fe4b 	bl	8002d72 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80020dc:	e039      	b.n	8002152 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	089b      	lsrs	r3, r3, #2
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d033      	beq.n	8002152 <HAL_I2C_EV_IRQHandler+0x2da>
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	0a5b      	lsrs	r3, r3, #9
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d02d      	beq.n	8002152 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f000 fe78 	bl	8002dec <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80020fc:	e029      	b.n	8002152 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	099b      	lsrs	r3, r3, #6
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	2b00      	cmp	r3, #0
 8002108:	d00f      	beq.n	800212a <HAL_I2C_EV_IRQHandler+0x2b2>
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	0a9b      	lsrs	r3, r3, #10
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	2b00      	cmp	r3, #0
 8002114:	d009      	beq.n	800212a <HAL_I2C_EV_IRQHandler+0x2b2>
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	089b      	lsrs	r3, r3, #2
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	2b00      	cmp	r3, #0
 8002120:	d103      	bne.n	800212a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f000 fe83 	bl	8002e2e <I2C_SlaveReceive_RXNE>
 8002128:	e014      	b.n	8002154 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	089b      	lsrs	r3, r3, #2
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	2b00      	cmp	r3, #0
 8002134:	d00e      	beq.n	8002154 <HAL_I2C_EV_IRQHandler+0x2dc>
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	0a5b      	lsrs	r3, r3, #9
 800213a:	f003 0301 	and.w	r3, r3, #1
 800213e:	2b00      	cmp	r3, #0
 8002140:	d008      	beq.n	8002154 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f000 feb1 	bl	8002eaa <I2C_SlaveReceive_BTF>
 8002148:	e004      	b.n	8002154 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800214a:	bf00      	nop
 800214c:	e002      	b.n	8002154 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800214e:	bf00      	nop
 8002150:	e000      	b.n	8002154 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002152:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002154:	3720      	adds	r7, #32
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800215a:	b480      	push	{r7}
 800215c:	b083      	sub	sp, #12
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002162:	bf00      	nop
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr

0800216e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800216e:	b480      	push	{r7}
 8002170:	b083      	sub	sp, #12
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002176:	bf00      	nop
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr

08002182 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002182:	b480      	push	{r7}
 8002184:	b083      	sub	sp, #12
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800218a:	bf00      	nop
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr

08002196 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002196:	b480      	push	{r7}
 8002198:	b083      	sub	sp, #12
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800219e:	bf00      	nop
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr

080021aa <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80021aa:	b480      	push	{r7}
 80021ac:	b083      	sub	sp, #12
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
 80021b2:	460b      	mov	r3, r1
 80021b4:	70fb      	strb	r3, [r7, #3]
 80021b6:	4613      	mov	r3, r2
 80021b8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80021ba:	bf00      	nop
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021c6:	b480      	push	{r7}
 80021c8:	b083      	sub	sp, #12
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80021ce:	bf00      	nop
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr

080021da <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021da:	b480      	push	{r7}
 80021dc:	b083      	sub	sp, #12
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80021e2:	bf00      	nop
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr

080021ee <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021ee:	b480      	push	{r7}
 80021f0:	b083      	sub	sp, #12
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80021f6:	bf00      	nop
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr

08002202 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002202:	b480      	push	{r7}
 8002204:	b083      	sub	sp, #12
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800220a:	bf00      	nop
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr

08002216 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002216:	b480      	push	{r7}
 8002218:	b083      	sub	sp, #12
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800221e:	bf00      	nop
 8002220:	370c      	adds	r7, #12
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr

0800222a <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800222a:	b580      	push	{r7, lr}
 800222c:	b084      	sub	sp, #16
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002238:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002240:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002246:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800224c:	2b00      	cmp	r3, #0
 800224e:	d150      	bne.n	80022f2 <I2C_MasterTransmit_TXE+0xc8>
 8002250:	7bfb      	ldrb	r3, [r7, #15]
 8002252:	2b21      	cmp	r3, #33	@ 0x21
 8002254:	d14d      	bne.n	80022f2 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	2b08      	cmp	r3, #8
 800225a:	d01d      	beq.n	8002298 <I2C_MasterTransmit_TXE+0x6e>
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	2b20      	cmp	r3, #32
 8002260:	d01a      	beq.n	8002298 <I2C_MasterTransmit_TXE+0x6e>
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002268:	d016      	beq.n	8002298 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	685a      	ldr	r2, [r3, #4]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002278:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2211      	movs	r2, #17
 800227e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2220      	movs	r2, #32
 800228c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f7ff ff62 	bl	800215a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002296:	e060      	b.n	800235a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	685a      	ldr	r2, [r3, #4]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80022a6:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022b6:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2220      	movs	r2, #32
 80022c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	2b40      	cmp	r3, #64	@ 0x40
 80022d0:	d107      	bne.n	80022e2 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f7ff ff7d 	bl	80021da <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80022e0:	e03b      	b.n	800235a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f7ff ff35 	bl	800215a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80022f0:	e033      	b.n	800235a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80022f2:	7bfb      	ldrb	r3, [r7, #15]
 80022f4:	2b21      	cmp	r3, #33	@ 0x21
 80022f6:	d005      	beq.n	8002304 <I2C_MasterTransmit_TXE+0xda>
 80022f8:	7bbb      	ldrb	r3, [r7, #14]
 80022fa:	2b40      	cmp	r3, #64	@ 0x40
 80022fc:	d12d      	bne.n	800235a <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80022fe:	7bfb      	ldrb	r3, [r7, #15]
 8002300:	2b22      	cmp	r3, #34	@ 0x22
 8002302:	d12a      	bne.n	800235a <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002308:	b29b      	uxth	r3, r3
 800230a:	2b00      	cmp	r3, #0
 800230c:	d108      	bne.n	8002320 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	685a      	ldr	r2, [r3, #4]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800231c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800231e:	e01c      	b.n	800235a <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002326:	b2db      	uxtb	r3, r3
 8002328:	2b40      	cmp	r3, #64	@ 0x40
 800232a:	d103      	bne.n	8002334 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f000 f88e 	bl	800244e <I2C_MemoryTransmit_TXE_BTF>
}
 8002332:	e012      	b.n	800235a <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002338:	781a      	ldrb	r2, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002344:	1c5a      	adds	r2, r3, #1
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800234e:	b29b      	uxth	r3, r3
 8002350:	3b01      	subs	r3, #1
 8002352:	b29a      	uxth	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002358:	e7ff      	b.n	800235a <I2C_MasterTransmit_TXE+0x130>
 800235a:	bf00      	nop
 800235c:	3710      	adds	r7, #16
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}

08002362 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002362:	b580      	push	{r7, lr}
 8002364:	b084      	sub	sp, #16
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800236e:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002376:	b2db      	uxtb	r3, r3
 8002378:	2b21      	cmp	r3, #33	@ 0x21
 800237a:	d164      	bne.n	8002446 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002380:	b29b      	uxth	r3, r3
 8002382:	2b00      	cmp	r3, #0
 8002384:	d012      	beq.n	80023ac <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800238a:	781a      	ldrb	r2, [r3, #0]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002396:	1c5a      	adds	r2, r3, #1
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	3b01      	subs	r3, #1
 80023a4:	b29a      	uxth	r2, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80023aa:	e04c      	b.n	8002446 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2b08      	cmp	r3, #8
 80023b0:	d01d      	beq.n	80023ee <I2C_MasterTransmit_BTF+0x8c>
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2b20      	cmp	r3, #32
 80023b6:	d01a      	beq.n	80023ee <I2C_MasterTransmit_BTF+0x8c>
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80023be:	d016      	beq.n	80023ee <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	685a      	ldr	r2, [r3, #4]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80023ce:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2211      	movs	r2, #17
 80023d4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2220      	movs	r2, #32
 80023e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f7ff feb7 	bl	800215a <HAL_I2C_MasterTxCpltCallback>
}
 80023ec:	e02b      	b.n	8002446 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	685a      	ldr	r2, [r3, #4]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80023fc:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800240c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2220      	movs	r2, #32
 8002418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002422:	b2db      	uxtb	r3, r3
 8002424:	2b40      	cmp	r3, #64	@ 0x40
 8002426:	d107      	bne.n	8002438 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f7ff fed2 	bl	80021da <HAL_I2C_MemTxCpltCallback>
}
 8002436:	e006      	b.n	8002446 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f7ff fe8a 	bl	800215a <HAL_I2C_MasterTxCpltCallback>
}
 8002446:	bf00      	nop
 8002448:	3710      	adds	r7, #16
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}

0800244e <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800244e:	b580      	push	{r7, lr}
 8002450:	b084      	sub	sp, #16
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800245c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002462:	2b00      	cmp	r3, #0
 8002464:	d11d      	bne.n	80024a2 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800246a:	2b01      	cmp	r3, #1
 800246c:	d10b      	bne.n	8002486 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002472:	b2da      	uxtb	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800247e:	1c9a      	adds	r2, r3, #2
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8002484:	e077      	b.n	8002576 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800248a:	b29b      	uxth	r3, r3
 800248c:	121b      	asrs	r3, r3, #8
 800248e:	b2da      	uxtb	r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800249a:	1c5a      	adds	r2, r3, #1
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80024a0:	e069      	b.n	8002576 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d10b      	bne.n	80024c2 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024ae:	b2da      	uxtb	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024ba:	1c5a      	adds	r2, r3, #1
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80024c0:	e059      	b.n	8002576 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d152      	bne.n	8002570 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80024ca:	7bfb      	ldrb	r3, [r7, #15]
 80024cc:	2b22      	cmp	r3, #34	@ 0x22
 80024ce:	d10d      	bne.n	80024ec <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80024de:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024e4:	1c5a      	adds	r2, r3, #1
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80024ea:	e044      	b.n	8002576 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d015      	beq.n	8002522 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80024f6:	7bfb      	ldrb	r3, [r7, #15]
 80024f8:	2b21      	cmp	r3, #33	@ 0x21
 80024fa:	d112      	bne.n	8002522 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002500:	781a      	ldrb	r2, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800250c:	1c5a      	adds	r2, r3, #1
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002516:	b29b      	uxth	r3, r3
 8002518:	3b01      	subs	r3, #1
 800251a:	b29a      	uxth	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002520:	e029      	b.n	8002576 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002526:	b29b      	uxth	r3, r3
 8002528:	2b00      	cmp	r3, #0
 800252a:	d124      	bne.n	8002576 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800252c:	7bfb      	ldrb	r3, [r7, #15]
 800252e:	2b21      	cmp	r3, #33	@ 0x21
 8002530:	d121      	bne.n	8002576 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	685a      	ldr	r2, [r3, #4]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002540:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002550:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2220      	movs	r2, #32
 800255c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f7ff fe36 	bl	80021da <HAL_I2C_MemTxCpltCallback>
}
 800256e:	e002      	b.n	8002576 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f7ff fb6d 	bl	8001c50 <I2C_Flush_DR>
}
 8002576:	bf00      	nop
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	b084      	sub	sp, #16
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b22      	cmp	r3, #34	@ 0x22
 8002590:	f040 80b9 	bne.w	8002706 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002598:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800259e:	b29b      	uxth	r3, r3
 80025a0:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	2b03      	cmp	r3, #3
 80025a6:	d921      	bls.n	80025ec <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	691a      	ldr	r2, [r3, #16]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b2:	b2d2      	uxtb	r2, r2
 80025b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ba:	1c5a      	adds	r2, r3, #1
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	3b01      	subs	r3, #1
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	2b03      	cmp	r3, #3
 80025d6:	f040 8096 	bne.w	8002706 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	685a      	ldr	r2, [r3, #4]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025e8:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80025ea:	e08c      	b.n	8002706 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d07f      	beq.n	80026f4 <I2C_MasterReceive_RXNE+0x176>
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d002      	beq.n	8002600 <I2C_MasterReceive_RXNE+0x82>
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d179      	bne.n	80026f4 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f001 f9f5 	bl	80039f0 <I2C_WaitOnSTOPRequestThroughIT>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d14c      	bne.n	80026a6 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800261a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	685a      	ldr	r2, [r3, #4]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800262a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	691a      	ldr	r2, [r3, #16]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002636:	b2d2      	uxtb	r2, r2
 8002638:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800263e:	1c5a      	adds	r2, r3, #1
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002648:	b29b      	uxth	r3, r3
 800264a:	3b01      	subs	r3, #1
 800264c:	b29a      	uxth	r2, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2220      	movs	r2, #32
 8002656:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002660:	b2db      	uxtb	r3, r3
 8002662:	2b40      	cmp	r3, #64	@ 0x40
 8002664:	d10a      	bne.n	800267c <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f7ff fdba 	bl	80021ee <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800267a:	e044      	b.n	8002706 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2b08      	cmp	r3, #8
 8002688:	d002      	beq.n	8002690 <I2C_MasterReceive_RXNE+0x112>
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2b20      	cmp	r3, #32
 800268e:	d103      	bne.n	8002698 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	631a      	str	r2, [r3, #48]	@ 0x30
 8002696:	e002      	b.n	800269e <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2212      	movs	r2, #18
 800269c:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f7ff fd65 	bl	800216e <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80026a4:	e02f      	b.n	8002706 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	685a      	ldr	r2, [r3, #4]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80026b4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	691a      	ldr	r2, [r3, #16]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c0:	b2d2      	uxtb	r2, r2
 80026c2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c8:	1c5a      	adds	r2, r3, #1
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	3b01      	subs	r3, #1
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2220      	movs	r2, #32
 80026e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f7ff fd88 	bl	8002202 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80026f2:	e008      	b.n	8002706 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	685a      	ldr	r2, [r3, #4]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002702:	605a      	str	r2, [r3, #4]
}
 8002704:	e7ff      	b.n	8002706 <I2C_MasterReceive_RXNE+0x188>
 8002706:	bf00      	nop
 8002708:	3710      	adds	r7, #16
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b084      	sub	sp, #16
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800271a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002720:	b29b      	uxth	r3, r3
 8002722:	2b04      	cmp	r3, #4
 8002724:	d11b      	bne.n	800275e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	685a      	ldr	r2, [r3, #4]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002734:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	691a      	ldr	r2, [r3, #16]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002740:	b2d2      	uxtb	r2, r2
 8002742:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002748:	1c5a      	adds	r2, r3, #1
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002752:	b29b      	uxth	r3, r3
 8002754:	3b01      	subs	r3, #1
 8002756:	b29a      	uxth	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800275c:	e0c4      	b.n	80028e8 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002762:	b29b      	uxth	r3, r3
 8002764:	2b03      	cmp	r3, #3
 8002766:	d129      	bne.n	80027bc <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	685a      	ldr	r2, [r3, #4]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002776:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2b04      	cmp	r3, #4
 800277c:	d00a      	beq.n	8002794 <I2C_MasterReceive_BTF+0x86>
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2b02      	cmp	r3, #2
 8002782:	d007      	beq.n	8002794 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002792:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	691a      	ldr	r2, [r3, #16]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800279e:	b2d2      	uxtb	r2, r2
 80027a0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027a6:	1c5a      	adds	r2, r3, #1
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	3b01      	subs	r3, #1
 80027b4:	b29a      	uxth	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80027ba:	e095      	b.n	80028e8 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d17d      	bne.n	80028c2 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d002      	beq.n	80027d2 <I2C_MasterReceive_BTF+0xc4>
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2b10      	cmp	r3, #16
 80027d0:	d108      	bne.n	80027e4 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027e0:	601a      	str	r2, [r3, #0]
 80027e2:	e016      	b.n	8002812 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2b04      	cmp	r3, #4
 80027e8:	d002      	beq.n	80027f0 <I2C_MasterReceive_BTF+0xe2>
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d108      	bne.n	8002802 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80027fe:	601a      	str	r2, [r3, #0]
 8002800:	e007      	b.n	8002812 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002810:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	691a      	ldr	r2, [r3, #16]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800281c:	b2d2      	uxtb	r2, r2
 800281e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002824:	1c5a      	adds	r2, r3, #1
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800282e:	b29b      	uxth	r3, r3
 8002830:	3b01      	subs	r3, #1
 8002832:	b29a      	uxth	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	691a      	ldr	r2, [r3, #16]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002842:	b2d2      	uxtb	r2, r2
 8002844:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800284a:	1c5a      	adds	r2, r3, #1
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002854:	b29b      	uxth	r3, r3
 8002856:	3b01      	subs	r3, #1
 8002858:	b29a      	uxth	r2, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	685a      	ldr	r2, [r3, #4]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800286c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2220      	movs	r2, #32
 8002872:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800287c:	b2db      	uxtb	r3, r3
 800287e:	2b40      	cmp	r3, #64	@ 0x40
 8002880:	d10a      	bne.n	8002898 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f7ff fcac 	bl	80021ee <HAL_I2C_MemRxCpltCallback>
}
 8002896:	e027      	b.n	80028e8 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2b08      	cmp	r3, #8
 80028a4:	d002      	beq.n	80028ac <I2C_MasterReceive_BTF+0x19e>
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2b20      	cmp	r3, #32
 80028aa:	d103      	bne.n	80028b4 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	631a      	str	r2, [r3, #48]	@ 0x30
 80028b2:	e002      	b.n	80028ba <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2212      	movs	r2, #18
 80028b8:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f7ff fc57 	bl	800216e <HAL_I2C_MasterRxCpltCallback>
}
 80028c0:	e012      	b.n	80028e8 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	691a      	ldr	r2, [r3, #16]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028cc:	b2d2      	uxtb	r2, r2
 80028ce:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d4:	1c5a      	adds	r2, r3, #1
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028de:	b29b      	uxth	r3, r3
 80028e0:	3b01      	subs	r3, #1
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80028e8:	bf00      	nop
 80028ea:	3710      	adds	r7, #16
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	2b40      	cmp	r3, #64	@ 0x40
 8002902:	d117      	bne.n	8002934 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002908:	2b00      	cmp	r3, #0
 800290a:	d109      	bne.n	8002920 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002910:	b2db      	uxtb	r3, r3
 8002912:	461a      	mov	r2, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800291c:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800291e:	e067      	b.n	80029f0 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002924:	b2db      	uxtb	r3, r3
 8002926:	f043 0301 	orr.w	r3, r3, #1
 800292a:	b2da      	uxtb	r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	611a      	str	r2, [r3, #16]
}
 8002932:	e05d      	b.n	80029f0 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	691b      	ldr	r3, [r3, #16]
 8002938:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800293c:	d133      	bne.n	80029a6 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002944:	b2db      	uxtb	r3, r3
 8002946:	2b21      	cmp	r3, #33	@ 0x21
 8002948:	d109      	bne.n	800295e <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800294e:	b2db      	uxtb	r3, r3
 8002950:	461a      	mov	r2, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800295a:	611a      	str	r2, [r3, #16]
 800295c:	e008      	b.n	8002970 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002962:	b2db      	uxtb	r3, r3
 8002964:	f043 0301 	orr.w	r3, r3, #1
 8002968:	b2da      	uxtb	r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002974:	2b00      	cmp	r3, #0
 8002976:	d004      	beq.n	8002982 <I2C_Master_SB+0x92>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800297c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800297e:	2b00      	cmp	r3, #0
 8002980:	d108      	bne.n	8002994 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002986:	2b00      	cmp	r3, #0
 8002988:	d032      	beq.n	80029f0 <I2C_Master_SB+0x100>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800298e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002990:	2b00      	cmp	r3, #0
 8002992:	d02d      	beq.n	80029f0 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	685a      	ldr	r2, [r3, #4]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80029a2:	605a      	str	r2, [r3, #4]
}
 80029a4:	e024      	b.n	80029f0 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d10e      	bne.n	80029cc <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	11db      	asrs	r3, r3, #7
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	f003 0306 	and.w	r3, r3, #6
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	f063 030f 	orn	r3, r3, #15
 80029c2:	b2da      	uxtb	r2, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	611a      	str	r2, [r3, #16]
}
 80029ca:	e011      	b.n	80029f0 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d10d      	bne.n	80029f0 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029d8:	b29b      	uxth	r3, r3
 80029da:	11db      	asrs	r3, r3, #7
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	f003 0306 	and.w	r3, r3, #6
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	f063 030e 	orn	r3, r3, #14
 80029e8:	b2da      	uxtb	r2, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	611a      	str	r2, [r3, #16]
}
 80029f0:	bf00      	nop
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a08:	b2da      	uxtb	r2, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d004      	beq.n	8002a22 <I2C_Master_ADD10+0x26>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d108      	bne.n	8002a34 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00c      	beq.n	8002a44 <I2C_Master_ADD10+0x48>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d007      	beq.n	8002a44 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	685a      	ldr	r2, [r3, #4]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a42:	605a      	str	r2, [r3, #4]
  }
}
 8002a44:	bf00      	nop
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b091      	sub	sp, #68	@ 0x44
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002a5e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a66:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a6c:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b22      	cmp	r3, #34	@ 0x22
 8002a78:	f040 8169 	bne.w	8002d4e <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d10f      	bne.n	8002aa4 <I2C_Master_ADDR+0x54>
 8002a84:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002a88:	2b40      	cmp	r3, #64	@ 0x40
 8002a8a:	d10b      	bne.n	8002aa4 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	695b      	ldr	r3, [r3, #20]
 8002a96:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	699b      	ldr	r3, [r3, #24]
 8002a9e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aa2:	e160      	b.n	8002d66 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d11d      	bne.n	8002ae8 <I2C_Master_ADDR+0x98>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002ab4:	d118      	bne.n	8002ae8 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	695b      	ldr	r3, [r3, #20]
 8002ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002aca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ada:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ae0:	1c5a      	adds	r2, r3, #1
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	651a      	str	r2, [r3, #80]	@ 0x50
 8002ae6:	e13e      	b.n	8002d66 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d113      	bne.n	8002b1a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002af2:	2300      	movs	r3, #0
 8002af4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	695b      	ldr	r3, [r3, #20]
 8002afc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	699b      	ldr	r3, [r3, #24]
 8002b04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b06:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b16:	601a      	str	r2, [r3, #0]
 8002b18:	e115      	b.n	8002d46 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	f040 808a 	bne.w	8002c3a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002b26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b28:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002b2c:	d137      	bne.n	8002b9e <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b3c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b4c:	d113      	bne.n	8002b76 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b5c:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b5e:	2300      	movs	r3, #0
 8002b60:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	695b      	ldr	r3, [r3, #20]
 8002b68:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b74:	e0e7      	b.n	8002d46 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b76:	2300      	movs	r3, #0
 8002b78:	623b      	str	r3, [r7, #32]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	695b      	ldr	r3, [r3, #20]
 8002b80:	623b      	str	r3, [r7, #32]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	699b      	ldr	r3, [r3, #24]
 8002b88:	623b      	str	r3, [r7, #32]
 8002b8a:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b9a:	601a      	str	r2, [r3, #0]
 8002b9c:	e0d3      	b.n	8002d46 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002b9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ba0:	2b08      	cmp	r3, #8
 8002ba2:	d02e      	beq.n	8002c02 <I2C_Master_ADDR+0x1b2>
 8002ba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ba6:	2b20      	cmp	r3, #32
 8002ba8:	d02b      	beq.n	8002c02 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002baa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bac:	2b12      	cmp	r3, #18
 8002bae:	d102      	bne.n	8002bb6 <I2C_Master_ADDR+0x166>
 8002bb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d125      	bne.n	8002c02 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002bb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bb8:	2b04      	cmp	r3, #4
 8002bba:	d00e      	beq.n	8002bda <I2C_Master_ADDR+0x18a>
 8002bbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d00b      	beq.n	8002bda <I2C_Master_ADDR+0x18a>
 8002bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bc4:	2b10      	cmp	r3, #16
 8002bc6:	d008      	beq.n	8002bda <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	e007      	b.n	8002bea <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002be8:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bea:	2300      	movs	r3, #0
 8002bec:	61fb      	str	r3, [r7, #28]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	695b      	ldr	r3, [r3, #20]
 8002bf4:	61fb      	str	r3, [r7, #28]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	61fb      	str	r3, [r7, #28]
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	e0a1      	b.n	8002d46 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c10:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c12:	2300      	movs	r3, #0
 8002c14:	61bb      	str	r3, [r7, #24]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	695b      	ldr	r3, [r3, #20]
 8002c1c:	61bb      	str	r3, [r7, #24]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	61bb      	str	r3, [r7, #24]
 8002c26:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c36:	601a      	str	r2, [r3, #0]
 8002c38:	e085      	b.n	8002d46 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d14d      	bne.n	8002ce0 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002c44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c46:	2b04      	cmp	r3, #4
 8002c48:	d016      	beq.n	8002c78 <I2C_Master_ADDR+0x228>
 8002c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d013      	beq.n	8002c78 <I2C_Master_ADDR+0x228>
 8002c50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c52:	2b10      	cmp	r3, #16
 8002c54:	d010      	beq.n	8002c78 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c64:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c74:	601a      	str	r2, [r3, #0]
 8002c76:	e007      	b.n	8002c88 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002c86:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c92:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c96:	d117      	bne.n	8002cc8 <I2C_Master_ADDR+0x278>
 8002c98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c9a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002c9e:	d00b      	beq.n	8002cb8 <I2C_Master_ADDR+0x268>
 8002ca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d008      	beq.n	8002cb8 <I2C_Master_ADDR+0x268>
 8002ca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ca8:	2b08      	cmp	r3, #8
 8002caa:	d005      	beq.n	8002cb8 <I2C_Master_ADDR+0x268>
 8002cac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cae:	2b10      	cmp	r3, #16
 8002cb0:	d002      	beq.n	8002cb8 <I2C_Master_ADDR+0x268>
 8002cb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cb4:	2b20      	cmp	r3, #32
 8002cb6:	d107      	bne.n	8002cc8 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	685a      	ldr	r2, [r3, #4]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002cc6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cc8:	2300      	movs	r3, #0
 8002cca:	617b      	str	r3, [r7, #20]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	617b      	str	r3, [r7, #20]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	617b      	str	r3, [r7, #20]
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	e032      	b.n	8002d46 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002cee:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cfa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002cfe:	d117      	bne.n	8002d30 <I2C_Master_ADDR+0x2e0>
 8002d00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d02:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002d06:	d00b      	beq.n	8002d20 <I2C_Master_ADDR+0x2d0>
 8002d08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d008      	beq.n	8002d20 <I2C_Master_ADDR+0x2d0>
 8002d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d10:	2b08      	cmp	r3, #8
 8002d12:	d005      	beq.n	8002d20 <I2C_Master_ADDR+0x2d0>
 8002d14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d16:	2b10      	cmp	r3, #16
 8002d18:	d002      	beq.n	8002d20 <I2C_Master_ADDR+0x2d0>
 8002d1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d1c:	2b20      	cmp	r3, #32
 8002d1e:	d107      	bne.n	8002d30 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	685a      	ldr	r2, [r3, #4]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002d2e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d30:	2300      	movs	r3, #0
 8002d32:	613b      	str	r3, [r7, #16]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	613b      	str	r3, [r7, #16]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	613b      	str	r3, [r7, #16]
 8002d44:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002d4c:	e00b      	b.n	8002d66 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d4e:	2300      	movs	r3, #0
 8002d50:	60fb      	str	r3, [r7, #12]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	695b      	ldr	r3, [r3, #20]
 8002d58:	60fb      	str	r3, [r7, #12]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	60fb      	str	r3, [r7, #12]
 8002d62:	68fb      	ldr	r3, [r7, #12]
}
 8002d64:	e7ff      	b.n	8002d66 <I2C_Master_ADDR+0x316>
 8002d66:	bf00      	nop
 8002d68:	3744      	adds	r7, #68	@ 0x44
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr

08002d72 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b084      	sub	sp, #16
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d80:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d02b      	beq.n	8002de4 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d90:	781a      	ldrb	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d9c:	1c5a      	adds	r2, r3, #1
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	3b01      	subs	r3, #1
 8002daa:	b29a      	uxth	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d114      	bne.n	8002de4 <I2C_SlaveTransmit_TXE+0x72>
 8002dba:	7bfb      	ldrb	r3, [r7, #15]
 8002dbc:	2b29      	cmp	r3, #41	@ 0x29
 8002dbe:	d111      	bne.n	8002de4 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	685a      	ldr	r2, [r3, #4]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002dce:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2221      	movs	r2, #33	@ 0x21
 8002dd4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2228      	movs	r2, #40	@ 0x28
 8002dda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f7ff f9cf 	bl	8002182 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002de4:	bf00      	nop
 8002de6:	3710      	adds	r7, #16
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d011      	beq.n	8002e22 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e02:	781a      	ldrb	r2, [r3, #0]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e0e:	1c5a      	adds	r2, r3, #1
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	b29a      	uxth	r2, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8002e22:	bf00      	nop
 8002e24:	370c      	adds	r7, #12
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr

08002e2e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b084      	sub	sp, #16
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e3c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d02c      	beq.n	8002ea2 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	691a      	ldr	r2, [r3, #16]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e52:	b2d2      	uxtb	r2, r2
 8002e54:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e5a:	1c5a      	adds	r2, r3, #1
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	3b01      	subs	r3, #1
 8002e68:	b29a      	uxth	r2, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d114      	bne.n	8002ea2 <I2C_SlaveReceive_RXNE+0x74>
 8002e78:	7bfb      	ldrb	r3, [r7, #15]
 8002e7a:	2b2a      	cmp	r3, #42	@ 0x2a
 8002e7c:	d111      	bne.n	8002ea2 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	685a      	ldr	r2, [r3, #4]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e8c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2222      	movs	r2, #34	@ 0x22
 8002e92:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2228      	movs	r2, #40	@ 0x28
 8002e98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f7ff f97a 	bl	8002196 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002ea2:	bf00      	nop
 8002ea4:	3710      	adds	r7, #16
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}

08002eaa <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002eaa:	b480      	push	{r7}
 8002eac:	b083      	sub	sp, #12
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d012      	beq.n	8002ee2 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	691a      	ldr	r2, [r3, #16]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec6:	b2d2      	uxtb	r2, r2
 8002ec8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ece:	1c5a      	adds	r2, r3, #1
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	3b01      	subs	r3, #1
 8002edc:	b29a      	uxth	r2, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8002ee2:	bf00      	nop
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr

08002eee <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002eee:	b580      	push	{r7, lr}
 8002ef0:	b084      	sub	sp, #16
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
 8002ef6:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002f08:	2b28      	cmp	r3, #40	@ 0x28
 8002f0a:	d127      	bne.n	8002f5c <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	685a      	ldr	r2, [r3, #4]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f1a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	089b      	lsrs	r3, r3, #2
 8002f20:	f003 0301 	and.w	r3, r3, #1
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d101      	bne.n	8002f2c <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	09db      	lsrs	r3, r3, #7
 8002f30:	f003 0301 	and.w	r3, r3, #1
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d103      	bne.n	8002f40 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	81bb      	strh	r3, [r7, #12]
 8002f3e:	e002      	b.n	8002f46 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002f4e:	89ba      	ldrh	r2, [r7, #12]
 8002f50:	7bfb      	ldrb	r3, [r7, #15]
 8002f52:	4619      	mov	r1, r3
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f7ff f928 	bl	80021aa <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002f5a:	e00e      	b.n	8002f7a <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	60bb      	str	r3, [r7, #8]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	60bb      	str	r3, [r7, #8]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	60bb      	str	r3, [r7, #8]
 8002f70:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8002f7a:	bf00      	nop
 8002f7c:	3710      	adds	r7, #16
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
	...

08002f84 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f92:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	685a      	ldr	r2, [r3, #4]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002fa2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	60bb      	str	r3, [r7, #8]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	695b      	ldr	r3, [r3, #20]
 8002fae:	60bb      	str	r3, [r7, #8]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f042 0201 	orr.w	r2, r2, #1
 8002fbe:	601a      	str	r2, [r3, #0]
 8002fc0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fd0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fdc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002fe0:	d172      	bne.n	80030c8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002fe2:	7bfb      	ldrb	r3, [r7, #15]
 8002fe4:	2b22      	cmp	r3, #34	@ 0x22
 8002fe6:	d002      	beq.n	8002fee <I2C_Slave_STOPF+0x6a>
 8002fe8:	7bfb      	ldrb	r3, [r7, #15]
 8002fea:	2b2a      	cmp	r3, #42	@ 0x2a
 8002fec:	d135      	bne.n	800305a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	b29a      	uxth	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003000:	b29b      	uxth	r3, r3
 8003002:	2b00      	cmp	r3, #0
 8003004:	d005      	beq.n	8003012 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800300a:	f043 0204 	orr.w	r2, r3, #4
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	685a      	ldr	r2, [r3, #4]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003020:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003026:	4618      	mov	r0, r3
 8003028:	f7fe fad8 	bl	80015dc <HAL_DMA_GetState>
 800302c:	4603      	mov	r3, r0
 800302e:	2b01      	cmp	r3, #1
 8003030:	d049      	beq.n	80030c6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003036:	4a69      	ldr	r2, [pc, #420]	@ (80031dc <I2C_Slave_STOPF+0x258>)
 8003038:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800303e:	4618      	mov	r0, r3
 8003040:	f7fe faaa 	bl	8001598 <HAL_DMA_Abort_IT>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d03d      	beq.n	80030c6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800304e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003054:	4610      	mov	r0, r2
 8003056:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003058:	e035      	b.n	80030c6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	b29a      	uxth	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800306c:	b29b      	uxth	r3, r3
 800306e:	2b00      	cmp	r3, #0
 8003070:	d005      	beq.n	800307e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003076:	f043 0204 	orr.w	r2, r3, #4
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	685a      	ldr	r2, [r3, #4]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800308c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003092:	4618      	mov	r0, r3
 8003094:	f7fe faa2 	bl	80015dc <HAL_DMA_GetState>
 8003098:	4603      	mov	r3, r0
 800309a:	2b01      	cmp	r3, #1
 800309c:	d014      	beq.n	80030c8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030a2:	4a4e      	ldr	r2, [pc, #312]	@ (80031dc <I2C_Slave_STOPF+0x258>)
 80030a4:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7fe fa74 	bl	8001598 <HAL_DMA_Abort_IT>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d008      	beq.n	80030c8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80030c0:	4610      	mov	r0, r2
 80030c2:	4798      	blx	r3
 80030c4:	e000      	b.n	80030c8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80030c6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d03e      	beq.n	8003150 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	695b      	ldr	r3, [r3, #20]
 80030d8:	f003 0304 	and.w	r3, r3, #4
 80030dc:	2b04      	cmp	r3, #4
 80030de:	d112      	bne.n	8003106 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	691a      	ldr	r2, [r3, #16]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ea:	b2d2      	uxtb	r2, r2
 80030ec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f2:	1c5a      	adds	r2, r3, #1
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	3b01      	subs	r3, #1
 8003100:	b29a      	uxth	r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	695b      	ldr	r3, [r3, #20]
 800310c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003110:	2b40      	cmp	r3, #64	@ 0x40
 8003112:	d112      	bne.n	800313a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	691a      	ldr	r2, [r3, #16]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800311e:	b2d2      	uxtb	r2, r2
 8003120:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003126:	1c5a      	adds	r2, r3, #1
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003130:	b29b      	uxth	r3, r3
 8003132:	3b01      	subs	r3, #1
 8003134:	b29a      	uxth	r2, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800313e:	b29b      	uxth	r3, r3
 8003140:	2b00      	cmp	r3, #0
 8003142:	d005      	beq.n	8003150 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003148:	f043 0204 	orr.w	r2, r3, #4
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003154:	2b00      	cmp	r3, #0
 8003156:	d003      	beq.n	8003160 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f000 f843 	bl	80031e4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800315e:	e039      	b.n	80031d4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003160:	7bfb      	ldrb	r3, [r7, #15]
 8003162:	2b2a      	cmp	r3, #42	@ 0x2a
 8003164:	d109      	bne.n	800317a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2228      	movs	r2, #40	@ 0x28
 8003170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f7ff f80e 	bl	8002196 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003180:	b2db      	uxtb	r3, r3
 8003182:	2b28      	cmp	r3, #40	@ 0x28
 8003184:	d111      	bne.n	80031aa <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a15      	ldr	r2, [pc, #84]	@ (80031e0 <I2C_Slave_STOPF+0x25c>)
 800318a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2220      	movs	r2, #32
 8003196:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f7ff f80f 	bl	80021c6 <HAL_I2C_ListenCpltCallback>
}
 80031a8:	e014      	b.n	80031d4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ae:	2b22      	cmp	r3, #34	@ 0x22
 80031b0:	d002      	beq.n	80031b8 <I2C_Slave_STOPF+0x234>
 80031b2:	7bfb      	ldrb	r3, [r7, #15]
 80031b4:	2b22      	cmp	r3, #34	@ 0x22
 80031b6:	d10d      	bne.n	80031d4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2220      	movs	r2, #32
 80031c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f7fe ffe1 	bl	8002196 <HAL_I2C_SlaveRxCpltCallback>
}
 80031d4:	bf00      	nop
 80031d6:	3710      	adds	r7, #16
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	0800354d 	.word	0x0800354d
 80031e0:	ffff0000 	.word	0xffff0000

080031e4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031f2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80031fa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80031fc:	7bbb      	ldrb	r3, [r7, #14]
 80031fe:	2b10      	cmp	r3, #16
 8003200:	d002      	beq.n	8003208 <I2C_ITError+0x24>
 8003202:	7bbb      	ldrb	r3, [r7, #14]
 8003204:	2b40      	cmp	r3, #64	@ 0x40
 8003206:	d10a      	bne.n	800321e <I2C_ITError+0x3a>
 8003208:	7bfb      	ldrb	r3, [r7, #15]
 800320a:	2b22      	cmp	r3, #34	@ 0x22
 800320c:	d107      	bne.n	800321e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800321c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800321e:	7bfb      	ldrb	r3, [r7, #15]
 8003220:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003224:	2b28      	cmp	r3, #40	@ 0x28
 8003226:	d107      	bne.n	8003238 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2228      	movs	r2, #40	@ 0x28
 8003232:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003236:	e015      	b.n	8003264 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003242:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003246:	d00a      	beq.n	800325e <I2C_ITError+0x7a>
 8003248:	7bfb      	ldrb	r3, [r7, #15]
 800324a:	2b60      	cmp	r3, #96	@ 0x60
 800324c:	d007      	beq.n	800325e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2220      	movs	r2, #32
 8003252:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800326e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003272:	d162      	bne.n	800333a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	685a      	ldr	r2, [r3, #4]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003282:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003288:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b01      	cmp	r3, #1
 8003290:	d020      	beq.n	80032d4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003296:	4a6a      	ldr	r2, [pc, #424]	@ (8003440 <I2C_ITError+0x25c>)
 8003298:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800329e:	4618      	mov	r0, r3
 80032a0:	f7fe f97a 	bl	8001598 <HAL_DMA_Abort_IT>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	f000 8089 	beq.w	80033be <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f022 0201 	bic.w	r2, r2, #1
 80032ba:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2220      	movs	r2, #32
 80032c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80032ce:	4610      	mov	r0, r2
 80032d0:	4798      	blx	r3
 80032d2:	e074      	b.n	80033be <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032d8:	4a59      	ldr	r2, [pc, #356]	@ (8003440 <I2C_ITError+0x25c>)
 80032da:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7fe f959 	bl	8001598 <HAL_DMA_Abort_IT>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d068      	beq.n	80033be <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032f6:	2b40      	cmp	r3, #64	@ 0x40
 80032f8:	d10b      	bne.n	8003312 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	691a      	ldr	r2, [r3, #16]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003304:	b2d2      	uxtb	r2, r2
 8003306:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800330c:	1c5a      	adds	r2, r3, #1
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f022 0201 	bic.w	r2, r2, #1
 8003320:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2220      	movs	r2, #32
 8003326:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800332e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003334:	4610      	mov	r0, r2
 8003336:	4798      	blx	r3
 8003338:	e041      	b.n	80033be <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b60      	cmp	r3, #96	@ 0x60
 8003344:	d125      	bne.n	8003392 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2220      	movs	r2, #32
 800334a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800335e:	2b40      	cmp	r3, #64	@ 0x40
 8003360:	d10b      	bne.n	800337a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	691a      	ldr	r2, [r3, #16]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800336c:	b2d2      	uxtb	r2, r2
 800336e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003374:	1c5a      	adds	r2, r3, #1
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f022 0201 	bic.w	r2, r2, #1
 8003388:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f7fe ff43 	bl	8002216 <HAL_I2C_AbortCpltCallback>
 8003390:	e015      	b.n	80033be <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	695b      	ldr	r3, [r3, #20]
 8003398:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800339c:	2b40      	cmp	r3, #64	@ 0x40
 800339e:	d10b      	bne.n	80033b8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	691a      	ldr	r2, [r3, #16]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033aa:	b2d2      	uxtb	r2, r2
 80033ac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b2:	1c5a      	adds	r2, r3, #1
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f7fe ff22 	bl	8002202 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10e      	bne.n	80033ec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d109      	bne.n	80033ec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d104      	bne.n	80033ec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d007      	beq.n	80033fc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	685a      	ldr	r2, [r3, #4]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80033fa:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003402:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003408:	f003 0304 	and.w	r3, r3, #4
 800340c:	2b04      	cmp	r3, #4
 800340e:	d113      	bne.n	8003438 <I2C_ITError+0x254>
 8003410:	7bfb      	ldrb	r3, [r7, #15]
 8003412:	2b28      	cmp	r3, #40	@ 0x28
 8003414:	d110      	bne.n	8003438 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a0a      	ldr	r2, [pc, #40]	@ (8003444 <I2C_ITError+0x260>)
 800341a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2220      	movs	r2, #32
 8003426:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f7fe fec7 	bl	80021c6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003438:	bf00      	nop
 800343a:	3710      	adds	r7, #16
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	0800354d 	.word	0x0800354d
 8003444:	ffff0000 	.word	0xffff0000

08003448 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b088      	sub	sp, #32
 800344c:	af02      	add	r7, sp, #8
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	607a      	str	r2, [r7, #4]
 8003452:	603b      	str	r3, [r7, #0]
 8003454:	460b      	mov	r3, r1
 8003456:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800345c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	2b08      	cmp	r3, #8
 8003462:	d006      	beq.n	8003472 <I2C_MasterRequestWrite+0x2a>
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d003      	beq.n	8003472 <I2C_MasterRequestWrite+0x2a>
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003470:	d108      	bne.n	8003484 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003480:	601a      	str	r2, [r3, #0]
 8003482:	e00b      	b.n	800349c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003488:	2b12      	cmp	r3, #18
 800348a:	d107      	bne.n	800349c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800349a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	9300      	str	r3, [sp, #0]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80034a8:	68f8      	ldr	r0, [r7, #12]
 80034aa:	f000 f8f7 	bl	800369c <I2C_WaitOnFlagUntilTimeout>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d00d      	beq.n	80034d0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034c2:	d103      	bne.n	80034cc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80034ca:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e035      	b.n	800353c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	691b      	ldr	r3, [r3, #16]
 80034d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80034d8:	d108      	bne.n	80034ec <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80034da:	897b      	ldrh	r3, [r7, #10]
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	461a      	mov	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80034e8:	611a      	str	r2, [r3, #16]
 80034ea:	e01b      	b.n	8003524 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80034ec:	897b      	ldrh	r3, [r7, #10]
 80034ee:	11db      	asrs	r3, r3, #7
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	f003 0306 	and.w	r3, r3, #6
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	f063 030f 	orn	r3, r3, #15
 80034fc:	b2da      	uxtb	r2, r3
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	490e      	ldr	r1, [pc, #56]	@ (8003544 <I2C_MasterRequestWrite+0xfc>)
 800350a:	68f8      	ldr	r0, [r7, #12]
 800350c:	f000 f940 	bl	8003790 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d001      	beq.n	800351a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e010      	b.n	800353c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800351a:	897b      	ldrh	r3, [r7, #10]
 800351c:	b2da      	uxtb	r2, r3
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	4907      	ldr	r1, [pc, #28]	@ (8003548 <I2C_MasterRequestWrite+0x100>)
 800352a:	68f8      	ldr	r0, [r7, #12]
 800352c:	f000 f930 	bl	8003790 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d001      	beq.n	800353a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e000      	b.n	800353c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800353a:	2300      	movs	r3, #0
}
 800353c:	4618      	mov	r0, r3
 800353e:	3718      	adds	r7, #24
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}
 8003544:	00010008 	.word	0x00010008
 8003548:	00010002 	.word	0x00010002

0800354c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b086      	sub	sp, #24
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003554:	2300      	movs	r3, #0
 8003556:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800355c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003564:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003566:	4b4b      	ldr	r3, [pc, #300]	@ (8003694 <I2C_DMAAbort+0x148>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	08db      	lsrs	r3, r3, #3
 800356c:	4a4a      	ldr	r2, [pc, #296]	@ (8003698 <I2C_DMAAbort+0x14c>)
 800356e:	fba2 2303 	umull	r2, r3, r2, r3
 8003572:	0a1a      	lsrs	r2, r3, #8
 8003574:	4613      	mov	r3, r2
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	4413      	add	r3, r2
 800357a:	00da      	lsls	r2, r3, #3
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d106      	bne.n	8003594 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800358a:	f043 0220 	orr.w	r2, r3, #32
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8003592:	e00a      	b.n	80035aa <I2C_DMAAbort+0x5e>
    }
    count--;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	3b01      	subs	r3, #1
 8003598:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035a8:	d0ea      	beq.n	8003580 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d003      	beq.n	80035ba <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035b6:	2200      	movs	r2, #0
 80035b8:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d003      	beq.n	80035ca <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035c6:	2200      	movs	r2, #0
 80035c8:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035d8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	2200      	movs	r2, #0
 80035de:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d003      	beq.n	80035f0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035ec:	2200      	movs	r2, #0
 80035ee:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d003      	beq.n	8003600 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035fc:	2200      	movs	r2, #0
 80035fe:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f022 0201 	bic.w	r2, r2, #1
 800360e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003616:	b2db      	uxtb	r3, r3
 8003618:	2b60      	cmp	r3, #96	@ 0x60
 800361a:	d10e      	bne.n	800363a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	2220      	movs	r2, #32
 8003620:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	2200      	movs	r2, #0
 8003628:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	2200      	movs	r2, #0
 8003630:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003632:	6978      	ldr	r0, [r7, #20]
 8003634:	f7fe fdef 	bl	8002216 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003638:	e027      	b.n	800368a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800363a:	7cfb      	ldrb	r3, [r7, #19]
 800363c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003640:	2b28      	cmp	r3, #40	@ 0x28
 8003642:	d117      	bne.n	8003674 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f042 0201 	orr.w	r2, r2, #1
 8003652:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003662:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	2200      	movs	r2, #0
 8003668:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	2228      	movs	r2, #40	@ 0x28
 800366e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003672:	e007      	b.n	8003684 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	2220      	movs	r2, #32
 8003678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003684:	6978      	ldr	r0, [r7, #20]
 8003686:	f7fe fdbc 	bl	8002202 <HAL_I2C_ErrorCallback>
}
 800368a:	bf00      	nop
 800368c:	3718      	adds	r7, #24
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	20000000 	.word	0x20000000
 8003698:	14f8b589 	.word	0x14f8b589

0800369c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	603b      	str	r3, [r7, #0]
 80036a8:	4613      	mov	r3, r2
 80036aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036ac:	e048      	b.n	8003740 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80036b4:	d044      	beq.n	8003740 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036b6:	f7fd fe5d 	bl	8001374 <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	683a      	ldr	r2, [r7, #0]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d302      	bcc.n	80036cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d139      	bne.n	8003740 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	0c1b      	lsrs	r3, r3, #16
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d10d      	bne.n	80036f2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	695b      	ldr	r3, [r3, #20]
 80036dc:	43da      	mvns	r2, r3
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	4013      	ands	r3, r2
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	bf0c      	ite	eq
 80036e8:	2301      	moveq	r3, #1
 80036ea:	2300      	movne	r3, #0
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	461a      	mov	r2, r3
 80036f0:	e00c      	b.n	800370c <I2C_WaitOnFlagUntilTimeout+0x70>
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	699b      	ldr	r3, [r3, #24]
 80036f8:	43da      	mvns	r2, r3
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	4013      	ands	r3, r2
 80036fe:	b29b      	uxth	r3, r3
 8003700:	2b00      	cmp	r3, #0
 8003702:	bf0c      	ite	eq
 8003704:	2301      	moveq	r3, #1
 8003706:	2300      	movne	r3, #0
 8003708:	b2db      	uxtb	r3, r3
 800370a:	461a      	mov	r2, r3
 800370c:	79fb      	ldrb	r3, [r7, #7]
 800370e:	429a      	cmp	r2, r3
 8003710:	d116      	bne.n	8003740 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2200      	movs	r2, #0
 8003716:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2220      	movs	r2, #32
 800371c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800372c:	f043 0220 	orr.w	r2, r3, #32
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e023      	b.n	8003788 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	0c1b      	lsrs	r3, r3, #16
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b01      	cmp	r3, #1
 8003748:	d10d      	bne.n	8003766 <I2C_WaitOnFlagUntilTimeout+0xca>
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	695b      	ldr	r3, [r3, #20]
 8003750:	43da      	mvns	r2, r3
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	4013      	ands	r3, r2
 8003756:	b29b      	uxth	r3, r3
 8003758:	2b00      	cmp	r3, #0
 800375a:	bf0c      	ite	eq
 800375c:	2301      	moveq	r3, #1
 800375e:	2300      	movne	r3, #0
 8003760:	b2db      	uxtb	r3, r3
 8003762:	461a      	mov	r2, r3
 8003764:	e00c      	b.n	8003780 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	699b      	ldr	r3, [r3, #24]
 800376c:	43da      	mvns	r2, r3
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	4013      	ands	r3, r2
 8003772:	b29b      	uxth	r3, r3
 8003774:	2b00      	cmp	r3, #0
 8003776:	bf0c      	ite	eq
 8003778:	2301      	moveq	r3, #1
 800377a:	2300      	movne	r3, #0
 800377c:	b2db      	uxtb	r3, r3
 800377e:	461a      	mov	r2, r3
 8003780:	79fb      	ldrb	r3, [r7, #7]
 8003782:	429a      	cmp	r2, r3
 8003784:	d093      	beq.n	80036ae <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003786:	2300      	movs	r3, #0
}
 8003788:	4618      	mov	r0, r3
 800378a:	3710      	adds	r7, #16
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	607a      	str	r2, [r7, #4]
 800379c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800379e:	e071      	b.n	8003884 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037ae:	d123      	bne.n	80037f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037be:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80037c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2200      	movs	r2, #0
 80037ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2220      	movs	r2, #32
 80037d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e4:	f043 0204 	orr.w	r2, r3, #4
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e067      	b.n	80038c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80037fe:	d041      	beq.n	8003884 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003800:	f7fd fdb8 	bl	8001374 <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	429a      	cmp	r2, r3
 800380e:	d302      	bcc.n	8003816 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d136      	bne.n	8003884 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	0c1b      	lsrs	r3, r3, #16
 800381a:	b2db      	uxtb	r3, r3
 800381c:	2b01      	cmp	r3, #1
 800381e:	d10c      	bne.n	800383a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	43da      	mvns	r2, r3
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	4013      	ands	r3, r2
 800382c:	b29b      	uxth	r3, r3
 800382e:	2b00      	cmp	r3, #0
 8003830:	bf14      	ite	ne
 8003832:	2301      	movne	r3, #1
 8003834:	2300      	moveq	r3, #0
 8003836:	b2db      	uxtb	r3, r3
 8003838:	e00b      	b.n	8003852 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	699b      	ldr	r3, [r3, #24]
 8003840:	43da      	mvns	r2, r3
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	4013      	ands	r3, r2
 8003846:	b29b      	uxth	r3, r3
 8003848:	2b00      	cmp	r3, #0
 800384a:	bf14      	ite	ne
 800384c:	2301      	movne	r3, #1
 800384e:	2300      	moveq	r3, #0
 8003850:	b2db      	uxtb	r3, r3
 8003852:	2b00      	cmp	r3, #0
 8003854:	d016      	beq.n	8003884 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2200      	movs	r2, #0
 800385a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2220      	movs	r2, #32
 8003860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003870:	f043 0220 	orr.w	r2, r3, #32
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e021      	b.n	80038c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	0c1b      	lsrs	r3, r3, #16
 8003888:	b2db      	uxtb	r3, r3
 800388a:	2b01      	cmp	r3, #1
 800388c:	d10c      	bne.n	80038a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	695b      	ldr	r3, [r3, #20]
 8003894:	43da      	mvns	r2, r3
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	4013      	ands	r3, r2
 800389a:	b29b      	uxth	r3, r3
 800389c:	2b00      	cmp	r3, #0
 800389e:	bf14      	ite	ne
 80038a0:	2301      	movne	r3, #1
 80038a2:	2300      	moveq	r3, #0
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	e00b      	b.n	80038c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	699b      	ldr	r3, [r3, #24]
 80038ae:	43da      	mvns	r2, r3
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	4013      	ands	r3, r2
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	bf14      	ite	ne
 80038ba:	2301      	movne	r3, #1
 80038bc:	2300      	moveq	r3, #0
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	f47f af6d 	bne.w	80037a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80038c6:	2300      	movs	r3, #0
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3710      	adds	r7, #16
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038dc:	e034      	b.n	8003948 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038de:	68f8      	ldr	r0, [r7, #12]
 80038e0:	f000 f8b8 	bl	8003a54 <I2C_IsAcknowledgeFailed>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d001      	beq.n	80038ee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e034      	b.n	8003958 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80038f4:	d028      	beq.n	8003948 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038f6:	f7fd fd3d 	bl	8001374 <HAL_GetTick>
 80038fa:	4602      	mov	r2, r0
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	68ba      	ldr	r2, [r7, #8]
 8003902:	429a      	cmp	r2, r3
 8003904:	d302      	bcc.n	800390c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d11d      	bne.n	8003948 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	695b      	ldr	r3, [r3, #20]
 8003912:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003916:	2b80      	cmp	r3, #128	@ 0x80
 8003918:	d016      	beq.n	8003948 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2200      	movs	r2, #0
 800391e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2220      	movs	r2, #32
 8003924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003934:	f043 0220 	orr.w	r2, r3, #32
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e007      	b.n	8003958 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	695b      	ldr	r3, [r3, #20]
 800394e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003952:	2b80      	cmp	r3, #128	@ 0x80
 8003954:	d1c3      	bne.n	80038de <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003956:	2300      	movs	r3, #0
}
 8003958:	4618      	mov	r0, r3
 800395a:	3710      	adds	r7, #16
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800396c:	e034      	b.n	80039d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800396e:	68f8      	ldr	r0, [r7, #12]
 8003970:	f000 f870 	bl	8003a54 <I2C_IsAcknowledgeFailed>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d001      	beq.n	800397e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e034      	b.n	80039e8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003984:	d028      	beq.n	80039d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003986:	f7fd fcf5 	bl	8001374 <HAL_GetTick>
 800398a:	4602      	mov	r2, r0
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	68ba      	ldr	r2, [r7, #8]
 8003992:	429a      	cmp	r2, r3
 8003994:	d302      	bcc.n	800399c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d11d      	bne.n	80039d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	695b      	ldr	r3, [r3, #20]
 80039a2:	f003 0304 	and.w	r3, r3, #4
 80039a6:	2b04      	cmp	r3, #4
 80039a8:	d016      	beq.n	80039d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2200      	movs	r2, #0
 80039ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2220      	movs	r2, #32
 80039b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039c4:	f043 0220 	orr.w	r2, r3, #32
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e007      	b.n	80039e8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	695b      	ldr	r3, [r3, #20]
 80039de:	f003 0304 	and.w	r3, r3, #4
 80039e2:	2b04      	cmp	r3, #4
 80039e4:	d1c3      	bne.n	800396e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80039e6:	2300      	movs	r3, #0
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3710      	adds	r7, #16
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b085      	sub	sp, #20
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80039f8:	2300      	movs	r3, #0
 80039fa:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80039fc:	4b13      	ldr	r3, [pc, #76]	@ (8003a4c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	08db      	lsrs	r3, r3, #3
 8003a02:	4a13      	ldr	r2, [pc, #76]	@ (8003a50 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003a04:	fba2 2303 	umull	r2, r3, r2, r3
 8003a08:	0a1a      	lsrs	r2, r3, #8
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	4413      	add	r3, r2
 8003a10:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	3b01      	subs	r3, #1
 8003a16:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d107      	bne.n	8003a2e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a22:	f043 0220 	orr.w	r2, r3, #32
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e008      	b.n	8003a40 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a3c:	d0e9      	beq.n	8003a12 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003a3e:	2300      	movs	r3, #0
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3714      	adds	r7, #20
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr
 8003a4c:	20000000 	.word	0x20000000
 8003a50:	14f8b589 	.word	0x14f8b589

08003a54 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	695b      	ldr	r3, [r3, #20]
 8003a62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a6a:	d11b      	bne.n	8003aa4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003a74:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2220      	movs	r2, #32
 8003a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a90:	f043 0204 	orr.w	r2, r3, #4
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e000      	b.n	8003aa6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	370c      	adds	r7, #12
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr

08003ab2 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003ab2:	b480      	push	{r7}
 8003ab4:	b083      	sub	sp, #12
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003abe:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003ac2:	d103      	bne.n	8003acc <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003aca:	e007      	b.n	8003adc <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ad0:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003ad4:	d102      	bne.n	8003adc <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2208      	movs	r2, #8
 8003ada:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8003adc:	bf00      	nop
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8003aec:	4b06      	ldr	r3, [pc, #24]	@ (8003b08 <HAL_PWR_PVD_IRQHandler+0x20>)
 8003aee:	695b      	ldr	r3, [r3, #20]
 8003af0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d005      	beq.n	8003b04 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8003af8:	f000 f808 	bl	8003b0c <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8003afc:	4b02      	ldr	r3, [pc, #8]	@ (8003b08 <HAL_PWR_PVD_IRQHandler+0x20>)
 8003afe:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003b02:	615a      	str	r2, [r3, #20]
  }
}
 8003b04:	bf00      	nop
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	40013c00 	.word	0x40013c00

08003b0c <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8003b10:	bf00      	nop
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
	...

08003b1c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b086      	sub	sp, #24
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d101      	bne.n	8003b2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e267      	b.n	8003ffe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0301 	and.w	r3, r3, #1
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d075      	beq.n	8003c26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003b3a:	4b88      	ldr	r3, [pc, #544]	@ (8003d5c <HAL_RCC_OscConfig+0x240>)
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f003 030c 	and.w	r3, r3, #12
 8003b42:	2b04      	cmp	r3, #4
 8003b44:	d00c      	beq.n	8003b60 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b46:	4b85      	ldr	r3, [pc, #532]	@ (8003d5c <HAL_RCC_OscConfig+0x240>)
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003b4e:	2b08      	cmp	r3, #8
 8003b50:	d112      	bne.n	8003b78 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b52:	4b82      	ldr	r3, [pc, #520]	@ (8003d5c <HAL_RCC_OscConfig+0x240>)
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b5a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b5e:	d10b      	bne.n	8003b78 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b60:	4b7e      	ldr	r3, [pc, #504]	@ (8003d5c <HAL_RCC_OscConfig+0x240>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d05b      	beq.n	8003c24 <HAL_RCC_OscConfig+0x108>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d157      	bne.n	8003c24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e242      	b.n	8003ffe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b80:	d106      	bne.n	8003b90 <HAL_RCC_OscConfig+0x74>
 8003b82:	4b76      	ldr	r3, [pc, #472]	@ (8003d5c <HAL_RCC_OscConfig+0x240>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a75      	ldr	r2, [pc, #468]	@ (8003d5c <HAL_RCC_OscConfig+0x240>)
 8003b88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b8c:	6013      	str	r3, [r2, #0]
 8003b8e:	e01d      	b.n	8003bcc <HAL_RCC_OscConfig+0xb0>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b98:	d10c      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x98>
 8003b9a:	4b70      	ldr	r3, [pc, #448]	@ (8003d5c <HAL_RCC_OscConfig+0x240>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a6f      	ldr	r2, [pc, #444]	@ (8003d5c <HAL_RCC_OscConfig+0x240>)
 8003ba0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ba4:	6013      	str	r3, [r2, #0]
 8003ba6:	4b6d      	ldr	r3, [pc, #436]	@ (8003d5c <HAL_RCC_OscConfig+0x240>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a6c      	ldr	r2, [pc, #432]	@ (8003d5c <HAL_RCC_OscConfig+0x240>)
 8003bac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bb0:	6013      	str	r3, [r2, #0]
 8003bb2:	e00b      	b.n	8003bcc <HAL_RCC_OscConfig+0xb0>
 8003bb4:	4b69      	ldr	r3, [pc, #420]	@ (8003d5c <HAL_RCC_OscConfig+0x240>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a68      	ldr	r2, [pc, #416]	@ (8003d5c <HAL_RCC_OscConfig+0x240>)
 8003bba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bbe:	6013      	str	r3, [r2, #0]
 8003bc0:	4b66      	ldr	r3, [pc, #408]	@ (8003d5c <HAL_RCC_OscConfig+0x240>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a65      	ldr	r2, [pc, #404]	@ (8003d5c <HAL_RCC_OscConfig+0x240>)
 8003bc6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003bca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d013      	beq.n	8003bfc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd4:	f7fd fbce 	bl	8001374 <HAL_GetTick>
 8003bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bda:	e008      	b.n	8003bee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bdc:	f7fd fbca 	bl	8001374 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	2b64      	cmp	r3, #100	@ 0x64
 8003be8:	d901      	bls.n	8003bee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e207      	b.n	8003ffe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bee:	4b5b      	ldr	r3, [pc, #364]	@ (8003d5c <HAL_RCC_OscConfig+0x240>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d0f0      	beq.n	8003bdc <HAL_RCC_OscConfig+0xc0>
 8003bfa:	e014      	b.n	8003c26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bfc:	f7fd fbba 	bl	8001374 <HAL_GetTick>
 8003c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c02:	e008      	b.n	8003c16 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c04:	f7fd fbb6 	bl	8001374 <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	2b64      	cmp	r3, #100	@ 0x64
 8003c10:	d901      	bls.n	8003c16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e1f3      	b.n	8003ffe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c16:	4b51      	ldr	r3, [pc, #324]	@ (8003d5c <HAL_RCC_OscConfig+0x240>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d1f0      	bne.n	8003c04 <HAL_RCC_OscConfig+0xe8>
 8003c22:	e000      	b.n	8003c26 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0302 	and.w	r3, r3, #2
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d063      	beq.n	8003cfa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003c32:	4b4a      	ldr	r3, [pc, #296]	@ (8003d5c <HAL_RCC_OscConfig+0x240>)
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f003 030c 	and.w	r3, r3, #12
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d00b      	beq.n	8003c56 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c3e:	4b47      	ldr	r3, [pc, #284]	@ (8003d5c <HAL_RCC_OscConfig+0x240>)
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003c46:	2b08      	cmp	r3, #8
 8003c48:	d11c      	bne.n	8003c84 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c4a:	4b44      	ldr	r3, [pc, #272]	@ (8003d5c <HAL_RCC_OscConfig+0x240>)
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d116      	bne.n	8003c84 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c56:	4b41      	ldr	r3, [pc, #260]	@ (8003d5c <HAL_RCC_OscConfig+0x240>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0302 	and.w	r3, r3, #2
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d005      	beq.n	8003c6e <HAL_RCC_OscConfig+0x152>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d001      	beq.n	8003c6e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e1c7      	b.n	8003ffe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c6e:	4b3b      	ldr	r3, [pc, #236]	@ (8003d5c <HAL_RCC_OscConfig+0x240>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	00db      	lsls	r3, r3, #3
 8003c7c:	4937      	ldr	r1, [pc, #220]	@ (8003d5c <HAL_RCC_OscConfig+0x240>)
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c82:	e03a      	b.n	8003cfa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d020      	beq.n	8003cce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c8c:	4b34      	ldr	r3, [pc, #208]	@ (8003d60 <HAL_RCC_OscConfig+0x244>)
 8003c8e:	2201      	movs	r2, #1
 8003c90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c92:	f7fd fb6f 	bl	8001374 <HAL_GetTick>
 8003c96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c98:	e008      	b.n	8003cac <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c9a:	f7fd fb6b 	bl	8001374 <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	d901      	bls.n	8003cac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e1a8      	b.n	8003ffe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cac:	4b2b      	ldr	r3, [pc, #172]	@ (8003d5c <HAL_RCC_OscConfig+0x240>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0302 	and.w	r3, r3, #2
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d0f0      	beq.n	8003c9a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cb8:	4b28      	ldr	r3, [pc, #160]	@ (8003d5c <HAL_RCC_OscConfig+0x240>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	691b      	ldr	r3, [r3, #16]
 8003cc4:	00db      	lsls	r3, r3, #3
 8003cc6:	4925      	ldr	r1, [pc, #148]	@ (8003d5c <HAL_RCC_OscConfig+0x240>)
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	600b      	str	r3, [r1, #0]
 8003ccc:	e015      	b.n	8003cfa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cce:	4b24      	ldr	r3, [pc, #144]	@ (8003d60 <HAL_RCC_OscConfig+0x244>)
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd4:	f7fd fb4e 	bl	8001374 <HAL_GetTick>
 8003cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cda:	e008      	b.n	8003cee <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cdc:	f7fd fb4a 	bl	8001374 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e187      	b.n	8003ffe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cee:	4b1b      	ldr	r3, [pc, #108]	@ (8003d5c <HAL_RCC_OscConfig+0x240>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0302 	and.w	r3, r3, #2
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1f0      	bne.n	8003cdc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0308 	and.w	r3, r3, #8
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d036      	beq.n	8003d74 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d016      	beq.n	8003d3c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d0e:	4b15      	ldr	r3, [pc, #84]	@ (8003d64 <HAL_RCC_OscConfig+0x248>)
 8003d10:	2201      	movs	r2, #1
 8003d12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d14:	f7fd fb2e 	bl	8001374 <HAL_GetTick>
 8003d18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d1a:	e008      	b.n	8003d2e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d1c:	f7fd fb2a 	bl	8001374 <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d901      	bls.n	8003d2e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e167      	b.n	8003ffe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d2e:	4b0b      	ldr	r3, [pc, #44]	@ (8003d5c <HAL_RCC_OscConfig+0x240>)
 8003d30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d0f0      	beq.n	8003d1c <HAL_RCC_OscConfig+0x200>
 8003d3a:	e01b      	b.n	8003d74 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d3c:	4b09      	ldr	r3, [pc, #36]	@ (8003d64 <HAL_RCC_OscConfig+0x248>)
 8003d3e:	2200      	movs	r2, #0
 8003d40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d42:	f7fd fb17 	bl	8001374 <HAL_GetTick>
 8003d46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d48:	e00e      	b.n	8003d68 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d4a:	f7fd fb13 	bl	8001374 <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d907      	bls.n	8003d68 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	e150      	b.n	8003ffe <HAL_RCC_OscConfig+0x4e2>
 8003d5c:	40023800 	.word	0x40023800
 8003d60:	42470000 	.word	0x42470000
 8003d64:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d68:	4b88      	ldr	r3, [pc, #544]	@ (8003f8c <HAL_RCC_OscConfig+0x470>)
 8003d6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d6c:	f003 0302 	and.w	r3, r3, #2
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d1ea      	bne.n	8003d4a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0304 	and.w	r3, r3, #4
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	f000 8097 	beq.w	8003eb0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d82:	2300      	movs	r3, #0
 8003d84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d86:	4b81      	ldr	r3, [pc, #516]	@ (8003f8c <HAL_RCC_OscConfig+0x470>)
 8003d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d10f      	bne.n	8003db2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d92:	2300      	movs	r3, #0
 8003d94:	60bb      	str	r3, [r7, #8]
 8003d96:	4b7d      	ldr	r3, [pc, #500]	@ (8003f8c <HAL_RCC_OscConfig+0x470>)
 8003d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d9a:	4a7c      	ldr	r2, [pc, #496]	@ (8003f8c <HAL_RCC_OscConfig+0x470>)
 8003d9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003da0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003da2:	4b7a      	ldr	r3, [pc, #488]	@ (8003f8c <HAL_RCC_OscConfig+0x470>)
 8003da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003daa:	60bb      	str	r3, [r7, #8]
 8003dac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dae:	2301      	movs	r3, #1
 8003db0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003db2:	4b77      	ldr	r3, [pc, #476]	@ (8003f90 <HAL_RCC_OscConfig+0x474>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d118      	bne.n	8003df0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dbe:	4b74      	ldr	r3, [pc, #464]	@ (8003f90 <HAL_RCC_OscConfig+0x474>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a73      	ldr	r2, [pc, #460]	@ (8003f90 <HAL_RCC_OscConfig+0x474>)
 8003dc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dca:	f7fd fad3 	bl	8001374 <HAL_GetTick>
 8003dce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dd0:	e008      	b.n	8003de4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dd2:	f7fd facf 	bl	8001374 <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d901      	bls.n	8003de4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e10c      	b.n	8003ffe <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003de4:	4b6a      	ldr	r3, [pc, #424]	@ (8003f90 <HAL_RCC_OscConfig+0x474>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d0f0      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d106      	bne.n	8003e06 <HAL_RCC_OscConfig+0x2ea>
 8003df8:	4b64      	ldr	r3, [pc, #400]	@ (8003f8c <HAL_RCC_OscConfig+0x470>)
 8003dfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dfc:	4a63      	ldr	r2, [pc, #396]	@ (8003f8c <HAL_RCC_OscConfig+0x470>)
 8003dfe:	f043 0301 	orr.w	r3, r3, #1
 8003e02:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e04:	e01c      	b.n	8003e40 <HAL_RCC_OscConfig+0x324>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	2b05      	cmp	r3, #5
 8003e0c:	d10c      	bne.n	8003e28 <HAL_RCC_OscConfig+0x30c>
 8003e0e:	4b5f      	ldr	r3, [pc, #380]	@ (8003f8c <HAL_RCC_OscConfig+0x470>)
 8003e10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e12:	4a5e      	ldr	r2, [pc, #376]	@ (8003f8c <HAL_RCC_OscConfig+0x470>)
 8003e14:	f043 0304 	orr.w	r3, r3, #4
 8003e18:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e1a:	4b5c      	ldr	r3, [pc, #368]	@ (8003f8c <HAL_RCC_OscConfig+0x470>)
 8003e1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e1e:	4a5b      	ldr	r2, [pc, #364]	@ (8003f8c <HAL_RCC_OscConfig+0x470>)
 8003e20:	f043 0301 	orr.w	r3, r3, #1
 8003e24:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e26:	e00b      	b.n	8003e40 <HAL_RCC_OscConfig+0x324>
 8003e28:	4b58      	ldr	r3, [pc, #352]	@ (8003f8c <HAL_RCC_OscConfig+0x470>)
 8003e2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e2c:	4a57      	ldr	r2, [pc, #348]	@ (8003f8c <HAL_RCC_OscConfig+0x470>)
 8003e2e:	f023 0301 	bic.w	r3, r3, #1
 8003e32:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e34:	4b55      	ldr	r3, [pc, #340]	@ (8003f8c <HAL_RCC_OscConfig+0x470>)
 8003e36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e38:	4a54      	ldr	r2, [pc, #336]	@ (8003f8c <HAL_RCC_OscConfig+0x470>)
 8003e3a:	f023 0304 	bic.w	r3, r3, #4
 8003e3e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d015      	beq.n	8003e74 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e48:	f7fd fa94 	bl	8001374 <HAL_GetTick>
 8003e4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e4e:	e00a      	b.n	8003e66 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e50:	f7fd fa90 	bl	8001374 <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e0cb      	b.n	8003ffe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e66:	4b49      	ldr	r3, [pc, #292]	@ (8003f8c <HAL_RCC_OscConfig+0x470>)
 8003e68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e6a:	f003 0302 	and.w	r3, r3, #2
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d0ee      	beq.n	8003e50 <HAL_RCC_OscConfig+0x334>
 8003e72:	e014      	b.n	8003e9e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e74:	f7fd fa7e 	bl	8001374 <HAL_GetTick>
 8003e78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e7a:	e00a      	b.n	8003e92 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e7c:	f7fd fa7a 	bl	8001374 <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d901      	bls.n	8003e92 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e0b5      	b.n	8003ffe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e92:	4b3e      	ldr	r3, [pc, #248]	@ (8003f8c <HAL_RCC_OscConfig+0x470>)
 8003e94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e96:	f003 0302 	and.w	r3, r3, #2
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d1ee      	bne.n	8003e7c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e9e:	7dfb      	ldrb	r3, [r7, #23]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d105      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ea4:	4b39      	ldr	r3, [pc, #228]	@ (8003f8c <HAL_RCC_OscConfig+0x470>)
 8003ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea8:	4a38      	ldr	r2, [pc, #224]	@ (8003f8c <HAL_RCC_OscConfig+0x470>)
 8003eaa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003eae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	699b      	ldr	r3, [r3, #24]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	f000 80a1 	beq.w	8003ffc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003eba:	4b34      	ldr	r3, [pc, #208]	@ (8003f8c <HAL_RCC_OscConfig+0x470>)
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	f003 030c 	and.w	r3, r3, #12
 8003ec2:	2b08      	cmp	r3, #8
 8003ec4:	d05c      	beq.n	8003f80 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	699b      	ldr	r3, [r3, #24]
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d141      	bne.n	8003f52 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ece:	4b31      	ldr	r3, [pc, #196]	@ (8003f94 <HAL_RCC_OscConfig+0x478>)
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ed4:	f7fd fa4e 	bl	8001374 <HAL_GetTick>
 8003ed8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eda:	e008      	b.n	8003eee <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003edc:	f7fd fa4a 	bl	8001374 <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d901      	bls.n	8003eee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e087      	b.n	8003ffe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eee:	4b27      	ldr	r3, [pc, #156]	@ (8003f8c <HAL_RCC_OscConfig+0x470>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1f0      	bne.n	8003edc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	69da      	ldr	r2, [r3, #28]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a1b      	ldr	r3, [r3, #32]
 8003f02:	431a      	orrs	r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f08:	019b      	lsls	r3, r3, #6
 8003f0a:	431a      	orrs	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f10:	085b      	lsrs	r3, r3, #1
 8003f12:	3b01      	subs	r3, #1
 8003f14:	041b      	lsls	r3, r3, #16
 8003f16:	431a      	orrs	r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f1c:	061b      	lsls	r3, r3, #24
 8003f1e:	491b      	ldr	r1, [pc, #108]	@ (8003f8c <HAL_RCC_OscConfig+0x470>)
 8003f20:	4313      	orrs	r3, r2
 8003f22:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f24:	4b1b      	ldr	r3, [pc, #108]	@ (8003f94 <HAL_RCC_OscConfig+0x478>)
 8003f26:	2201      	movs	r2, #1
 8003f28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f2a:	f7fd fa23 	bl	8001374 <HAL_GetTick>
 8003f2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f30:	e008      	b.n	8003f44 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f32:	f7fd fa1f 	bl	8001374 <HAL_GetTick>
 8003f36:	4602      	mov	r2, r0
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d901      	bls.n	8003f44 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	e05c      	b.n	8003ffe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f44:	4b11      	ldr	r3, [pc, #68]	@ (8003f8c <HAL_RCC_OscConfig+0x470>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d0f0      	beq.n	8003f32 <HAL_RCC_OscConfig+0x416>
 8003f50:	e054      	b.n	8003ffc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f52:	4b10      	ldr	r3, [pc, #64]	@ (8003f94 <HAL_RCC_OscConfig+0x478>)
 8003f54:	2200      	movs	r2, #0
 8003f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f58:	f7fd fa0c 	bl	8001374 <HAL_GetTick>
 8003f5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f5e:	e008      	b.n	8003f72 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f60:	f7fd fa08 	bl	8001374 <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d901      	bls.n	8003f72 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e045      	b.n	8003ffe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f72:	4b06      	ldr	r3, [pc, #24]	@ (8003f8c <HAL_RCC_OscConfig+0x470>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d1f0      	bne.n	8003f60 <HAL_RCC_OscConfig+0x444>
 8003f7e:	e03d      	b.n	8003ffc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	699b      	ldr	r3, [r3, #24]
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d107      	bne.n	8003f98 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e038      	b.n	8003ffe <HAL_RCC_OscConfig+0x4e2>
 8003f8c:	40023800 	.word	0x40023800
 8003f90:	40007000 	.word	0x40007000
 8003f94:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f98:	4b1b      	ldr	r3, [pc, #108]	@ (8004008 <HAL_RCC_OscConfig+0x4ec>)
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d028      	beq.n	8003ff8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d121      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d11a      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003fc8:	4013      	ands	r3, r2
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003fce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d111      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fde:	085b      	lsrs	r3, r3, #1
 8003fe0:	3b01      	subs	r3, #1
 8003fe2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d107      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ff2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d001      	beq.n	8003ffc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e000      	b.n	8003ffe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3718      	adds	r7, #24
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	40023800 	.word	0x40023800

0800400c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d101      	bne.n	8004020 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e0cc      	b.n	80041ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004020:	4b68      	ldr	r3, [pc, #416]	@ (80041c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0307 	and.w	r3, r3, #7
 8004028:	683a      	ldr	r2, [r7, #0]
 800402a:	429a      	cmp	r2, r3
 800402c:	d90c      	bls.n	8004048 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800402e:	4b65      	ldr	r3, [pc, #404]	@ (80041c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004030:	683a      	ldr	r2, [r7, #0]
 8004032:	b2d2      	uxtb	r2, r2
 8004034:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004036:	4b63      	ldr	r3, [pc, #396]	@ (80041c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0307 	and.w	r3, r3, #7
 800403e:	683a      	ldr	r2, [r7, #0]
 8004040:	429a      	cmp	r2, r3
 8004042:	d001      	beq.n	8004048 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e0b8      	b.n	80041ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0302 	and.w	r3, r3, #2
 8004050:	2b00      	cmp	r3, #0
 8004052:	d020      	beq.n	8004096 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0304 	and.w	r3, r3, #4
 800405c:	2b00      	cmp	r3, #0
 800405e:	d005      	beq.n	800406c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004060:	4b59      	ldr	r3, [pc, #356]	@ (80041c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	4a58      	ldr	r2, [pc, #352]	@ (80041c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004066:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800406a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0308 	and.w	r3, r3, #8
 8004074:	2b00      	cmp	r3, #0
 8004076:	d005      	beq.n	8004084 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004078:	4b53      	ldr	r3, [pc, #332]	@ (80041c8 <HAL_RCC_ClockConfig+0x1bc>)
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	4a52      	ldr	r2, [pc, #328]	@ (80041c8 <HAL_RCC_ClockConfig+0x1bc>)
 800407e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004082:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004084:	4b50      	ldr	r3, [pc, #320]	@ (80041c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	494d      	ldr	r1, [pc, #308]	@ (80041c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004092:	4313      	orrs	r3, r2
 8004094:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0301 	and.w	r3, r3, #1
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d044      	beq.n	800412c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d107      	bne.n	80040ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040aa:	4b47      	ldr	r3, [pc, #284]	@ (80041c8 <HAL_RCC_ClockConfig+0x1bc>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d119      	bne.n	80040ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e07f      	b.n	80041ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d003      	beq.n	80040ca <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040c6:	2b03      	cmp	r3, #3
 80040c8:	d107      	bne.n	80040da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040ca:	4b3f      	ldr	r3, [pc, #252]	@ (80041c8 <HAL_RCC_ClockConfig+0x1bc>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d109      	bne.n	80040ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e06f      	b.n	80041ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040da:	4b3b      	ldr	r3, [pc, #236]	@ (80041c8 <HAL_RCC_ClockConfig+0x1bc>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0302 	and.w	r3, r3, #2
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d101      	bne.n	80040ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e067      	b.n	80041ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040ea:	4b37      	ldr	r3, [pc, #220]	@ (80041c8 <HAL_RCC_ClockConfig+0x1bc>)
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f023 0203 	bic.w	r2, r3, #3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	4934      	ldr	r1, [pc, #208]	@ (80041c8 <HAL_RCC_ClockConfig+0x1bc>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040fc:	f7fd f93a 	bl	8001374 <HAL_GetTick>
 8004100:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004102:	e00a      	b.n	800411a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004104:	f7fd f936 	bl	8001374 <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004112:	4293      	cmp	r3, r2
 8004114:	d901      	bls.n	800411a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e04f      	b.n	80041ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800411a:	4b2b      	ldr	r3, [pc, #172]	@ (80041c8 <HAL_RCC_ClockConfig+0x1bc>)
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	f003 020c 	and.w	r2, r3, #12
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	429a      	cmp	r2, r3
 800412a:	d1eb      	bne.n	8004104 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800412c:	4b25      	ldr	r3, [pc, #148]	@ (80041c4 <HAL_RCC_ClockConfig+0x1b8>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0307 	and.w	r3, r3, #7
 8004134:	683a      	ldr	r2, [r7, #0]
 8004136:	429a      	cmp	r2, r3
 8004138:	d20c      	bcs.n	8004154 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800413a:	4b22      	ldr	r3, [pc, #136]	@ (80041c4 <HAL_RCC_ClockConfig+0x1b8>)
 800413c:	683a      	ldr	r2, [r7, #0]
 800413e:	b2d2      	uxtb	r2, r2
 8004140:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004142:	4b20      	ldr	r3, [pc, #128]	@ (80041c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0307 	and.w	r3, r3, #7
 800414a:	683a      	ldr	r2, [r7, #0]
 800414c:	429a      	cmp	r2, r3
 800414e:	d001      	beq.n	8004154 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e032      	b.n	80041ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0304 	and.w	r3, r3, #4
 800415c:	2b00      	cmp	r3, #0
 800415e:	d008      	beq.n	8004172 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004160:	4b19      	ldr	r3, [pc, #100]	@ (80041c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	4916      	ldr	r1, [pc, #88]	@ (80041c8 <HAL_RCC_ClockConfig+0x1bc>)
 800416e:	4313      	orrs	r3, r2
 8004170:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0308 	and.w	r3, r3, #8
 800417a:	2b00      	cmp	r3, #0
 800417c:	d009      	beq.n	8004192 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800417e:	4b12      	ldr	r3, [pc, #72]	@ (80041c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	00db      	lsls	r3, r3, #3
 800418c:	490e      	ldr	r1, [pc, #56]	@ (80041c8 <HAL_RCC_ClockConfig+0x1bc>)
 800418e:	4313      	orrs	r3, r2
 8004190:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004192:	f000 f821 	bl	80041d8 <HAL_RCC_GetSysClockFreq>
 8004196:	4602      	mov	r2, r0
 8004198:	4b0b      	ldr	r3, [pc, #44]	@ (80041c8 <HAL_RCC_ClockConfig+0x1bc>)
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	091b      	lsrs	r3, r3, #4
 800419e:	f003 030f 	and.w	r3, r3, #15
 80041a2:	490a      	ldr	r1, [pc, #40]	@ (80041cc <HAL_RCC_ClockConfig+0x1c0>)
 80041a4:	5ccb      	ldrb	r3, [r1, r3]
 80041a6:	fa22 f303 	lsr.w	r3, r2, r3
 80041aa:	4a09      	ldr	r2, [pc, #36]	@ (80041d0 <HAL_RCC_ClockConfig+0x1c4>)
 80041ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80041ae:	4b09      	ldr	r3, [pc, #36]	@ (80041d4 <HAL_RCC_ClockConfig+0x1c8>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4618      	mov	r0, r3
 80041b4:	f7fc ff66 	bl	8001084 <HAL_InitTick>

  return HAL_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3710      	adds	r7, #16
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	40023c00 	.word	0x40023c00
 80041c8:	40023800 	.word	0x40023800
 80041cc:	08005f8c 	.word	0x08005f8c
 80041d0:	20000000 	.word	0x20000000
 80041d4:	20000004 	.word	0x20000004

080041d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041dc:	b090      	sub	sp, #64	@ 0x40
 80041de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80041e0:	2300      	movs	r3, #0
 80041e2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80041e4:	2300      	movs	r3, #0
 80041e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80041e8:	2300      	movs	r3, #0
 80041ea:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80041ec:	2300      	movs	r3, #0
 80041ee:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041f0:	4b59      	ldr	r3, [pc, #356]	@ (8004358 <HAL_RCC_GetSysClockFreq+0x180>)
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	f003 030c 	and.w	r3, r3, #12
 80041f8:	2b08      	cmp	r3, #8
 80041fa:	d00d      	beq.n	8004218 <HAL_RCC_GetSysClockFreq+0x40>
 80041fc:	2b08      	cmp	r3, #8
 80041fe:	f200 80a1 	bhi.w	8004344 <HAL_RCC_GetSysClockFreq+0x16c>
 8004202:	2b00      	cmp	r3, #0
 8004204:	d002      	beq.n	800420c <HAL_RCC_GetSysClockFreq+0x34>
 8004206:	2b04      	cmp	r3, #4
 8004208:	d003      	beq.n	8004212 <HAL_RCC_GetSysClockFreq+0x3a>
 800420a:	e09b      	b.n	8004344 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800420c:	4b53      	ldr	r3, [pc, #332]	@ (800435c <HAL_RCC_GetSysClockFreq+0x184>)
 800420e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004210:	e09b      	b.n	800434a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004212:	4b53      	ldr	r3, [pc, #332]	@ (8004360 <HAL_RCC_GetSysClockFreq+0x188>)
 8004214:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004216:	e098      	b.n	800434a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004218:	4b4f      	ldr	r3, [pc, #316]	@ (8004358 <HAL_RCC_GetSysClockFreq+0x180>)
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004220:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004222:	4b4d      	ldr	r3, [pc, #308]	@ (8004358 <HAL_RCC_GetSysClockFreq+0x180>)
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d028      	beq.n	8004280 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800422e:	4b4a      	ldr	r3, [pc, #296]	@ (8004358 <HAL_RCC_GetSysClockFreq+0x180>)
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	099b      	lsrs	r3, r3, #6
 8004234:	2200      	movs	r2, #0
 8004236:	623b      	str	r3, [r7, #32]
 8004238:	627a      	str	r2, [r7, #36]	@ 0x24
 800423a:	6a3b      	ldr	r3, [r7, #32]
 800423c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004240:	2100      	movs	r1, #0
 8004242:	4b47      	ldr	r3, [pc, #284]	@ (8004360 <HAL_RCC_GetSysClockFreq+0x188>)
 8004244:	fb03 f201 	mul.w	r2, r3, r1
 8004248:	2300      	movs	r3, #0
 800424a:	fb00 f303 	mul.w	r3, r0, r3
 800424e:	4413      	add	r3, r2
 8004250:	4a43      	ldr	r2, [pc, #268]	@ (8004360 <HAL_RCC_GetSysClockFreq+0x188>)
 8004252:	fba0 1202 	umull	r1, r2, r0, r2
 8004256:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004258:	460a      	mov	r2, r1
 800425a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800425c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800425e:	4413      	add	r3, r2
 8004260:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004262:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004264:	2200      	movs	r2, #0
 8004266:	61bb      	str	r3, [r7, #24]
 8004268:	61fa      	str	r2, [r7, #28]
 800426a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800426e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004272:	f7fb fffd 	bl	8000270 <__aeabi_uldivmod>
 8004276:	4602      	mov	r2, r0
 8004278:	460b      	mov	r3, r1
 800427a:	4613      	mov	r3, r2
 800427c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800427e:	e053      	b.n	8004328 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004280:	4b35      	ldr	r3, [pc, #212]	@ (8004358 <HAL_RCC_GetSysClockFreq+0x180>)
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	099b      	lsrs	r3, r3, #6
 8004286:	2200      	movs	r2, #0
 8004288:	613b      	str	r3, [r7, #16]
 800428a:	617a      	str	r2, [r7, #20]
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004292:	f04f 0b00 	mov.w	fp, #0
 8004296:	4652      	mov	r2, sl
 8004298:	465b      	mov	r3, fp
 800429a:	f04f 0000 	mov.w	r0, #0
 800429e:	f04f 0100 	mov.w	r1, #0
 80042a2:	0159      	lsls	r1, r3, #5
 80042a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042a8:	0150      	lsls	r0, r2, #5
 80042aa:	4602      	mov	r2, r0
 80042ac:	460b      	mov	r3, r1
 80042ae:	ebb2 080a 	subs.w	r8, r2, sl
 80042b2:	eb63 090b 	sbc.w	r9, r3, fp
 80042b6:	f04f 0200 	mov.w	r2, #0
 80042ba:	f04f 0300 	mov.w	r3, #0
 80042be:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80042c2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80042c6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80042ca:	ebb2 0408 	subs.w	r4, r2, r8
 80042ce:	eb63 0509 	sbc.w	r5, r3, r9
 80042d2:	f04f 0200 	mov.w	r2, #0
 80042d6:	f04f 0300 	mov.w	r3, #0
 80042da:	00eb      	lsls	r3, r5, #3
 80042dc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042e0:	00e2      	lsls	r2, r4, #3
 80042e2:	4614      	mov	r4, r2
 80042e4:	461d      	mov	r5, r3
 80042e6:	eb14 030a 	adds.w	r3, r4, sl
 80042ea:	603b      	str	r3, [r7, #0]
 80042ec:	eb45 030b 	adc.w	r3, r5, fp
 80042f0:	607b      	str	r3, [r7, #4]
 80042f2:	f04f 0200 	mov.w	r2, #0
 80042f6:	f04f 0300 	mov.w	r3, #0
 80042fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80042fe:	4629      	mov	r1, r5
 8004300:	028b      	lsls	r3, r1, #10
 8004302:	4621      	mov	r1, r4
 8004304:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004308:	4621      	mov	r1, r4
 800430a:	028a      	lsls	r2, r1, #10
 800430c:	4610      	mov	r0, r2
 800430e:	4619      	mov	r1, r3
 8004310:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004312:	2200      	movs	r2, #0
 8004314:	60bb      	str	r3, [r7, #8]
 8004316:	60fa      	str	r2, [r7, #12]
 8004318:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800431c:	f7fb ffa8 	bl	8000270 <__aeabi_uldivmod>
 8004320:	4602      	mov	r2, r0
 8004322:	460b      	mov	r3, r1
 8004324:	4613      	mov	r3, r2
 8004326:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004328:	4b0b      	ldr	r3, [pc, #44]	@ (8004358 <HAL_RCC_GetSysClockFreq+0x180>)
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	0c1b      	lsrs	r3, r3, #16
 800432e:	f003 0303 	and.w	r3, r3, #3
 8004332:	3301      	adds	r3, #1
 8004334:	005b      	lsls	r3, r3, #1
 8004336:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004338:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800433a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800433c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004340:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004342:	e002      	b.n	800434a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004344:	4b05      	ldr	r3, [pc, #20]	@ (800435c <HAL_RCC_GetSysClockFreq+0x184>)
 8004346:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004348:	bf00      	nop
    }
  }
  return sysclockfreq;
 800434a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800434c:	4618      	mov	r0, r3
 800434e:	3740      	adds	r7, #64	@ 0x40
 8004350:	46bd      	mov	sp, r7
 8004352:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004356:	bf00      	nop
 8004358:	40023800 	.word	0x40023800
 800435c:	00f42400 	.word	0x00f42400
 8004360:	017d7840 	.word	0x017d7840

08004364 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004364:	b480      	push	{r7}
 8004366:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004368:	4b03      	ldr	r3, [pc, #12]	@ (8004378 <HAL_RCC_GetHCLKFreq+0x14>)
 800436a:	681b      	ldr	r3, [r3, #0]
}
 800436c:	4618      	mov	r0, r3
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
 8004376:	bf00      	nop
 8004378:	20000000 	.word	0x20000000

0800437c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004380:	f7ff fff0 	bl	8004364 <HAL_RCC_GetHCLKFreq>
 8004384:	4602      	mov	r2, r0
 8004386:	4b05      	ldr	r3, [pc, #20]	@ (800439c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	0a9b      	lsrs	r3, r3, #10
 800438c:	f003 0307 	and.w	r3, r3, #7
 8004390:	4903      	ldr	r1, [pc, #12]	@ (80043a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004392:	5ccb      	ldrb	r3, [r1, r3]
 8004394:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004398:	4618      	mov	r0, r3
 800439a:	bd80      	pop	{r7, pc}
 800439c:	40023800 	.word	0x40023800
 80043a0:	08005f9c 	.word	0x08005f9c

080043a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80043a8:	f7ff ffdc 	bl	8004364 <HAL_RCC_GetHCLKFreq>
 80043ac:	4602      	mov	r2, r0
 80043ae:	4b05      	ldr	r3, [pc, #20]	@ (80043c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	0b5b      	lsrs	r3, r3, #13
 80043b4:	f003 0307 	and.w	r3, r3, #7
 80043b8:	4903      	ldr	r1, [pc, #12]	@ (80043c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043ba:	5ccb      	ldrb	r3, [r1, r3]
 80043bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	40023800 	.word	0x40023800
 80043c8:	08005f9c 	.word	0x08005f9c

080043cc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	220f      	movs	r2, #15
 80043da:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80043dc:	4b12      	ldr	r3, [pc, #72]	@ (8004428 <HAL_RCC_GetClockConfig+0x5c>)
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	f003 0203 	and.w	r2, r3, #3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80043e8:	4b0f      	ldr	r3, [pc, #60]	@ (8004428 <HAL_RCC_GetClockConfig+0x5c>)
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80043f4:	4b0c      	ldr	r3, [pc, #48]	@ (8004428 <HAL_RCC_GetClockConfig+0x5c>)
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004400:	4b09      	ldr	r3, [pc, #36]	@ (8004428 <HAL_RCC_GetClockConfig+0x5c>)
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	08db      	lsrs	r3, r3, #3
 8004406:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800440e:	4b07      	ldr	r3, [pc, #28]	@ (800442c <HAL_RCC_GetClockConfig+0x60>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0207 	and.w	r2, r3, #7
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	601a      	str	r2, [r3, #0]
}
 800441a:	bf00      	nop
 800441c:	370c      	adds	r7, #12
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop
 8004428:	40023800 	.word	0x40023800
 800442c:	40023c00 	.word	0x40023c00

08004430 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b082      	sub	sp, #8
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d101      	bne.n	8004442 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e041      	b.n	80044c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004448:	b2db      	uxtb	r3, r3
 800444a:	2b00      	cmp	r3, #0
 800444c:	d106      	bne.n	800445c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f7fc fdb4 	bl	8000fc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2202      	movs	r2, #2
 8004460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	3304      	adds	r3, #4
 800446c:	4619      	mov	r1, r3
 800446e:	4610      	mov	r0, r2
 8004470:	f000 fce8 	bl	8004e44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3708      	adds	r7, #8
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
	...

080044d0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b085      	sub	sp, #20
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d001      	beq.n	80044e8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e046      	b.n	8004576 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2202      	movs	r2, #2
 80044ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a23      	ldr	r2, [pc, #140]	@ (8004584 <HAL_TIM_Base_Start+0xb4>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d022      	beq.n	8004540 <HAL_TIM_Base_Start+0x70>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004502:	d01d      	beq.n	8004540 <HAL_TIM_Base_Start+0x70>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a1f      	ldr	r2, [pc, #124]	@ (8004588 <HAL_TIM_Base_Start+0xb8>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d018      	beq.n	8004540 <HAL_TIM_Base_Start+0x70>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a1e      	ldr	r2, [pc, #120]	@ (800458c <HAL_TIM_Base_Start+0xbc>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d013      	beq.n	8004540 <HAL_TIM_Base_Start+0x70>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a1c      	ldr	r2, [pc, #112]	@ (8004590 <HAL_TIM_Base_Start+0xc0>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d00e      	beq.n	8004540 <HAL_TIM_Base_Start+0x70>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a1b      	ldr	r2, [pc, #108]	@ (8004594 <HAL_TIM_Base_Start+0xc4>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d009      	beq.n	8004540 <HAL_TIM_Base_Start+0x70>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a19      	ldr	r2, [pc, #100]	@ (8004598 <HAL_TIM_Base_Start+0xc8>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d004      	beq.n	8004540 <HAL_TIM_Base_Start+0x70>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a18      	ldr	r2, [pc, #96]	@ (800459c <HAL_TIM_Base_Start+0xcc>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d111      	bne.n	8004564 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f003 0307 	and.w	r3, r3, #7
 800454a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2b06      	cmp	r3, #6
 8004550:	d010      	beq.n	8004574 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f042 0201 	orr.w	r2, r2, #1
 8004560:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004562:	e007      	b.n	8004574 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f042 0201 	orr.w	r2, r2, #1
 8004572:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004574:	2300      	movs	r3, #0
}
 8004576:	4618      	mov	r0, r3
 8004578:	3714      	adds	r7, #20
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop
 8004584:	40010000 	.word	0x40010000
 8004588:	40000400 	.word	0x40000400
 800458c:	40000800 	.word	0x40000800
 8004590:	40000c00 	.word	0x40000c00
 8004594:	40010400 	.word	0x40010400
 8004598:	40014000 	.word	0x40014000
 800459c:	40001800 	.word	0x40001800

080045a0 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	6a1a      	ldr	r2, [r3, #32]
 80045ae:	f241 1311 	movw	r3, #4369	@ 0x1111
 80045b2:	4013      	ands	r3, r2
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d10f      	bne.n	80045d8 <HAL_TIM_Base_Stop+0x38>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	6a1a      	ldr	r2, [r3, #32]
 80045be:	f240 4344 	movw	r3, #1092	@ 0x444
 80045c2:	4013      	ands	r3, r2
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d107      	bne.n	80045d8 <HAL_TIM_Base_Stop+0x38>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f022 0201 	bic.w	r2, r2, #1
 80045d6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	370c      	adds	r7, #12
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr
	...

080045f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b085      	sub	sp, #20
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	2b01      	cmp	r3, #1
 8004602:	d001      	beq.n	8004608 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e04e      	b.n	80046a6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2202      	movs	r2, #2
 800460c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68da      	ldr	r2, [r3, #12]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f042 0201 	orr.w	r2, r2, #1
 800461e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a23      	ldr	r2, [pc, #140]	@ (80046b4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d022      	beq.n	8004670 <HAL_TIM_Base_Start_IT+0x80>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004632:	d01d      	beq.n	8004670 <HAL_TIM_Base_Start_IT+0x80>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a1f      	ldr	r2, [pc, #124]	@ (80046b8 <HAL_TIM_Base_Start_IT+0xc8>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d018      	beq.n	8004670 <HAL_TIM_Base_Start_IT+0x80>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a1e      	ldr	r2, [pc, #120]	@ (80046bc <HAL_TIM_Base_Start_IT+0xcc>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d013      	beq.n	8004670 <HAL_TIM_Base_Start_IT+0x80>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a1c      	ldr	r2, [pc, #112]	@ (80046c0 <HAL_TIM_Base_Start_IT+0xd0>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d00e      	beq.n	8004670 <HAL_TIM_Base_Start_IT+0x80>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a1b      	ldr	r2, [pc, #108]	@ (80046c4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d009      	beq.n	8004670 <HAL_TIM_Base_Start_IT+0x80>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a19      	ldr	r2, [pc, #100]	@ (80046c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d004      	beq.n	8004670 <HAL_TIM_Base_Start_IT+0x80>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a18      	ldr	r2, [pc, #96]	@ (80046cc <HAL_TIM_Base_Start_IT+0xdc>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d111      	bne.n	8004694 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	f003 0307 	and.w	r3, r3, #7
 800467a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2b06      	cmp	r3, #6
 8004680:	d010      	beq.n	80046a4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f042 0201 	orr.w	r2, r2, #1
 8004690:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004692:	e007      	b.n	80046a4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f042 0201 	orr.w	r2, r2, #1
 80046a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3714      	adds	r7, #20
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr
 80046b2:	bf00      	nop
 80046b4:	40010000 	.word	0x40010000
 80046b8:	40000400 	.word	0x40000400
 80046bc:	40000800 	.word	0x40000800
 80046c0:	40000c00 	.word	0x40000c00
 80046c4:	40010400 	.word	0x40010400
 80046c8:	40014000 	.word	0x40014000
 80046cc:	40001800 	.word	0x40001800

080046d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b082      	sub	sp, #8
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d101      	bne.n	80046e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e041      	b.n	8004766 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d106      	bne.n	80046fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f7fc fc3e 	bl	8000f78 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2202      	movs	r2, #2
 8004700:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	3304      	adds	r3, #4
 800470c:	4619      	mov	r1, r3
 800470e:	4610      	mov	r0, r2
 8004710:	f000 fb98 	bl	8004e44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	3708      	adds	r7, #8
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
	...

08004770 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d109      	bne.n	8004794 <HAL_TIM_PWM_Start+0x24>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004786:	b2db      	uxtb	r3, r3
 8004788:	2b01      	cmp	r3, #1
 800478a:	bf14      	ite	ne
 800478c:	2301      	movne	r3, #1
 800478e:	2300      	moveq	r3, #0
 8004790:	b2db      	uxtb	r3, r3
 8004792:	e022      	b.n	80047da <HAL_TIM_PWM_Start+0x6a>
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	2b04      	cmp	r3, #4
 8004798:	d109      	bne.n	80047ae <HAL_TIM_PWM_Start+0x3e>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	bf14      	ite	ne
 80047a6:	2301      	movne	r3, #1
 80047a8:	2300      	moveq	r3, #0
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	e015      	b.n	80047da <HAL_TIM_PWM_Start+0x6a>
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	2b08      	cmp	r3, #8
 80047b2:	d109      	bne.n	80047c8 <HAL_TIM_PWM_Start+0x58>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	2b01      	cmp	r3, #1
 80047be:	bf14      	ite	ne
 80047c0:	2301      	movne	r3, #1
 80047c2:	2300      	moveq	r3, #0
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	e008      	b.n	80047da <HAL_TIM_PWM_Start+0x6a>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	bf14      	ite	ne
 80047d4:	2301      	movne	r3, #1
 80047d6:	2300      	moveq	r3, #0
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d001      	beq.n	80047e2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e07c      	b.n	80048dc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d104      	bne.n	80047f2 <HAL_TIM_PWM_Start+0x82>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2202      	movs	r2, #2
 80047ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80047f0:	e013      	b.n	800481a <HAL_TIM_PWM_Start+0xaa>
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	2b04      	cmp	r3, #4
 80047f6:	d104      	bne.n	8004802 <HAL_TIM_PWM_Start+0x92>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2202      	movs	r2, #2
 80047fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004800:	e00b      	b.n	800481a <HAL_TIM_PWM_Start+0xaa>
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	2b08      	cmp	r3, #8
 8004806:	d104      	bne.n	8004812 <HAL_TIM_PWM_Start+0xa2>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2202      	movs	r2, #2
 800480c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004810:	e003      	b.n	800481a <HAL_TIM_PWM_Start+0xaa>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2202      	movs	r2, #2
 8004816:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	2201      	movs	r2, #1
 8004820:	6839      	ldr	r1, [r7, #0]
 8004822:	4618      	mov	r0, r3
 8004824:	f000 fdfe 	bl	8005424 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a2d      	ldr	r2, [pc, #180]	@ (80048e4 <HAL_TIM_PWM_Start+0x174>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d004      	beq.n	800483c <HAL_TIM_PWM_Start+0xcc>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a2c      	ldr	r2, [pc, #176]	@ (80048e8 <HAL_TIM_PWM_Start+0x178>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d101      	bne.n	8004840 <HAL_TIM_PWM_Start+0xd0>
 800483c:	2301      	movs	r3, #1
 800483e:	e000      	b.n	8004842 <HAL_TIM_PWM_Start+0xd2>
 8004840:	2300      	movs	r3, #0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d007      	beq.n	8004856 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004854:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a22      	ldr	r2, [pc, #136]	@ (80048e4 <HAL_TIM_PWM_Start+0x174>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d022      	beq.n	80048a6 <HAL_TIM_PWM_Start+0x136>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004868:	d01d      	beq.n	80048a6 <HAL_TIM_PWM_Start+0x136>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a1f      	ldr	r2, [pc, #124]	@ (80048ec <HAL_TIM_PWM_Start+0x17c>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d018      	beq.n	80048a6 <HAL_TIM_PWM_Start+0x136>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a1d      	ldr	r2, [pc, #116]	@ (80048f0 <HAL_TIM_PWM_Start+0x180>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d013      	beq.n	80048a6 <HAL_TIM_PWM_Start+0x136>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a1c      	ldr	r2, [pc, #112]	@ (80048f4 <HAL_TIM_PWM_Start+0x184>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d00e      	beq.n	80048a6 <HAL_TIM_PWM_Start+0x136>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a16      	ldr	r2, [pc, #88]	@ (80048e8 <HAL_TIM_PWM_Start+0x178>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d009      	beq.n	80048a6 <HAL_TIM_PWM_Start+0x136>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a18      	ldr	r2, [pc, #96]	@ (80048f8 <HAL_TIM_PWM_Start+0x188>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d004      	beq.n	80048a6 <HAL_TIM_PWM_Start+0x136>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a16      	ldr	r2, [pc, #88]	@ (80048fc <HAL_TIM_PWM_Start+0x18c>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d111      	bne.n	80048ca <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	f003 0307 	and.w	r3, r3, #7
 80048b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2b06      	cmp	r3, #6
 80048b6:	d010      	beq.n	80048da <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f042 0201 	orr.w	r2, r2, #1
 80048c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048c8:	e007      	b.n	80048da <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f042 0201 	orr.w	r2, r2, #1
 80048d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048da:	2300      	movs	r3, #0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3710      	adds	r7, #16
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	40010000 	.word	0x40010000
 80048e8:	40010400 	.word	0x40010400
 80048ec:	40000400 	.word	0x40000400
 80048f0:	40000800 	.word	0x40000800
 80048f4:	40000c00 	.word	0x40000c00
 80048f8:	40014000 	.word	0x40014000
 80048fc:	40001800 	.word	0x40001800

08004900 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	f003 0302 	and.w	r3, r3, #2
 800491e:	2b00      	cmp	r3, #0
 8004920:	d020      	beq.n	8004964 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f003 0302 	and.w	r3, r3, #2
 8004928:	2b00      	cmp	r3, #0
 800492a:	d01b      	beq.n	8004964 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f06f 0202 	mvn.w	r2, #2
 8004934:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2201      	movs	r2, #1
 800493a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	699b      	ldr	r3, [r3, #24]
 8004942:	f003 0303 	and.w	r3, r3, #3
 8004946:	2b00      	cmp	r3, #0
 8004948:	d003      	beq.n	8004952 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 fa5b 	bl	8004e06 <HAL_TIM_IC_CaptureCallback>
 8004950:	e005      	b.n	800495e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 fa4d 	bl	8004df2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f000 fa5e 	bl	8004e1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	f003 0304 	and.w	r3, r3, #4
 800496a:	2b00      	cmp	r3, #0
 800496c:	d020      	beq.n	80049b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f003 0304 	and.w	r3, r3, #4
 8004974:	2b00      	cmp	r3, #0
 8004976:	d01b      	beq.n	80049b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f06f 0204 	mvn.w	r2, #4
 8004980:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2202      	movs	r2, #2
 8004986:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	699b      	ldr	r3, [r3, #24]
 800498e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004992:	2b00      	cmp	r3, #0
 8004994:	d003      	beq.n	800499e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 fa35 	bl	8004e06 <HAL_TIM_IC_CaptureCallback>
 800499c:	e005      	b.n	80049aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f000 fa27 	bl	8004df2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f000 fa38 	bl	8004e1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	f003 0308 	and.w	r3, r3, #8
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d020      	beq.n	80049fc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f003 0308 	and.w	r3, r3, #8
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d01b      	beq.n	80049fc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f06f 0208 	mvn.w	r2, #8
 80049cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2204      	movs	r2, #4
 80049d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	69db      	ldr	r3, [r3, #28]
 80049da:	f003 0303 	and.w	r3, r3, #3
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d003      	beq.n	80049ea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 fa0f 	bl	8004e06 <HAL_TIM_IC_CaptureCallback>
 80049e8:	e005      	b.n	80049f6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 fa01 	bl	8004df2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f000 fa12 	bl	8004e1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	f003 0310 	and.w	r3, r3, #16
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d020      	beq.n	8004a48 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f003 0310 	and.w	r3, r3, #16
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d01b      	beq.n	8004a48 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f06f 0210 	mvn.w	r2, #16
 8004a18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2208      	movs	r2, #8
 8004a1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	69db      	ldr	r3, [r3, #28]
 8004a26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d003      	beq.n	8004a36 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 f9e9 	bl	8004e06 <HAL_TIM_IC_CaptureCallback>
 8004a34:	e005      	b.n	8004a42 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 f9db 	bl	8004df2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f000 f9ec 	bl	8004e1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	f003 0301 	and.w	r3, r3, #1
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d00c      	beq.n	8004a6c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f003 0301 	and.w	r3, r3, #1
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d007      	beq.n	8004a6c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f06f 0201 	mvn.w	r2, #1
 8004a64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f7fc f9f0 	bl	8000e4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d00c      	beq.n	8004a90 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d007      	beq.n	8004a90 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004a88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 fd76 	bl	800557c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d00c      	beq.n	8004ab4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d007      	beq.n	8004ab4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004aac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 f9bd 	bl	8004e2e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	f003 0320 	and.w	r3, r3, #32
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d00c      	beq.n	8004ad8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f003 0320 	and.w	r3, r3, #32
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d007      	beq.n	8004ad8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f06f 0220 	mvn.w	r2, #32
 8004ad0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 fd48 	bl	8005568 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ad8:	bf00      	nop
 8004ada:	3710      	adds	r7, #16
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b086      	sub	sp, #24
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	60f8      	str	r0, [r7, #12]
 8004ae8:	60b9      	str	r1, [r7, #8]
 8004aea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004aec:	2300      	movs	r3, #0
 8004aee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d101      	bne.n	8004afe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004afa:	2302      	movs	r3, #2
 8004afc:	e0ae      	b.n	8004c5c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2201      	movs	r2, #1
 8004b02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2b0c      	cmp	r3, #12
 8004b0a:	f200 809f 	bhi.w	8004c4c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004b0e:	a201      	add	r2, pc, #4	@ (adr r2, 8004b14 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b14:	08004b49 	.word	0x08004b49
 8004b18:	08004c4d 	.word	0x08004c4d
 8004b1c:	08004c4d 	.word	0x08004c4d
 8004b20:	08004c4d 	.word	0x08004c4d
 8004b24:	08004b89 	.word	0x08004b89
 8004b28:	08004c4d 	.word	0x08004c4d
 8004b2c:	08004c4d 	.word	0x08004c4d
 8004b30:	08004c4d 	.word	0x08004c4d
 8004b34:	08004bcb 	.word	0x08004bcb
 8004b38:	08004c4d 	.word	0x08004c4d
 8004b3c:	08004c4d 	.word	0x08004c4d
 8004b40:	08004c4d 	.word	0x08004c4d
 8004b44:	08004c0b 	.word	0x08004c0b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	68b9      	ldr	r1, [r7, #8]
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f000 fa1e 	bl	8004f90 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	699a      	ldr	r2, [r3, #24]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f042 0208 	orr.w	r2, r2, #8
 8004b62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	699a      	ldr	r2, [r3, #24]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f022 0204 	bic.w	r2, r2, #4
 8004b72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	6999      	ldr	r1, [r3, #24]
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	691a      	ldr	r2, [r3, #16]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	430a      	orrs	r2, r1
 8004b84:	619a      	str	r2, [r3, #24]
      break;
 8004b86:	e064      	b.n	8004c52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	68b9      	ldr	r1, [r7, #8]
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f000 fa6e 	bl	8005070 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	699a      	ldr	r2, [r3, #24]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ba2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	699a      	ldr	r2, [r3, #24]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	6999      	ldr	r1, [r3, #24]
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	691b      	ldr	r3, [r3, #16]
 8004bbe:	021a      	lsls	r2, r3, #8
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	430a      	orrs	r2, r1
 8004bc6:	619a      	str	r2, [r3, #24]
      break;
 8004bc8:	e043      	b.n	8004c52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	68b9      	ldr	r1, [r7, #8]
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f000 fac3 	bl	800515c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	69da      	ldr	r2, [r3, #28]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f042 0208 	orr.w	r2, r2, #8
 8004be4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	69da      	ldr	r2, [r3, #28]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f022 0204 	bic.w	r2, r2, #4
 8004bf4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	69d9      	ldr	r1, [r3, #28]
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	691a      	ldr	r2, [r3, #16]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	430a      	orrs	r2, r1
 8004c06:	61da      	str	r2, [r3, #28]
      break;
 8004c08:	e023      	b.n	8004c52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	68b9      	ldr	r1, [r7, #8]
 8004c10:	4618      	mov	r0, r3
 8004c12:	f000 fb17 	bl	8005244 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	69da      	ldr	r2, [r3, #28]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	69da      	ldr	r2, [r3, #28]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	69d9      	ldr	r1, [r3, #28]
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	691b      	ldr	r3, [r3, #16]
 8004c40:	021a      	lsls	r2, r3, #8
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	430a      	orrs	r2, r1
 8004c48:	61da      	str	r2, [r3, #28]
      break;
 8004c4a:	e002      	b.n	8004c52 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	75fb      	strb	r3, [r7, #23]
      break;
 8004c50:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3718      	adds	r7, #24
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b084      	sub	sp, #16
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d101      	bne.n	8004c80 <HAL_TIM_ConfigClockSource+0x1c>
 8004c7c:	2302      	movs	r3, #2
 8004c7e:	e0b4      	b.n	8004dea <HAL_TIM_ConfigClockSource+0x186>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2202      	movs	r2, #2
 8004c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004c9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004ca6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	68ba      	ldr	r2, [r7, #8]
 8004cae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cb8:	d03e      	beq.n	8004d38 <HAL_TIM_ConfigClockSource+0xd4>
 8004cba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cbe:	f200 8087 	bhi.w	8004dd0 <HAL_TIM_ConfigClockSource+0x16c>
 8004cc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cc6:	f000 8086 	beq.w	8004dd6 <HAL_TIM_ConfigClockSource+0x172>
 8004cca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cce:	d87f      	bhi.n	8004dd0 <HAL_TIM_ConfigClockSource+0x16c>
 8004cd0:	2b70      	cmp	r3, #112	@ 0x70
 8004cd2:	d01a      	beq.n	8004d0a <HAL_TIM_ConfigClockSource+0xa6>
 8004cd4:	2b70      	cmp	r3, #112	@ 0x70
 8004cd6:	d87b      	bhi.n	8004dd0 <HAL_TIM_ConfigClockSource+0x16c>
 8004cd8:	2b60      	cmp	r3, #96	@ 0x60
 8004cda:	d050      	beq.n	8004d7e <HAL_TIM_ConfigClockSource+0x11a>
 8004cdc:	2b60      	cmp	r3, #96	@ 0x60
 8004cde:	d877      	bhi.n	8004dd0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ce0:	2b50      	cmp	r3, #80	@ 0x50
 8004ce2:	d03c      	beq.n	8004d5e <HAL_TIM_ConfigClockSource+0xfa>
 8004ce4:	2b50      	cmp	r3, #80	@ 0x50
 8004ce6:	d873      	bhi.n	8004dd0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ce8:	2b40      	cmp	r3, #64	@ 0x40
 8004cea:	d058      	beq.n	8004d9e <HAL_TIM_ConfigClockSource+0x13a>
 8004cec:	2b40      	cmp	r3, #64	@ 0x40
 8004cee:	d86f      	bhi.n	8004dd0 <HAL_TIM_ConfigClockSource+0x16c>
 8004cf0:	2b30      	cmp	r3, #48	@ 0x30
 8004cf2:	d064      	beq.n	8004dbe <HAL_TIM_ConfigClockSource+0x15a>
 8004cf4:	2b30      	cmp	r3, #48	@ 0x30
 8004cf6:	d86b      	bhi.n	8004dd0 <HAL_TIM_ConfigClockSource+0x16c>
 8004cf8:	2b20      	cmp	r3, #32
 8004cfa:	d060      	beq.n	8004dbe <HAL_TIM_ConfigClockSource+0x15a>
 8004cfc:	2b20      	cmp	r3, #32
 8004cfe:	d867      	bhi.n	8004dd0 <HAL_TIM_ConfigClockSource+0x16c>
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d05c      	beq.n	8004dbe <HAL_TIM_ConfigClockSource+0x15a>
 8004d04:	2b10      	cmp	r3, #16
 8004d06:	d05a      	beq.n	8004dbe <HAL_TIM_ConfigClockSource+0x15a>
 8004d08:	e062      	b.n	8004dd0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d1a:	f000 fb63 	bl	80053e4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004d2c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	68ba      	ldr	r2, [r7, #8]
 8004d34:	609a      	str	r2, [r3, #8]
      break;
 8004d36:	e04f      	b.n	8004dd8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d48:	f000 fb4c 	bl	80053e4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	689a      	ldr	r2, [r3, #8]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d5a:	609a      	str	r2, [r3, #8]
      break;
 8004d5c:	e03c      	b.n	8004dd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	f000 fac0 	bl	80052f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	2150      	movs	r1, #80	@ 0x50
 8004d76:	4618      	mov	r0, r3
 8004d78:	f000 fb19 	bl	80053ae <TIM_ITRx_SetConfig>
      break;
 8004d7c:	e02c      	b.n	8004dd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	f000 fadf 	bl	800534e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2160      	movs	r1, #96	@ 0x60
 8004d96:	4618      	mov	r0, r3
 8004d98:	f000 fb09 	bl	80053ae <TIM_ITRx_SetConfig>
      break;
 8004d9c:	e01c      	b.n	8004dd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004daa:	461a      	mov	r2, r3
 8004dac:	f000 faa0 	bl	80052f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	2140      	movs	r1, #64	@ 0x40
 8004db6:	4618      	mov	r0, r3
 8004db8:	f000 faf9 	bl	80053ae <TIM_ITRx_SetConfig>
      break;
 8004dbc:	e00c      	b.n	8004dd8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4619      	mov	r1, r3
 8004dc8:	4610      	mov	r0, r2
 8004dca:	f000 faf0 	bl	80053ae <TIM_ITRx_SetConfig>
      break;
 8004dce:	e003      	b.n	8004dd8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	73fb      	strb	r3, [r7, #15]
      break;
 8004dd4:	e000      	b.n	8004dd8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004dd6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3710      	adds	r7, #16
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}

08004df2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004df2:	b480      	push	{r7}
 8004df4:	b083      	sub	sp, #12
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004dfa:	bf00      	nop
 8004dfc:	370c      	adds	r7, #12
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr

08004e06 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e06:	b480      	push	{r7}
 8004e08:	b083      	sub	sp, #12
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e0e:	bf00      	nop
 8004e10:	370c      	adds	r7, #12
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr

08004e1a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e1a:	b480      	push	{r7}
 8004e1c:	b083      	sub	sp, #12
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e22:	bf00      	nop
 8004e24:	370c      	adds	r7, #12
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr

08004e2e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e2e:	b480      	push	{r7}
 8004e30:	b083      	sub	sp, #12
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e36:	bf00      	nop
 8004e38:	370c      	adds	r7, #12
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr
	...

08004e44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b085      	sub	sp, #20
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4a43      	ldr	r2, [pc, #268]	@ (8004f64 <TIM_Base_SetConfig+0x120>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d013      	beq.n	8004e84 <TIM_Base_SetConfig+0x40>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e62:	d00f      	beq.n	8004e84 <TIM_Base_SetConfig+0x40>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	4a40      	ldr	r2, [pc, #256]	@ (8004f68 <TIM_Base_SetConfig+0x124>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d00b      	beq.n	8004e84 <TIM_Base_SetConfig+0x40>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	4a3f      	ldr	r2, [pc, #252]	@ (8004f6c <TIM_Base_SetConfig+0x128>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d007      	beq.n	8004e84 <TIM_Base_SetConfig+0x40>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	4a3e      	ldr	r2, [pc, #248]	@ (8004f70 <TIM_Base_SetConfig+0x12c>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d003      	beq.n	8004e84 <TIM_Base_SetConfig+0x40>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4a3d      	ldr	r2, [pc, #244]	@ (8004f74 <TIM_Base_SetConfig+0x130>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d108      	bne.n	8004e96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a32      	ldr	r2, [pc, #200]	@ (8004f64 <TIM_Base_SetConfig+0x120>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d02b      	beq.n	8004ef6 <TIM_Base_SetConfig+0xb2>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ea4:	d027      	beq.n	8004ef6 <TIM_Base_SetConfig+0xb2>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a2f      	ldr	r2, [pc, #188]	@ (8004f68 <TIM_Base_SetConfig+0x124>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d023      	beq.n	8004ef6 <TIM_Base_SetConfig+0xb2>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a2e      	ldr	r2, [pc, #184]	@ (8004f6c <TIM_Base_SetConfig+0x128>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d01f      	beq.n	8004ef6 <TIM_Base_SetConfig+0xb2>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a2d      	ldr	r2, [pc, #180]	@ (8004f70 <TIM_Base_SetConfig+0x12c>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d01b      	beq.n	8004ef6 <TIM_Base_SetConfig+0xb2>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a2c      	ldr	r2, [pc, #176]	@ (8004f74 <TIM_Base_SetConfig+0x130>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d017      	beq.n	8004ef6 <TIM_Base_SetConfig+0xb2>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a2b      	ldr	r2, [pc, #172]	@ (8004f78 <TIM_Base_SetConfig+0x134>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d013      	beq.n	8004ef6 <TIM_Base_SetConfig+0xb2>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a2a      	ldr	r2, [pc, #168]	@ (8004f7c <TIM_Base_SetConfig+0x138>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d00f      	beq.n	8004ef6 <TIM_Base_SetConfig+0xb2>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a29      	ldr	r2, [pc, #164]	@ (8004f80 <TIM_Base_SetConfig+0x13c>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d00b      	beq.n	8004ef6 <TIM_Base_SetConfig+0xb2>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a28      	ldr	r2, [pc, #160]	@ (8004f84 <TIM_Base_SetConfig+0x140>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d007      	beq.n	8004ef6 <TIM_Base_SetConfig+0xb2>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a27      	ldr	r2, [pc, #156]	@ (8004f88 <TIM_Base_SetConfig+0x144>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d003      	beq.n	8004ef6 <TIM_Base_SetConfig+0xb2>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a26      	ldr	r2, [pc, #152]	@ (8004f8c <TIM_Base_SetConfig+0x148>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d108      	bne.n	8004f08 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004efc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	68fa      	ldr	r2, [r7, #12]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	695b      	ldr	r3, [r3, #20]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	689a      	ldr	r2, [r3, #8]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4a0e      	ldr	r2, [pc, #56]	@ (8004f64 <TIM_Base_SetConfig+0x120>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d003      	beq.n	8004f36 <TIM_Base_SetConfig+0xf2>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a10      	ldr	r2, [pc, #64]	@ (8004f74 <TIM_Base_SetConfig+0x130>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d103      	bne.n	8004f3e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	691a      	ldr	r2, [r3, #16]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f043 0204 	orr.w	r2, r3, #4
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	68fa      	ldr	r2, [r7, #12]
 8004f54:	601a      	str	r2, [r3, #0]
}
 8004f56:	bf00      	nop
 8004f58:	3714      	adds	r7, #20
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	40010000 	.word	0x40010000
 8004f68:	40000400 	.word	0x40000400
 8004f6c:	40000800 	.word	0x40000800
 8004f70:	40000c00 	.word	0x40000c00
 8004f74:	40010400 	.word	0x40010400
 8004f78:	40014000 	.word	0x40014000
 8004f7c:	40014400 	.word	0x40014400
 8004f80:	40014800 	.word	0x40014800
 8004f84:	40001800 	.word	0x40001800
 8004f88:	40001c00 	.word	0x40001c00
 8004f8c:	40002000 	.word	0x40002000

08004f90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b087      	sub	sp, #28
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a1b      	ldr	r3, [r3, #32]
 8004f9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6a1b      	ldr	r3, [r3, #32]
 8004fa4:	f023 0201 	bic.w	r2, r3, #1
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	699b      	ldr	r3, [r3, #24]
 8004fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f023 0303 	bic.w	r3, r3, #3
 8004fc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	68fa      	ldr	r2, [r7, #12]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	f023 0302 	bic.w	r3, r3, #2
 8004fd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	697a      	ldr	r2, [r7, #20]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4a20      	ldr	r2, [pc, #128]	@ (8005068 <TIM_OC1_SetConfig+0xd8>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d003      	beq.n	8004ff4 <TIM_OC1_SetConfig+0x64>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a1f      	ldr	r2, [pc, #124]	@ (800506c <TIM_OC1_SetConfig+0xdc>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d10c      	bne.n	800500e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	f023 0308 	bic.w	r3, r3, #8
 8004ffa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	697a      	ldr	r2, [r7, #20]
 8005002:	4313      	orrs	r3, r2
 8005004:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	f023 0304 	bic.w	r3, r3, #4
 800500c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a15      	ldr	r2, [pc, #84]	@ (8005068 <TIM_OC1_SetConfig+0xd8>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d003      	beq.n	800501e <TIM_OC1_SetConfig+0x8e>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a14      	ldr	r2, [pc, #80]	@ (800506c <TIM_OC1_SetConfig+0xdc>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d111      	bne.n	8005042 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005024:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800502c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	695b      	ldr	r3, [r3, #20]
 8005032:	693a      	ldr	r2, [r7, #16]
 8005034:	4313      	orrs	r3, r2
 8005036:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	699b      	ldr	r3, [r3, #24]
 800503c:	693a      	ldr	r2, [r7, #16]
 800503e:	4313      	orrs	r3, r2
 8005040:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	693a      	ldr	r2, [r7, #16]
 8005046:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	68fa      	ldr	r2, [r7, #12]
 800504c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	685a      	ldr	r2, [r3, #4]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	697a      	ldr	r2, [r7, #20]
 800505a:	621a      	str	r2, [r3, #32]
}
 800505c:	bf00      	nop
 800505e:	371c      	adds	r7, #28
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr
 8005068:	40010000 	.word	0x40010000
 800506c:	40010400 	.word	0x40010400

08005070 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005070:	b480      	push	{r7}
 8005072:	b087      	sub	sp, #28
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a1b      	ldr	r3, [r3, #32]
 800507e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6a1b      	ldr	r3, [r3, #32]
 8005084:	f023 0210 	bic.w	r2, r3, #16
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	699b      	ldr	r3, [r3, #24]
 8005096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800509e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	021b      	lsls	r3, r3, #8
 80050ae:	68fa      	ldr	r2, [r7, #12]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	f023 0320 	bic.w	r3, r3, #32
 80050ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	011b      	lsls	r3, r3, #4
 80050c2:	697a      	ldr	r2, [r7, #20]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	4a22      	ldr	r2, [pc, #136]	@ (8005154 <TIM_OC2_SetConfig+0xe4>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d003      	beq.n	80050d8 <TIM_OC2_SetConfig+0x68>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	4a21      	ldr	r2, [pc, #132]	@ (8005158 <TIM_OC2_SetConfig+0xe8>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d10d      	bne.n	80050f4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	011b      	lsls	r3, r3, #4
 80050e6:	697a      	ldr	r2, [r7, #20]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050f2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a17      	ldr	r2, [pc, #92]	@ (8005154 <TIM_OC2_SetConfig+0xe4>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d003      	beq.n	8005104 <TIM_OC2_SetConfig+0x94>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4a16      	ldr	r2, [pc, #88]	@ (8005158 <TIM_OC2_SetConfig+0xe8>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d113      	bne.n	800512c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800510a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005112:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	695b      	ldr	r3, [r3, #20]
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	693a      	ldr	r2, [r7, #16]
 800511c:	4313      	orrs	r3, r2
 800511e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	699b      	ldr	r3, [r3, #24]
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	693a      	ldr	r2, [r7, #16]
 8005128:	4313      	orrs	r3, r2
 800512a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	693a      	ldr	r2, [r7, #16]
 8005130:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	68fa      	ldr	r2, [r7, #12]
 8005136:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	685a      	ldr	r2, [r3, #4]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	697a      	ldr	r2, [r7, #20]
 8005144:	621a      	str	r2, [r3, #32]
}
 8005146:	bf00      	nop
 8005148:	371c      	adds	r7, #28
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr
 8005152:	bf00      	nop
 8005154:	40010000 	.word	0x40010000
 8005158:	40010400 	.word	0x40010400

0800515c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800515c:	b480      	push	{r7}
 800515e:	b087      	sub	sp, #28
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a1b      	ldr	r3, [r3, #32]
 800516a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6a1b      	ldr	r3, [r3, #32]
 8005170:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	69db      	ldr	r3, [r3, #28]
 8005182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800518a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f023 0303 	bic.w	r3, r3, #3
 8005192:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	68fa      	ldr	r2, [r7, #12]
 800519a:	4313      	orrs	r3, r2
 800519c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80051a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	021b      	lsls	r3, r3, #8
 80051ac:	697a      	ldr	r2, [r7, #20]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a21      	ldr	r2, [pc, #132]	@ (800523c <TIM_OC3_SetConfig+0xe0>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d003      	beq.n	80051c2 <TIM_OC3_SetConfig+0x66>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4a20      	ldr	r2, [pc, #128]	@ (8005240 <TIM_OC3_SetConfig+0xe4>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d10d      	bne.n	80051de <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80051c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	021b      	lsls	r3, r3, #8
 80051d0:	697a      	ldr	r2, [r7, #20]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80051dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4a16      	ldr	r2, [pc, #88]	@ (800523c <TIM_OC3_SetConfig+0xe0>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d003      	beq.n	80051ee <TIM_OC3_SetConfig+0x92>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a15      	ldr	r2, [pc, #84]	@ (8005240 <TIM_OC3_SetConfig+0xe4>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d113      	bne.n	8005216 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80051f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80051fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	695b      	ldr	r3, [r3, #20]
 8005202:	011b      	lsls	r3, r3, #4
 8005204:	693a      	ldr	r2, [r7, #16]
 8005206:	4313      	orrs	r3, r2
 8005208:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	699b      	ldr	r3, [r3, #24]
 800520e:	011b      	lsls	r3, r3, #4
 8005210:	693a      	ldr	r2, [r7, #16]
 8005212:	4313      	orrs	r3, r2
 8005214:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	693a      	ldr	r2, [r7, #16]
 800521a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	68fa      	ldr	r2, [r7, #12]
 8005220:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	685a      	ldr	r2, [r3, #4]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	697a      	ldr	r2, [r7, #20]
 800522e:	621a      	str	r2, [r3, #32]
}
 8005230:	bf00      	nop
 8005232:	371c      	adds	r7, #28
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr
 800523c:	40010000 	.word	0x40010000
 8005240:	40010400 	.word	0x40010400

08005244 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005244:	b480      	push	{r7}
 8005246:	b087      	sub	sp, #28
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a1b      	ldr	r3, [r3, #32]
 8005252:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6a1b      	ldr	r3, [r3, #32]
 8005258:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	69db      	ldr	r3, [r3, #28]
 800526a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005272:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800527a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	021b      	lsls	r3, r3, #8
 8005282:	68fa      	ldr	r2, [r7, #12]
 8005284:	4313      	orrs	r3, r2
 8005286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800528e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	031b      	lsls	r3, r3, #12
 8005296:	693a      	ldr	r2, [r7, #16]
 8005298:	4313      	orrs	r3, r2
 800529a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a12      	ldr	r2, [pc, #72]	@ (80052e8 <TIM_OC4_SetConfig+0xa4>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d003      	beq.n	80052ac <TIM_OC4_SetConfig+0x68>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a11      	ldr	r2, [pc, #68]	@ (80052ec <TIM_OC4_SetConfig+0xa8>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d109      	bne.n	80052c0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80052b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	695b      	ldr	r3, [r3, #20]
 80052b8:	019b      	lsls	r3, r3, #6
 80052ba:	697a      	ldr	r2, [r7, #20]
 80052bc:	4313      	orrs	r3, r2
 80052be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	697a      	ldr	r2, [r7, #20]
 80052c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	68fa      	ldr	r2, [r7, #12]
 80052ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	685a      	ldr	r2, [r3, #4]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	693a      	ldr	r2, [r7, #16]
 80052d8:	621a      	str	r2, [r3, #32]
}
 80052da:	bf00      	nop
 80052dc:	371c      	adds	r7, #28
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr
 80052e6:	bf00      	nop
 80052e8:	40010000 	.word	0x40010000
 80052ec:	40010400 	.word	0x40010400

080052f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b087      	sub	sp, #28
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	60b9      	str	r1, [r7, #8]
 80052fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	6a1b      	ldr	r3, [r3, #32]
 8005300:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6a1b      	ldr	r3, [r3, #32]
 8005306:	f023 0201 	bic.w	r2, r3, #1
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	699b      	ldr	r3, [r3, #24]
 8005312:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800531a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	011b      	lsls	r3, r3, #4
 8005320:	693a      	ldr	r2, [r7, #16]
 8005322:	4313      	orrs	r3, r2
 8005324:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	f023 030a 	bic.w	r3, r3, #10
 800532c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800532e:	697a      	ldr	r2, [r7, #20]
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	4313      	orrs	r3, r2
 8005334:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	693a      	ldr	r2, [r7, #16]
 800533a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	697a      	ldr	r2, [r7, #20]
 8005340:	621a      	str	r2, [r3, #32]
}
 8005342:	bf00      	nop
 8005344:	371c      	adds	r7, #28
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr

0800534e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800534e:	b480      	push	{r7}
 8005350:	b087      	sub	sp, #28
 8005352:	af00      	add	r7, sp, #0
 8005354:	60f8      	str	r0, [r7, #12]
 8005356:	60b9      	str	r1, [r7, #8]
 8005358:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	6a1b      	ldr	r3, [r3, #32]
 800535e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6a1b      	ldr	r3, [r3, #32]
 8005364:	f023 0210 	bic.w	r2, r3, #16
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	699b      	ldr	r3, [r3, #24]
 8005370:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005378:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	031b      	lsls	r3, r3, #12
 800537e:	693a      	ldr	r2, [r7, #16]
 8005380:	4313      	orrs	r3, r2
 8005382:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800538a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	011b      	lsls	r3, r3, #4
 8005390:	697a      	ldr	r2, [r7, #20]
 8005392:	4313      	orrs	r3, r2
 8005394:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	693a      	ldr	r2, [r7, #16]
 800539a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	697a      	ldr	r2, [r7, #20]
 80053a0:	621a      	str	r2, [r3, #32]
}
 80053a2:	bf00      	nop
 80053a4:	371c      	adds	r7, #28
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr

080053ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80053ae:	b480      	push	{r7}
 80053b0:	b085      	sub	sp, #20
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	6078      	str	r0, [r7, #4]
 80053b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053c6:	683a      	ldr	r2, [r7, #0]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	f043 0307 	orr.w	r3, r3, #7
 80053d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	68fa      	ldr	r2, [r7, #12]
 80053d6:	609a      	str	r2, [r3, #8]
}
 80053d8:	bf00      	nop
 80053da:	3714      	adds	r7, #20
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr

080053e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b087      	sub	sp, #28
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	607a      	str	r2, [r7, #4]
 80053f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80053fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	021a      	lsls	r2, r3, #8
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	431a      	orrs	r2, r3
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	4313      	orrs	r3, r2
 800540c:	697a      	ldr	r2, [r7, #20]
 800540e:	4313      	orrs	r3, r2
 8005410:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	697a      	ldr	r2, [r7, #20]
 8005416:	609a      	str	r2, [r3, #8]
}
 8005418:	bf00      	nop
 800541a:	371c      	adds	r7, #28
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr

08005424 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005424:	b480      	push	{r7}
 8005426:	b087      	sub	sp, #28
 8005428:	af00      	add	r7, sp, #0
 800542a:	60f8      	str	r0, [r7, #12]
 800542c:	60b9      	str	r1, [r7, #8]
 800542e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	f003 031f 	and.w	r3, r3, #31
 8005436:	2201      	movs	r2, #1
 8005438:	fa02 f303 	lsl.w	r3, r2, r3
 800543c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	6a1a      	ldr	r2, [r3, #32]
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	43db      	mvns	r3, r3
 8005446:	401a      	ands	r2, r3
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	6a1a      	ldr	r2, [r3, #32]
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	f003 031f 	and.w	r3, r3, #31
 8005456:	6879      	ldr	r1, [r7, #4]
 8005458:	fa01 f303 	lsl.w	r3, r1, r3
 800545c:	431a      	orrs	r2, r3
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	621a      	str	r2, [r3, #32]
}
 8005462:	bf00      	nop
 8005464:	371c      	adds	r7, #28
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr
	...

08005470 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005470:	b480      	push	{r7}
 8005472:	b085      	sub	sp, #20
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005480:	2b01      	cmp	r3, #1
 8005482:	d101      	bne.n	8005488 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005484:	2302      	movs	r3, #2
 8005486:	e05a      	b.n	800553e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2202      	movs	r2, #2
 8005494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68fa      	ldr	r2, [r7, #12]
 80054c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a21      	ldr	r2, [pc, #132]	@ (800554c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d022      	beq.n	8005512 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054d4:	d01d      	beq.n	8005512 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a1d      	ldr	r2, [pc, #116]	@ (8005550 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d018      	beq.n	8005512 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a1b      	ldr	r2, [pc, #108]	@ (8005554 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d013      	beq.n	8005512 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a1a      	ldr	r2, [pc, #104]	@ (8005558 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d00e      	beq.n	8005512 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a18      	ldr	r2, [pc, #96]	@ (800555c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d009      	beq.n	8005512 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a17      	ldr	r2, [pc, #92]	@ (8005560 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d004      	beq.n	8005512 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a15      	ldr	r2, [pc, #84]	@ (8005564 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d10c      	bne.n	800552c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005518:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	68ba      	ldr	r2, [r7, #8]
 8005520:	4313      	orrs	r3, r2
 8005522:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	68ba      	ldr	r2, [r7, #8]
 800552a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800553c:	2300      	movs	r3, #0
}
 800553e:	4618      	mov	r0, r3
 8005540:	3714      	adds	r7, #20
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr
 800554a:	bf00      	nop
 800554c:	40010000 	.word	0x40010000
 8005550:	40000400 	.word	0x40000400
 8005554:	40000800 	.word	0x40000800
 8005558:	40000c00 	.word	0x40000c00
 800555c:	40010400 	.word	0x40010400
 8005560:	40014000 	.word	0x40014000
 8005564:	40001800 	.word	0x40001800

08005568 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005568:	b480      	push	{r7}
 800556a:	b083      	sub	sp, #12
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005570:	bf00      	nop
 8005572:	370c      	adds	r7, #12
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr

0800557c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800557c:	b480      	push	{r7}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005584:	bf00      	nop
 8005586:	370c      	adds	r7, #12
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <siprintf>:
 8005590:	b40e      	push	{r1, r2, r3}
 8005592:	b510      	push	{r4, lr}
 8005594:	b09d      	sub	sp, #116	@ 0x74
 8005596:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005598:	9002      	str	r0, [sp, #8]
 800559a:	9006      	str	r0, [sp, #24]
 800559c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80055a0:	480a      	ldr	r0, [pc, #40]	@ (80055cc <siprintf+0x3c>)
 80055a2:	9107      	str	r1, [sp, #28]
 80055a4:	9104      	str	r1, [sp, #16]
 80055a6:	490a      	ldr	r1, [pc, #40]	@ (80055d0 <siprintf+0x40>)
 80055a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80055ac:	9105      	str	r1, [sp, #20]
 80055ae:	2400      	movs	r4, #0
 80055b0:	a902      	add	r1, sp, #8
 80055b2:	6800      	ldr	r0, [r0, #0]
 80055b4:	9301      	str	r3, [sp, #4]
 80055b6:	941b      	str	r4, [sp, #108]	@ 0x6c
 80055b8:	f000 f994 	bl	80058e4 <_svfiprintf_r>
 80055bc:	9b02      	ldr	r3, [sp, #8]
 80055be:	701c      	strb	r4, [r3, #0]
 80055c0:	b01d      	add	sp, #116	@ 0x74
 80055c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055c6:	b003      	add	sp, #12
 80055c8:	4770      	bx	lr
 80055ca:	bf00      	nop
 80055cc:	2000000c 	.word	0x2000000c
 80055d0:	ffff0208 	.word	0xffff0208

080055d4 <memset>:
 80055d4:	4402      	add	r2, r0
 80055d6:	4603      	mov	r3, r0
 80055d8:	4293      	cmp	r3, r2
 80055da:	d100      	bne.n	80055de <memset+0xa>
 80055dc:	4770      	bx	lr
 80055de:	f803 1b01 	strb.w	r1, [r3], #1
 80055e2:	e7f9      	b.n	80055d8 <memset+0x4>

080055e4 <__errno>:
 80055e4:	4b01      	ldr	r3, [pc, #4]	@ (80055ec <__errno+0x8>)
 80055e6:	6818      	ldr	r0, [r3, #0]
 80055e8:	4770      	bx	lr
 80055ea:	bf00      	nop
 80055ec:	2000000c 	.word	0x2000000c

080055f0 <__libc_init_array>:
 80055f0:	b570      	push	{r4, r5, r6, lr}
 80055f2:	4d0d      	ldr	r5, [pc, #52]	@ (8005628 <__libc_init_array+0x38>)
 80055f4:	4c0d      	ldr	r4, [pc, #52]	@ (800562c <__libc_init_array+0x3c>)
 80055f6:	1b64      	subs	r4, r4, r5
 80055f8:	10a4      	asrs	r4, r4, #2
 80055fa:	2600      	movs	r6, #0
 80055fc:	42a6      	cmp	r6, r4
 80055fe:	d109      	bne.n	8005614 <__libc_init_array+0x24>
 8005600:	4d0b      	ldr	r5, [pc, #44]	@ (8005630 <__libc_init_array+0x40>)
 8005602:	4c0c      	ldr	r4, [pc, #48]	@ (8005634 <__libc_init_array+0x44>)
 8005604:	f000 fc64 	bl	8005ed0 <_init>
 8005608:	1b64      	subs	r4, r4, r5
 800560a:	10a4      	asrs	r4, r4, #2
 800560c:	2600      	movs	r6, #0
 800560e:	42a6      	cmp	r6, r4
 8005610:	d105      	bne.n	800561e <__libc_init_array+0x2e>
 8005612:	bd70      	pop	{r4, r5, r6, pc}
 8005614:	f855 3b04 	ldr.w	r3, [r5], #4
 8005618:	4798      	blx	r3
 800561a:	3601      	adds	r6, #1
 800561c:	e7ee      	b.n	80055fc <__libc_init_array+0xc>
 800561e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005622:	4798      	blx	r3
 8005624:	3601      	adds	r6, #1
 8005626:	e7f2      	b.n	800560e <__libc_init_array+0x1e>
 8005628:	08005fe0 	.word	0x08005fe0
 800562c:	08005fe0 	.word	0x08005fe0
 8005630:	08005fe0 	.word	0x08005fe0
 8005634:	08005fe4 	.word	0x08005fe4

08005638 <__retarget_lock_acquire_recursive>:
 8005638:	4770      	bx	lr

0800563a <__retarget_lock_release_recursive>:
 800563a:	4770      	bx	lr

0800563c <_free_r>:
 800563c:	b538      	push	{r3, r4, r5, lr}
 800563e:	4605      	mov	r5, r0
 8005640:	2900      	cmp	r1, #0
 8005642:	d041      	beq.n	80056c8 <_free_r+0x8c>
 8005644:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005648:	1f0c      	subs	r4, r1, #4
 800564a:	2b00      	cmp	r3, #0
 800564c:	bfb8      	it	lt
 800564e:	18e4      	addlt	r4, r4, r3
 8005650:	f000 f8e0 	bl	8005814 <__malloc_lock>
 8005654:	4a1d      	ldr	r2, [pc, #116]	@ (80056cc <_free_r+0x90>)
 8005656:	6813      	ldr	r3, [r2, #0]
 8005658:	b933      	cbnz	r3, 8005668 <_free_r+0x2c>
 800565a:	6063      	str	r3, [r4, #4]
 800565c:	6014      	str	r4, [r2, #0]
 800565e:	4628      	mov	r0, r5
 8005660:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005664:	f000 b8dc 	b.w	8005820 <__malloc_unlock>
 8005668:	42a3      	cmp	r3, r4
 800566a:	d908      	bls.n	800567e <_free_r+0x42>
 800566c:	6820      	ldr	r0, [r4, #0]
 800566e:	1821      	adds	r1, r4, r0
 8005670:	428b      	cmp	r3, r1
 8005672:	bf01      	itttt	eq
 8005674:	6819      	ldreq	r1, [r3, #0]
 8005676:	685b      	ldreq	r3, [r3, #4]
 8005678:	1809      	addeq	r1, r1, r0
 800567a:	6021      	streq	r1, [r4, #0]
 800567c:	e7ed      	b.n	800565a <_free_r+0x1e>
 800567e:	461a      	mov	r2, r3
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	b10b      	cbz	r3, 8005688 <_free_r+0x4c>
 8005684:	42a3      	cmp	r3, r4
 8005686:	d9fa      	bls.n	800567e <_free_r+0x42>
 8005688:	6811      	ldr	r1, [r2, #0]
 800568a:	1850      	adds	r0, r2, r1
 800568c:	42a0      	cmp	r0, r4
 800568e:	d10b      	bne.n	80056a8 <_free_r+0x6c>
 8005690:	6820      	ldr	r0, [r4, #0]
 8005692:	4401      	add	r1, r0
 8005694:	1850      	adds	r0, r2, r1
 8005696:	4283      	cmp	r3, r0
 8005698:	6011      	str	r1, [r2, #0]
 800569a:	d1e0      	bne.n	800565e <_free_r+0x22>
 800569c:	6818      	ldr	r0, [r3, #0]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	6053      	str	r3, [r2, #4]
 80056a2:	4408      	add	r0, r1
 80056a4:	6010      	str	r0, [r2, #0]
 80056a6:	e7da      	b.n	800565e <_free_r+0x22>
 80056a8:	d902      	bls.n	80056b0 <_free_r+0x74>
 80056aa:	230c      	movs	r3, #12
 80056ac:	602b      	str	r3, [r5, #0]
 80056ae:	e7d6      	b.n	800565e <_free_r+0x22>
 80056b0:	6820      	ldr	r0, [r4, #0]
 80056b2:	1821      	adds	r1, r4, r0
 80056b4:	428b      	cmp	r3, r1
 80056b6:	bf04      	itt	eq
 80056b8:	6819      	ldreq	r1, [r3, #0]
 80056ba:	685b      	ldreq	r3, [r3, #4]
 80056bc:	6063      	str	r3, [r4, #4]
 80056be:	bf04      	itt	eq
 80056c0:	1809      	addeq	r1, r1, r0
 80056c2:	6021      	streq	r1, [r4, #0]
 80056c4:	6054      	str	r4, [r2, #4]
 80056c6:	e7ca      	b.n	800565e <_free_r+0x22>
 80056c8:	bd38      	pop	{r3, r4, r5, pc}
 80056ca:	bf00      	nop
 80056cc:	2000030c 	.word	0x2000030c

080056d0 <sbrk_aligned>:
 80056d0:	b570      	push	{r4, r5, r6, lr}
 80056d2:	4e0f      	ldr	r6, [pc, #60]	@ (8005710 <sbrk_aligned+0x40>)
 80056d4:	460c      	mov	r4, r1
 80056d6:	6831      	ldr	r1, [r6, #0]
 80056d8:	4605      	mov	r5, r0
 80056da:	b911      	cbnz	r1, 80056e2 <sbrk_aligned+0x12>
 80056dc:	f000 fba4 	bl	8005e28 <_sbrk_r>
 80056e0:	6030      	str	r0, [r6, #0]
 80056e2:	4621      	mov	r1, r4
 80056e4:	4628      	mov	r0, r5
 80056e6:	f000 fb9f 	bl	8005e28 <_sbrk_r>
 80056ea:	1c43      	adds	r3, r0, #1
 80056ec:	d103      	bne.n	80056f6 <sbrk_aligned+0x26>
 80056ee:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80056f2:	4620      	mov	r0, r4
 80056f4:	bd70      	pop	{r4, r5, r6, pc}
 80056f6:	1cc4      	adds	r4, r0, #3
 80056f8:	f024 0403 	bic.w	r4, r4, #3
 80056fc:	42a0      	cmp	r0, r4
 80056fe:	d0f8      	beq.n	80056f2 <sbrk_aligned+0x22>
 8005700:	1a21      	subs	r1, r4, r0
 8005702:	4628      	mov	r0, r5
 8005704:	f000 fb90 	bl	8005e28 <_sbrk_r>
 8005708:	3001      	adds	r0, #1
 800570a:	d1f2      	bne.n	80056f2 <sbrk_aligned+0x22>
 800570c:	e7ef      	b.n	80056ee <sbrk_aligned+0x1e>
 800570e:	bf00      	nop
 8005710:	20000308 	.word	0x20000308

08005714 <_malloc_r>:
 8005714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005718:	1ccd      	adds	r5, r1, #3
 800571a:	f025 0503 	bic.w	r5, r5, #3
 800571e:	3508      	adds	r5, #8
 8005720:	2d0c      	cmp	r5, #12
 8005722:	bf38      	it	cc
 8005724:	250c      	movcc	r5, #12
 8005726:	2d00      	cmp	r5, #0
 8005728:	4606      	mov	r6, r0
 800572a:	db01      	blt.n	8005730 <_malloc_r+0x1c>
 800572c:	42a9      	cmp	r1, r5
 800572e:	d904      	bls.n	800573a <_malloc_r+0x26>
 8005730:	230c      	movs	r3, #12
 8005732:	6033      	str	r3, [r6, #0]
 8005734:	2000      	movs	r0, #0
 8005736:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800573a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005810 <_malloc_r+0xfc>
 800573e:	f000 f869 	bl	8005814 <__malloc_lock>
 8005742:	f8d8 3000 	ldr.w	r3, [r8]
 8005746:	461c      	mov	r4, r3
 8005748:	bb44      	cbnz	r4, 800579c <_malloc_r+0x88>
 800574a:	4629      	mov	r1, r5
 800574c:	4630      	mov	r0, r6
 800574e:	f7ff ffbf 	bl	80056d0 <sbrk_aligned>
 8005752:	1c43      	adds	r3, r0, #1
 8005754:	4604      	mov	r4, r0
 8005756:	d158      	bne.n	800580a <_malloc_r+0xf6>
 8005758:	f8d8 4000 	ldr.w	r4, [r8]
 800575c:	4627      	mov	r7, r4
 800575e:	2f00      	cmp	r7, #0
 8005760:	d143      	bne.n	80057ea <_malloc_r+0xd6>
 8005762:	2c00      	cmp	r4, #0
 8005764:	d04b      	beq.n	80057fe <_malloc_r+0xea>
 8005766:	6823      	ldr	r3, [r4, #0]
 8005768:	4639      	mov	r1, r7
 800576a:	4630      	mov	r0, r6
 800576c:	eb04 0903 	add.w	r9, r4, r3
 8005770:	f000 fb5a 	bl	8005e28 <_sbrk_r>
 8005774:	4581      	cmp	r9, r0
 8005776:	d142      	bne.n	80057fe <_malloc_r+0xea>
 8005778:	6821      	ldr	r1, [r4, #0]
 800577a:	1a6d      	subs	r5, r5, r1
 800577c:	4629      	mov	r1, r5
 800577e:	4630      	mov	r0, r6
 8005780:	f7ff ffa6 	bl	80056d0 <sbrk_aligned>
 8005784:	3001      	adds	r0, #1
 8005786:	d03a      	beq.n	80057fe <_malloc_r+0xea>
 8005788:	6823      	ldr	r3, [r4, #0]
 800578a:	442b      	add	r3, r5
 800578c:	6023      	str	r3, [r4, #0]
 800578e:	f8d8 3000 	ldr.w	r3, [r8]
 8005792:	685a      	ldr	r2, [r3, #4]
 8005794:	bb62      	cbnz	r2, 80057f0 <_malloc_r+0xdc>
 8005796:	f8c8 7000 	str.w	r7, [r8]
 800579a:	e00f      	b.n	80057bc <_malloc_r+0xa8>
 800579c:	6822      	ldr	r2, [r4, #0]
 800579e:	1b52      	subs	r2, r2, r5
 80057a0:	d420      	bmi.n	80057e4 <_malloc_r+0xd0>
 80057a2:	2a0b      	cmp	r2, #11
 80057a4:	d917      	bls.n	80057d6 <_malloc_r+0xc2>
 80057a6:	1961      	adds	r1, r4, r5
 80057a8:	42a3      	cmp	r3, r4
 80057aa:	6025      	str	r5, [r4, #0]
 80057ac:	bf18      	it	ne
 80057ae:	6059      	strne	r1, [r3, #4]
 80057b0:	6863      	ldr	r3, [r4, #4]
 80057b2:	bf08      	it	eq
 80057b4:	f8c8 1000 	streq.w	r1, [r8]
 80057b8:	5162      	str	r2, [r4, r5]
 80057ba:	604b      	str	r3, [r1, #4]
 80057bc:	4630      	mov	r0, r6
 80057be:	f000 f82f 	bl	8005820 <__malloc_unlock>
 80057c2:	f104 000b 	add.w	r0, r4, #11
 80057c6:	1d23      	adds	r3, r4, #4
 80057c8:	f020 0007 	bic.w	r0, r0, #7
 80057cc:	1ac2      	subs	r2, r0, r3
 80057ce:	bf1c      	itt	ne
 80057d0:	1a1b      	subne	r3, r3, r0
 80057d2:	50a3      	strne	r3, [r4, r2]
 80057d4:	e7af      	b.n	8005736 <_malloc_r+0x22>
 80057d6:	6862      	ldr	r2, [r4, #4]
 80057d8:	42a3      	cmp	r3, r4
 80057da:	bf0c      	ite	eq
 80057dc:	f8c8 2000 	streq.w	r2, [r8]
 80057e0:	605a      	strne	r2, [r3, #4]
 80057e2:	e7eb      	b.n	80057bc <_malloc_r+0xa8>
 80057e4:	4623      	mov	r3, r4
 80057e6:	6864      	ldr	r4, [r4, #4]
 80057e8:	e7ae      	b.n	8005748 <_malloc_r+0x34>
 80057ea:	463c      	mov	r4, r7
 80057ec:	687f      	ldr	r7, [r7, #4]
 80057ee:	e7b6      	b.n	800575e <_malloc_r+0x4a>
 80057f0:	461a      	mov	r2, r3
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	42a3      	cmp	r3, r4
 80057f6:	d1fb      	bne.n	80057f0 <_malloc_r+0xdc>
 80057f8:	2300      	movs	r3, #0
 80057fa:	6053      	str	r3, [r2, #4]
 80057fc:	e7de      	b.n	80057bc <_malloc_r+0xa8>
 80057fe:	230c      	movs	r3, #12
 8005800:	6033      	str	r3, [r6, #0]
 8005802:	4630      	mov	r0, r6
 8005804:	f000 f80c 	bl	8005820 <__malloc_unlock>
 8005808:	e794      	b.n	8005734 <_malloc_r+0x20>
 800580a:	6005      	str	r5, [r0, #0]
 800580c:	e7d6      	b.n	80057bc <_malloc_r+0xa8>
 800580e:	bf00      	nop
 8005810:	2000030c 	.word	0x2000030c

08005814 <__malloc_lock>:
 8005814:	4801      	ldr	r0, [pc, #4]	@ (800581c <__malloc_lock+0x8>)
 8005816:	f7ff bf0f 	b.w	8005638 <__retarget_lock_acquire_recursive>
 800581a:	bf00      	nop
 800581c:	20000304 	.word	0x20000304

08005820 <__malloc_unlock>:
 8005820:	4801      	ldr	r0, [pc, #4]	@ (8005828 <__malloc_unlock+0x8>)
 8005822:	f7ff bf0a 	b.w	800563a <__retarget_lock_release_recursive>
 8005826:	bf00      	nop
 8005828:	20000304 	.word	0x20000304

0800582c <__ssputs_r>:
 800582c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005830:	688e      	ldr	r6, [r1, #8]
 8005832:	461f      	mov	r7, r3
 8005834:	42be      	cmp	r6, r7
 8005836:	680b      	ldr	r3, [r1, #0]
 8005838:	4682      	mov	sl, r0
 800583a:	460c      	mov	r4, r1
 800583c:	4690      	mov	r8, r2
 800583e:	d82d      	bhi.n	800589c <__ssputs_r+0x70>
 8005840:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005844:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005848:	d026      	beq.n	8005898 <__ssputs_r+0x6c>
 800584a:	6965      	ldr	r5, [r4, #20]
 800584c:	6909      	ldr	r1, [r1, #16]
 800584e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005852:	eba3 0901 	sub.w	r9, r3, r1
 8005856:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800585a:	1c7b      	adds	r3, r7, #1
 800585c:	444b      	add	r3, r9
 800585e:	106d      	asrs	r5, r5, #1
 8005860:	429d      	cmp	r5, r3
 8005862:	bf38      	it	cc
 8005864:	461d      	movcc	r5, r3
 8005866:	0553      	lsls	r3, r2, #21
 8005868:	d527      	bpl.n	80058ba <__ssputs_r+0x8e>
 800586a:	4629      	mov	r1, r5
 800586c:	f7ff ff52 	bl	8005714 <_malloc_r>
 8005870:	4606      	mov	r6, r0
 8005872:	b360      	cbz	r0, 80058ce <__ssputs_r+0xa2>
 8005874:	6921      	ldr	r1, [r4, #16]
 8005876:	464a      	mov	r2, r9
 8005878:	f000 fae6 	bl	8005e48 <memcpy>
 800587c:	89a3      	ldrh	r3, [r4, #12]
 800587e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005882:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005886:	81a3      	strh	r3, [r4, #12]
 8005888:	6126      	str	r6, [r4, #16]
 800588a:	6165      	str	r5, [r4, #20]
 800588c:	444e      	add	r6, r9
 800588e:	eba5 0509 	sub.w	r5, r5, r9
 8005892:	6026      	str	r6, [r4, #0]
 8005894:	60a5      	str	r5, [r4, #8]
 8005896:	463e      	mov	r6, r7
 8005898:	42be      	cmp	r6, r7
 800589a:	d900      	bls.n	800589e <__ssputs_r+0x72>
 800589c:	463e      	mov	r6, r7
 800589e:	6820      	ldr	r0, [r4, #0]
 80058a0:	4632      	mov	r2, r6
 80058a2:	4641      	mov	r1, r8
 80058a4:	f000 faa6 	bl	8005df4 <memmove>
 80058a8:	68a3      	ldr	r3, [r4, #8]
 80058aa:	1b9b      	subs	r3, r3, r6
 80058ac:	60a3      	str	r3, [r4, #8]
 80058ae:	6823      	ldr	r3, [r4, #0]
 80058b0:	4433      	add	r3, r6
 80058b2:	6023      	str	r3, [r4, #0]
 80058b4:	2000      	movs	r0, #0
 80058b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058ba:	462a      	mov	r2, r5
 80058bc:	f000 fad2 	bl	8005e64 <_realloc_r>
 80058c0:	4606      	mov	r6, r0
 80058c2:	2800      	cmp	r0, #0
 80058c4:	d1e0      	bne.n	8005888 <__ssputs_r+0x5c>
 80058c6:	6921      	ldr	r1, [r4, #16]
 80058c8:	4650      	mov	r0, sl
 80058ca:	f7ff feb7 	bl	800563c <_free_r>
 80058ce:	230c      	movs	r3, #12
 80058d0:	f8ca 3000 	str.w	r3, [sl]
 80058d4:	89a3      	ldrh	r3, [r4, #12]
 80058d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80058da:	81a3      	strh	r3, [r4, #12]
 80058dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80058e0:	e7e9      	b.n	80058b6 <__ssputs_r+0x8a>
	...

080058e4 <_svfiprintf_r>:
 80058e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058e8:	4698      	mov	r8, r3
 80058ea:	898b      	ldrh	r3, [r1, #12]
 80058ec:	061b      	lsls	r3, r3, #24
 80058ee:	b09d      	sub	sp, #116	@ 0x74
 80058f0:	4607      	mov	r7, r0
 80058f2:	460d      	mov	r5, r1
 80058f4:	4614      	mov	r4, r2
 80058f6:	d510      	bpl.n	800591a <_svfiprintf_r+0x36>
 80058f8:	690b      	ldr	r3, [r1, #16]
 80058fa:	b973      	cbnz	r3, 800591a <_svfiprintf_r+0x36>
 80058fc:	2140      	movs	r1, #64	@ 0x40
 80058fe:	f7ff ff09 	bl	8005714 <_malloc_r>
 8005902:	6028      	str	r0, [r5, #0]
 8005904:	6128      	str	r0, [r5, #16]
 8005906:	b930      	cbnz	r0, 8005916 <_svfiprintf_r+0x32>
 8005908:	230c      	movs	r3, #12
 800590a:	603b      	str	r3, [r7, #0]
 800590c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005910:	b01d      	add	sp, #116	@ 0x74
 8005912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005916:	2340      	movs	r3, #64	@ 0x40
 8005918:	616b      	str	r3, [r5, #20]
 800591a:	2300      	movs	r3, #0
 800591c:	9309      	str	r3, [sp, #36]	@ 0x24
 800591e:	2320      	movs	r3, #32
 8005920:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005924:	f8cd 800c 	str.w	r8, [sp, #12]
 8005928:	2330      	movs	r3, #48	@ 0x30
 800592a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005ac8 <_svfiprintf_r+0x1e4>
 800592e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005932:	f04f 0901 	mov.w	r9, #1
 8005936:	4623      	mov	r3, r4
 8005938:	469a      	mov	sl, r3
 800593a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800593e:	b10a      	cbz	r2, 8005944 <_svfiprintf_r+0x60>
 8005940:	2a25      	cmp	r2, #37	@ 0x25
 8005942:	d1f9      	bne.n	8005938 <_svfiprintf_r+0x54>
 8005944:	ebba 0b04 	subs.w	fp, sl, r4
 8005948:	d00b      	beq.n	8005962 <_svfiprintf_r+0x7e>
 800594a:	465b      	mov	r3, fp
 800594c:	4622      	mov	r2, r4
 800594e:	4629      	mov	r1, r5
 8005950:	4638      	mov	r0, r7
 8005952:	f7ff ff6b 	bl	800582c <__ssputs_r>
 8005956:	3001      	adds	r0, #1
 8005958:	f000 80a7 	beq.w	8005aaa <_svfiprintf_r+0x1c6>
 800595c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800595e:	445a      	add	r2, fp
 8005960:	9209      	str	r2, [sp, #36]	@ 0x24
 8005962:	f89a 3000 	ldrb.w	r3, [sl]
 8005966:	2b00      	cmp	r3, #0
 8005968:	f000 809f 	beq.w	8005aaa <_svfiprintf_r+0x1c6>
 800596c:	2300      	movs	r3, #0
 800596e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005972:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005976:	f10a 0a01 	add.w	sl, sl, #1
 800597a:	9304      	str	r3, [sp, #16]
 800597c:	9307      	str	r3, [sp, #28]
 800597e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005982:	931a      	str	r3, [sp, #104]	@ 0x68
 8005984:	4654      	mov	r4, sl
 8005986:	2205      	movs	r2, #5
 8005988:	f814 1b01 	ldrb.w	r1, [r4], #1
 800598c:	484e      	ldr	r0, [pc, #312]	@ (8005ac8 <_svfiprintf_r+0x1e4>)
 800598e:	f7fa fc1f 	bl	80001d0 <memchr>
 8005992:	9a04      	ldr	r2, [sp, #16]
 8005994:	b9d8      	cbnz	r0, 80059ce <_svfiprintf_r+0xea>
 8005996:	06d0      	lsls	r0, r2, #27
 8005998:	bf44      	itt	mi
 800599a:	2320      	movmi	r3, #32
 800599c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80059a0:	0711      	lsls	r1, r2, #28
 80059a2:	bf44      	itt	mi
 80059a4:	232b      	movmi	r3, #43	@ 0x2b
 80059a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80059aa:	f89a 3000 	ldrb.w	r3, [sl]
 80059ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80059b0:	d015      	beq.n	80059de <_svfiprintf_r+0xfa>
 80059b2:	9a07      	ldr	r2, [sp, #28]
 80059b4:	4654      	mov	r4, sl
 80059b6:	2000      	movs	r0, #0
 80059b8:	f04f 0c0a 	mov.w	ip, #10
 80059bc:	4621      	mov	r1, r4
 80059be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80059c2:	3b30      	subs	r3, #48	@ 0x30
 80059c4:	2b09      	cmp	r3, #9
 80059c6:	d94b      	bls.n	8005a60 <_svfiprintf_r+0x17c>
 80059c8:	b1b0      	cbz	r0, 80059f8 <_svfiprintf_r+0x114>
 80059ca:	9207      	str	r2, [sp, #28]
 80059cc:	e014      	b.n	80059f8 <_svfiprintf_r+0x114>
 80059ce:	eba0 0308 	sub.w	r3, r0, r8
 80059d2:	fa09 f303 	lsl.w	r3, r9, r3
 80059d6:	4313      	orrs	r3, r2
 80059d8:	9304      	str	r3, [sp, #16]
 80059da:	46a2      	mov	sl, r4
 80059dc:	e7d2      	b.n	8005984 <_svfiprintf_r+0xa0>
 80059de:	9b03      	ldr	r3, [sp, #12]
 80059e0:	1d19      	adds	r1, r3, #4
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	9103      	str	r1, [sp, #12]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	bfbb      	ittet	lt
 80059ea:	425b      	neglt	r3, r3
 80059ec:	f042 0202 	orrlt.w	r2, r2, #2
 80059f0:	9307      	strge	r3, [sp, #28]
 80059f2:	9307      	strlt	r3, [sp, #28]
 80059f4:	bfb8      	it	lt
 80059f6:	9204      	strlt	r2, [sp, #16]
 80059f8:	7823      	ldrb	r3, [r4, #0]
 80059fa:	2b2e      	cmp	r3, #46	@ 0x2e
 80059fc:	d10a      	bne.n	8005a14 <_svfiprintf_r+0x130>
 80059fe:	7863      	ldrb	r3, [r4, #1]
 8005a00:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a02:	d132      	bne.n	8005a6a <_svfiprintf_r+0x186>
 8005a04:	9b03      	ldr	r3, [sp, #12]
 8005a06:	1d1a      	adds	r2, r3, #4
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	9203      	str	r2, [sp, #12]
 8005a0c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005a10:	3402      	adds	r4, #2
 8005a12:	9305      	str	r3, [sp, #20]
 8005a14:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005ad8 <_svfiprintf_r+0x1f4>
 8005a18:	7821      	ldrb	r1, [r4, #0]
 8005a1a:	2203      	movs	r2, #3
 8005a1c:	4650      	mov	r0, sl
 8005a1e:	f7fa fbd7 	bl	80001d0 <memchr>
 8005a22:	b138      	cbz	r0, 8005a34 <_svfiprintf_r+0x150>
 8005a24:	9b04      	ldr	r3, [sp, #16]
 8005a26:	eba0 000a 	sub.w	r0, r0, sl
 8005a2a:	2240      	movs	r2, #64	@ 0x40
 8005a2c:	4082      	lsls	r2, r0
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	3401      	adds	r4, #1
 8005a32:	9304      	str	r3, [sp, #16]
 8005a34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a38:	4824      	ldr	r0, [pc, #144]	@ (8005acc <_svfiprintf_r+0x1e8>)
 8005a3a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005a3e:	2206      	movs	r2, #6
 8005a40:	f7fa fbc6 	bl	80001d0 <memchr>
 8005a44:	2800      	cmp	r0, #0
 8005a46:	d036      	beq.n	8005ab6 <_svfiprintf_r+0x1d2>
 8005a48:	4b21      	ldr	r3, [pc, #132]	@ (8005ad0 <_svfiprintf_r+0x1ec>)
 8005a4a:	bb1b      	cbnz	r3, 8005a94 <_svfiprintf_r+0x1b0>
 8005a4c:	9b03      	ldr	r3, [sp, #12]
 8005a4e:	3307      	adds	r3, #7
 8005a50:	f023 0307 	bic.w	r3, r3, #7
 8005a54:	3308      	adds	r3, #8
 8005a56:	9303      	str	r3, [sp, #12]
 8005a58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a5a:	4433      	add	r3, r6
 8005a5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a5e:	e76a      	b.n	8005936 <_svfiprintf_r+0x52>
 8005a60:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a64:	460c      	mov	r4, r1
 8005a66:	2001      	movs	r0, #1
 8005a68:	e7a8      	b.n	80059bc <_svfiprintf_r+0xd8>
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	3401      	adds	r4, #1
 8005a6e:	9305      	str	r3, [sp, #20]
 8005a70:	4619      	mov	r1, r3
 8005a72:	f04f 0c0a 	mov.w	ip, #10
 8005a76:	4620      	mov	r0, r4
 8005a78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a7c:	3a30      	subs	r2, #48	@ 0x30
 8005a7e:	2a09      	cmp	r2, #9
 8005a80:	d903      	bls.n	8005a8a <_svfiprintf_r+0x1a6>
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d0c6      	beq.n	8005a14 <_svfiprintf_r+0x130>
 8005a86:	9105      	str	r1, [sp, #20]
 8005a88:	e7c4      	b.n	8005a14 <_svfiprintf_r+0x130>
 8005a8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a8e:	4604      	mov	r4, r0
 8005a90:	2301      	movs	r3, #1
 8005a92:	e7f0      	b.n	8005a76 <_svfiprintf_r+0x192>
 8005a94:	ab03      	add	r3, sp, #12
 8005a96:	9300      	str	r3, [sp, #0]
 8005a98:	462a      	mov	r2, r5
 8005a9a:	4b0e      	ldr	r3, [pc, #56]	@ (8005ad4 <_svfiprintf_r+0x1f0>)
 8005a9c:	a904      	add	r1, sp, #16
 8005a9e:	4638      	mov	r0, r7
 8005aa0:	f3af 8000 	nop.w
 8005aa4:	1c42      	adds	r2, r0, #1
 8005aa6:	4606      	mov	r6, r0
 8005aa8:	d1d6      	bne.n	8005a58 <_svfiprintf_r+0x174>
 8005aaa:	89ab      	ldrh	r3, [r5, #12]
 8005aac:	065b      	lsls	r3, r3, #25
 8005aae:	f53f af2d 	bmi.w	800590c <_svfiprintf_r+0x28>
 8005ab2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005ab4:	e72c      	b.n	8005910 <_svfiprintf_r+0x2c>
 8005ab6:	ab03      	add	r3, sp, #12
 8005ab8:	9300      	str	r3, [sp, #0]
 8005aba:	462a      	mov	r2, r5
 8005abc:	4b05      	ldr	r3, [pc, #20]	@ (8005ad4 <_svfiprintf_r+0x1f0>)
 8005abe:	a904      	add	r1, sp, #16
 8005ac0:	4638      	mov	r0, r7
 8005ac2:	f000 f879 	bl	8005bb8 <_printf_i>
 8005ac6:	e7ed      	b.n	8005aa4 <_svfiprintf_r+0x1c0>
 8005ac8:	08005fa4 	.word	0x08005fa4
 8005acc:	08005fae 	.word	0x08005fae
 8005ad0:	00000000 	.word	0x00000000
 8005ad4:	0800582d 	.word	0x0800582d
 8005ad8:	08005faa 	.word	0x08005faa

08005adc <_printf_common>:
 8005adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ae0:	4616      	mov	r6, r2
 8005ae2:	4698      	mov	r8, r3
 8005ae4:	688a      	ldr	r2, [r1, #8]
 8005ae6:	690b      	ldr	r3, [r1, #16]
 8005ae8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005aec:	4293      	cmp	r3, r2
 8005aee:	bfb8      	it	lt
 8005af0:	4613      	movlt	r3, r2
 8005af2:	6033      	str	r3, [r6, #0]
 8005af4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005af8:	4607      	mov	r7, r0
 8005afa:	460c      	mov	r4, r1
 8005afc:	b10a      	cbz	r2, 8005b02 <_printf_common+0x26>
 8005afe:	3301      	adds	r3, #1
 8005b00:	6033      	str	r3, [r6, #0]
 8005b02:	6823      	ldr	r3, [r4, #0]
 8005b04:	0699      	lsls	r1, r3, #26
 8005b06:	bf42      	ittt	mi
 8005b08:	6833      	ldrmi	r3, [r6, #0]
 8005b0a:	3302      	addmi	r3, #2
 8005b0c:	6033      	strmi	r3, [r6, #0]
 8005b0e:	6825      	ldr	r5, [r4, #0]
 8005b10:	f015 0506 	ands.w	r5, r5, #6
 8005b14:	d106      	bne.n	8005b24 <_printf_common+0x48>
 8005b16:	f104 0a19 	add.w	sl, r4, #25
 8005b1a:	68e3      	ldr	r3, [r4, #12]
 8005b1c:	6832      	ldr	r2, [r6, #0]
 8005b1e:	1a9b      	subs	r3, r3, r2
 8005b20:	42ab      	cmp	r3, r5
 8005b22:	dc26      	bgt.n	8005b72 <_printf_common+0x96>
 8005b24:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005b28:	6822      	ldr	r2, [r4, #0]
 8005b2a:	3b00      	subs	r3, #0
 8005b2c:	bf18      	it	ne
 8005b2e:	2301      	movne	r3, #1
 8005b30:	0692      	lsls	r2, r2, #26
 8005b32:	d42b      	bmi.n	8005b8c <_printf_common+0xb0>
 8005b34:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005b38:	4641      	mov	r1, r8
 8005b3a:	4638      	mov	r0, r7
 8005b3c:	47c8      	blx	r9
 8005b3e:	3001      	adds	r0, #1
 8005b40:	d01e      	beq.n	8005b80 <_printf_common+0xa4>
 8005b42:	6823      	ldr	r3, [r4, #0]
 8005b44:	6922      	ldr	r2, [r4, #16]
 8005b46:	f003 0306 	and.w	r3, r3, #6
 8005b4a:	2b04      	cmp	r3, #4
 8005b4c:	bf02      	ittt	eq
 8005b4e:	68e5      	ldreq	r5, [r4, #12]
 8005b50:	6833      	ldreq	r3, [r6, #0]
 8005b52:	1aed      	subeq	r5, r5, r3
 8005b54:	68a3      	ldr	r3, [r4, #8]
 8005b56:	bf0c      	ite	eq
 8005b58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b5c:	2500      	movne	r5, #0
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	bfc4      	itt	gt
 8005b62:	1a9b      	subgt	r3, r3, r2
 8005b64:	18ed      	addgt	r5, r5, r3
 8005b66:	2600      	movs	r6, #0
 8005b68:	341a      	adds	r4, #26
 8005b6a:	42b5      	cmp	r5, r6
 8005b6c:	d11a      	bne.n	8005ba4 <_printf_common+0xc8>
 8005b6e:	2000      	movs	r0, #0
 8005b70:	e008      	b.n	8005b84 <_printf_common+0xa8>
 8005b72:	2301      	movs	r3, #1
 8005b74:	4652      	mov	r2, sl
 8005b76:	4641      	mov	r1, r8
 8005b78:	4638      	mov	r0, r7
 8005b7a:	47c8      	blx	r9
 8005b7c:	3001      	adds	r0, #1
 8005b7e:	d103      	bne.n	8005b88 <_printf_common+0xac>
 8005b80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005b84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b88:	3501      	adds	r5, #1
 8005b8a:	e7c6      	b.n	8005b1a <_printf_common+0x3e>
 8005b8c:	18e1      	adds	r1, r4, r3
 8005b8e:	1c5a      	adds	r2, r3, #1
 8005b90:	2030      	movs	r0, #48	@ 0x30
 8005b92:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005b96:	4422      	add	r2, r4
 8005b98:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005b9c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005ba0:	3302      	adds	r3, #2
 8005ba2:	e7c7      	b.n	8005b34 <_printf_common+0x58>
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	4622      	mov	r2, r4
 8005ba8:	4641      	mov	r1, r8
 8005baa:	4638      	mov	r0, r7
 8005bac:	47c8      	blx	r9
 8005bae:	3001      	adds	r0, #1
 8005bb0:	d0e6      	beq.n	8005b80 <_printf_common+0xa4>
 8005bb2:	3601      	adds	r6, #1
 8005bb4:	e7d9      	b.n	8005b6a <_printf_common+0x8e>
	...

08005bb8 <_printf_i>:
 8005bb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005bbc:	7e0f      	ldrb	r7, [r1, #24]
 8005bbe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005bc0:	2f78      	cmp	r7, #120	@ 0x78
 8005bc2:	4691      	mov	r9, r2
 8005bc4:	4680      	mov	r8, r0
 8005bc6:	460c      	mov	r4, r1
 8005bc8:	469a      	mov	sl, r3
 8005bca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005bce:	d807      	bhi.n	8005be0 <_printf_i+0x28>
 8005bd0:	2f62      	cmp	r7, #98	@ 0x62
 8005bd2:	d80a      	bhi.n	8005bea <_printf_i+0x32>
 8005bd4:	2f00      	cmp	r7, #0
 8005bd6:	f000 80d1 	beq.w	8005d7c <_printf_i+0x1c4>
 8005bda:	2f58      	cmp	r7, #88	@ 0x58
 8005bdc:	f000 80b8 	beq.w	8005d50 <_printf_i+0x198>
 8005be0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005be4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005be8:	e03a      	b.n	8005c60 <_printf_i+0xa8>
 8005bea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005bee:	2b15      	cmp	r3, #21
 8005bf0:	d8f6      	bhi.n	8005be0 <_printf_i+0x28>
 8005bf2:	a101      	add	r1, pc, #4	@ (adr r1, 8005bf8 <_printf_i+0x40>)
 8005bf4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005bf8:	08005c51 	.word	0x08005c51
 8005bfc:	08005c65 	.word	0x08005c65
 8005c00:	08005be1 	.word	0x08005be1
 8005c04:	08005be1 	.word	0x08005be1
 8005c08:	08005be1 	.word	0x08005be1
 8005c0c:	08005be1 	.word	0x08005be1
 8005c10:	08005c65 	.word	0x08005c65
 8005c14:	08005be1 	.word	0x08005be1
 8005c18:	08005be1 	.word	0x08005be1
 8005c1c:	08005be1 	.word	0x08005be1
 8005c20:	08005be1 	.word	0x08005be1
 8005c24:	08005d63 	.word	0x08005d63
 8005c28:	08005c8f 	.word	0x08005c8f
 8005c2c:	08005d1d 	.word	0x08005d1d
 8005c30:	08005be1 	.word	0x08005be1
 8005c34:	08005be1 	.word	0x08005be1
 8005c38:	08005d85 	.word	0x08005d85
 8005c3c:	08005be1 	.word	0x08005be1
 8005c40:	08005c8f 	.word	0x08005c8f
 8005c44:	08005be1 	.word	0x08005be1
 8005c48:	08005be1 	.word	0x08005be1
 8005c4c:	08005d25 	.word	0x08005d25
 8005c50:	6833      	ldr	r3, [r6, #0]
 8005c52:	1d1a      	adds	r2, r3, #4
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	6032      	str	r2, [r6, #0]
 8005c58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005c5c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005c60:	2301      	movs	r3, #1
 8005c62:	e09c      	b.n	8005d9e <_printf_i+0x1e6>
 8005c64:	6833      	ldr	r3, [r6, #0]
 8005c66:	6820      	ldr	r0, [r4, #0]
 8005c68:	1d19      	adds	r1, r3, #4
 8005c6a:	6031      	str	r1, [r6, #0]
 8005c6c:	0606      	lsls	r6, r0, #24
 8005c6e:	d501      	bpl.n	8005c74 <_printf_i+0xbc>
 8005c70:	681d      	ldr	r5, [r3, #0]
 8005c72:	e003      	b.n	8005c7c <_printf_i+0xc4>
 8005c74:	0645      	lsls	r5, r0, #25
 8005c76:	d5fb      	bpl.n	8005c70 <_printf_i+0xb8>
 8005c78:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005c7c:	2d00      	cmp	r5, #0
 8005c7e:	da03      	bge.n	8005c88 <_printf_i+0xd0>
 8005c80:	232d      	movs	r3, #45	@ 0x2d
 8005c82:	426d      	negs	r5, r5
 8005c84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c88:	4858      	ldr	r0, [pc, #352]	@ (8005dec <_printf_i+0x234>)
 8005c8a:	230a      	movs	r3, #10
 8005c8c:	e011      	b.n	8005cb2 <_printf_i+0xfa>
 8005c8e:	6821      	ldr	r1, [r4, #0]
 8005c90:	6833      	ldr	r3, [r6, #0]
 8005c92:	0608      	lsls	r0, r1, #24
 8005c94:	f853 5b04 	ldr.w	r5, [r3], #4
 8005c98:	d402      	bmi.n	8005ca0 <_printf_i+0xe8>
 8005c9a:	0649      	lsls	r1, r1, #25
 8005c9c:	bf48      	it	mi
 8005c9e:	b2ad      	uxthmi	r5, r5
 8005ca0:	2f6f      	cmp	r7, #111	@ 0x6f
 8005ca2:	4852      	ldr	r0, [pc, #328]	@ (8005dec <_printf_i+0x234>)
 8005ca4:	6033      	str	r3, [r6, #0]
 8005ca6:	bf14      	ite	ne
 8005ca8:	230a      	movne	r3, #10
 8005caa:	2308      	moveq	r3, #8
 8005cac:	2100      	movs	r1, #0
 8005cae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005cb2:	6866      	ldr	r6, [r4, #4]
 8005cb4:	60a6      	str	r6, [r4, #8]
 8005cb6:	2e00      	cmp	r6, #0
 8005cb8:	db05      	blt.n	8005cc6 <_printf_i+0x10e>
 8005cba:	6821      	ldr	r1, [r4, #0]
 8005cbc:	432e      	orrs	r6, r5
 8005cbe:	f021 0104 	bic.w	r1, r1, #4
 8005cc2:	6021      	str	r1, [r4, #0]
 8005cc4:	d04b      	beq.n	8005d5e <_printf_i+0x1a6>
 8005cc6:	4616      	mov	r6, r2
 8005cc8:	fbb5 f1f3 	udiv	r1, r5, r3
 8005ccc:	fb03 5711 	mls	r7, r3, r1, r5
 8005cd0:	5dc7      	ldrb	r7, [r0, r7]
 8005cd2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005cd6:	462f      	mov	r7, r5
 8005cd8:	42bb      	cmp	r3, r7
 8005cda:	460d      	mov	r5, r1
 8005cdc:	d9f4      	bls.n	8005cc8 <_printf_i+0x110>
 8005cde:	2b08      	cmp	r3, #8
 8005ce0:	d10b      	bne.n	8005cfa <_printf_i+0x142>
 8005ce2:	6823      	ldr	r3, [r4, #0]
 8005ce4:	07df      	lsls	r7, r3, #31
 8005ce6:	d508      	bpl.n	8005cfa <_printf_i+0x142>
 8005ce8:	6923      	ldr	r3, [r4, #16]
 8005cea:	6861      	ldr	r1, [r4, #4]
 8005cec:	4299      	cmp	r1, r3
 8005cee:	bfde      	ittt	le
 8005cf0:	2330      	movle	r3, #48	@ 0x30
 8005cf2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005cf6:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005cfa:	1b92      	subs	r2, r2, r6
 8005cfc:	6122      	str	r2, [r4, #16]
 8005cfe:	f8cd a000 	str.w	sl, [sp]
 8005d02:	464b      	mov	r3, r9
 8005d04:	aa03      	add	r2, sp, #12
 8005d06:	4621      	mov	r1, r4
 8005d08:	4640      	mov	r0, r8
 8005d0a:	f7ff fee7 	bl	8005adc <_printf_common>
 8005d0e:	3001      	adds	r0, #1
 8005d10:	d14a      	bne.n	8005da8 <_printf_i+0x1f0>
 8005d12:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005d16:	b004      	add	sp, #16
 8005d18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d1c:	6823      	ldr	r3, [r4, #0]
 8005d1e:	f043 0320 	orr.w	r3, r3, #32
 8005d22:	6023      	str	r3, [r4, #0]
 8005d24:	4832      	ldr	r0, [pc, #200]	@ (8005df0 <_printf_i+0x238>)
 8005d26:	2778      	movs	r7, #120	@ 0x78
 8005d28:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005d2c:	6823      	ldr	r3, [r4, #0]
 8005d2e:	6831      	ldr	r1, [r6, #0]
 8005d30:	061f      	lsls	r7, r3, #24
 8005d32:	f851 5b04 	ldr.w	r5, [r1], #4
 8005d36:	d402      	bmi.n	8005d3e <_printf_i+0x186>
 8005d38:	065f      	lsls	r7, r3, #25
 8005d3a:	bf48      	it	mi
 8005d3c:	b2ad      	uxthmi	r5, r5
 8005d3e:	6031      	str	r1, [r6, #0]
 8005d40:	07d9      	lsls	r1, r3, #31
 8005d42:	bf44      	itt	mi
 8005d44:	f043 0320 	orrmi.w	r3, r3, #32
 8005d48:	6023      	strmi	r3, [r4, #0]
 8005d4a:	b11d      	cbz	r5, 8005d54 <_printf_i+0x19c>
 8005d4c:	2310      	movs	r3, #16
 8005d4e:	e7ad      	b.n	8005cac <_printf_i+0xf4>
 8005d50:	4826      	ldr	r0, [pc, #152]	@ (8005dec <_printf_i+0x234>)
 8005d52:	e7e9      	b.n	8005d28 <_printf_i+0x170>
 8005d54:	6823      	ldr	r3, [r4, #0]
 8005d56:	f023 0320 	bic.w	r3, r3, #32
 8005d5a:	6023      	str	r3, [r4, #0]
 8005d5c:	e7f6      	b.n	8005d4c <_printf_i+0x194>
 8005d5e:	4616      	mov	r6, r2
 8005d60:	e7bd      	b.n	8005cde <_printf_i+0x126>
 8005d62:	6833      	ldr	r3, [r6, #0]
 8005d64:	6825      	ldr	r5, [r4, #0]
 8005d66:	6961      	ldr	r1, [r4, #20]
 8005d68:	1d18      	adds	r0, r3, #4
 8005d6a:	6030      	str	r0, [r6, #0]
 8005d6c:	062e      	lsls	r6, r5, #24
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	d501      	bpl.n	8005d76 <_printf_i+0x1be>
 8005d72:	6019      	str	r1, [r3, #0]
 8005d74:	e002      	b.n	8005d7c <_printf_i+0x1c4>
 8005d76:	0668      	lsls	r0, r5, #25
 8005d78:	d5fb      	bpl.n	8005d72 <_printf_i+0x1ba>
 8005d7a:	8019      	strh	r1, [r3, #0]
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	6123      	str	r3, [r4, #16]
 8005d80:	4616      	mov	r6, r2
 8005d82:	e7bc      	b.n	8005cfe <_printf_i+0x146>
 8005d84:	6833      	ldr	r3, [r6, #0]
 8005d86:	1d1a      	adds	r2, r3, #4
 8005d88:	6032      	str	r2, [r6, #0]
 8005d8a:	681e      	ldr	r6, [r3, #0]
 8005d8c:	6862      	ldr	r2, [r4, #4]
 8005d8e:	2100      	movs	r1, #0
 8005d90:	4630      	mov	r0, r6
 8005d92:	f7fa fa1d 	bl	80001d0 <memchr>
 8005d96:	b108      	cbz	r0, 8005d9c <_printf_i+0x1e4>
 8005d98:	1b80      	subs	r0, r0, r6
 8005d9a:	6060      	str	r0, [r4, #4]
 8005d9c:	6863      	ldr	r3, [r4, #4]
 8005d9e:	6123      	str	r3, [r4, #16]
 8005da0:	2300      	movs	r3, #0
 8005da2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005da6:	e7aa      	b.n	8005cfe <_printf_i+0x146>
 8005da8:	6923      	ldr	r3, [r4, #16]
 8005daa:	4632      	mov	r2, r6
 8005dac:	4649      	mov	r1, r9
 8005dae:	4640      	mov	r0, r8
 8005db0:	47d0      	blx	sl
 8005db2:	3001      	adds	r0, #1
 8005db4:	d0ad      	beq.n	8005d12 <_printf_i+0x15a>
 8005db6:	6823      	ldr	r3, [r4, #0]
 8005db8:	079b      	lsls	r3, r3, #30
 8005dba:	d413      	bmi.n	8005de4 <_printf_i+0x22c>
 8005dbc:	68e0      	ldr	r0, [r4, #12]
 8005dbe:	9b03      	ldr	r3, [sp, #12]
 8005dc0:	4298      	cmp	r0, r3
 8005dc2:	bfb8      	it	lt
 8005dc4:	4618      	movlt	r0, r3
 8005dc6:	e7a6      	b.n	8005d16 <_printf_i+0x15e>
 8005dc8:	2301      	movs	r3, #1
 8005dca:	4632      	mov	r2, r6
 8005dcc:	4649      	mov	r1, r9
 8005dce:	4640      	mov	r0, r8
 8005dd0:	47d0      	blx	sl
 8005dd2:	3001      	adds	r0, #1
 8005dd4:	d09d      	beq.n	8005d12 <_printf_i+0x15a>
 8005dd6:	3501      	adds	r5, #1
 8005dd8:	68e3      	ldr	r3, [r4, #12]
 8005dda:	9903      	ldr	r1, [sp, #12]
 8005ddc:	1a5b      	subs	r3, r3, r1
 8005dde:	42ab      	cmp	r3, r5
 8005de0:	dcf2      	bgt.n	8005dc8 <_printf_i+0x210>
 8005de2:	e7eb      	b.n	8005dbc <_printf_i+0x204>
 8005de4:	2500      	movs	r5, #0
 8005de6:	f104 0619 	add.w	r6, r4, #25
 8005dea:	e7f5      	b.n	8005dd8 <_printf_i+0x220>
 8005dec:	08005fb5 	.word	0x08005fb5
 8005df0:	08005fc6 	.word	0x08005fc6

08005df4 <memmove>:
 8005df4:	4288      	cmp	r0, r1
 8005df6:	b510      	push	{r4, lr}
 8005df8:	eb01 0402 	add.w	r4, r1, r2
 8005dfc:	d902      	bls.n	8005e04 <memmove+0x10>
 8005dfe:	4284      	cmp	r4, r0
 8005e00:	4623      	mov	r3, r4
 8005e02:	d807      	bhi.n	8005e14 <memmove+0x20>
 8005e04:	1e43      	subs	r3, r0, #1
 8005e06:	42a1      	cmp	r1, r4
 8005e08:	d008      	beq.n	8005e1c <memmove+0x28>
 8005e0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005e12:	e7f8      	b.n	8005e06 <memmove+0x12>
 8005e14:	4402      	add	r2, r0
 8005e16:	4601      	mov	r1, r0
 8005e18:	428a      	cmp	r2, r1
 8005e1a:	d100      	bne.n	8005e1e <memmove+0x2a>
 8005e1c:	bd10      	pop	{r4, pc}
 8005e1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005e22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005e26:	e7f7      	b.n	8005e18 <memmove+0x24>

08005e28 <_sbrk_r>:
 8005e28:	b538      	push	{r3, r4, r5, lr}
 8005e2a:	4d06      	ldr	r5, [pc, #24]	@ (8005e44 <_sbrk_r+0x1c>)
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	4604      	mov	r4, r0
 8005e30:	4608      	mov	r0, r1
 8005e32:	602b      	str	r3, [r5, #0]
 8005e34:	f7fb f9f6 	bl	8001224 <_sbrk>
 8005e38:	1c43      	adds	r3, r0, #1
 8005e3a:	d102      	bne.n	8005e42 <_sbrk_r+0x1a>
 8005e3c:	682b      	ldr	r3, [r5, #0]
 8005e3e:	b103      	cbz	r3, 8005e42 <_sbrk_r+0x1a>
 8005e40:	6023      	str	r3, [r4, #0]
 8005e42:	bd38      	pop	{r3, r4, r5, pc}
 8005e44:	20000300 	.word	0x20000300

08005e48 <memcpy>:
 8005e48:	440a      	add	r2, r1
 8005e4a:	4291      	cmp	r1, r2
 8005e4c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005e50:	d100      	bne.n	8005e54 <memcpy+0xc>
 8005e52:	4770      	bx	lr
 8005e54:	b510      	push	{r4, lr}
 8005e56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e5e:	4291      	cmp	r1, r2
 8005e60:	d1f9      	bne.n	8005e56 <memcpy+0xe>
 8005e62:	bd10      	pop	{r4, pc}

08005e64 <_realloc_r>:
 8005e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e68:	4607      	mov	r7, r0
 8005e6a:	4614      	mov	r4, r2
 8005e6c:	460d      	mov	r5, r1
 8005e6e:	b921      	cbnz	r1, 8005e7a <_realloc_r+0x16>
 8005e70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e74:	4611      	mov	r1, r2
 8005e76:	f7ff bc4d 	b.w	8005714 <_malloc_r>
 8005e7a:	b92a      	cbnz	r2, 8005e88 <_realloc_r+0x24>
 8005e7c:	f7ff fbde 	bl	800563c <_free_r>
 8005e80:	4625      	mov	r5, r4
 8005e82:	4628      	mov	r0, r5
 8005e84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e88:	f000 f81a 	bl	8005ec0 <_malloc_usable_size_r>
 8005e8c:	4284      	cmp	r4, r0
 8005e8e:	4606      	mov	r6, r0
 8005e90:	d802      	bhi.n	8005e98 <_realloc_r+0x34>
 8005e92:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005e96:	d8f4      	bhi.n	8005e82 <_realloc_r+0x1e>
 8005e98:	4621      	mov	r1, r4
 8005e9a:	4638      	mov	r0, r7
 8005e9c:	f7ff fc3a 	bl	8005714 <_malloc_r>
 8005ea0:	4680      	mov	r8, r0
 8005ea2:	b908      	cbnz	r0, 8005ea8 <_realloc_r+0x44>
 8005ea4:	4645      	mov	r5, r8
 8005ea6:	e7ec      	b.n	8005e82 <_realloc_r+0x1e>
 8005ea8:	42b4      	cmp	r4, r6
 8005eaa:	4622      	mov	r2, r4
 8005eac:	4629      	mov	r1, r5
 8005eae:	bf28      	it	cs
 8005eb0:	4632      	movcs	r2, r6
 8005eb2:	f7ff ffc9 	bl	8005e48 <memcpy>
 8005eb6:	4629      	mov	r1, r5
 8005eb8:	4638      	mov	r0, r7
 8005eba:	f7ff fbbf 	bl	800563c <_free_r>
 8005ebe:	e7f1      	b.n	8005ea4 <_realloc_r+0x40>

08005ec0 <_malloc_usable_size_r>:
 8005ec0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ec4:	1f18      	subs	r0, r3, #4
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	bfbc      	itt	lt
 8005eca:	580b      	ldrlt	r3, [r1, r0]
 8005ecc:	18c0      	addlt	r0, r0, r3
 8005ece:	4770      	bx	lr

08005ed0 <_init>:
 8005ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ed2:	bf00      	nop
 8005ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ed6:	bc08      	pop	{r3}
 8005ed8:	469e      	mov	lr, r3
 8005eda:	4770      	bx	lr

08005edc <_fini>:
 8005edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ede:	bf00      	nop
 8005ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ee2:	bc08      	pop	{r3}
 8005ee4:	469e      	mov	lr, r3
 8005ee6:	4770      	bx	lr
